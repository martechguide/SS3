{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a high-performance full-stack educational video learning platform built with React, Express, and PostgreSQL, optimized to handle 1-10 lakh (100,000-1,000,000) concurrent users. The application provides structured learning through batches and subjects, with video content delivery, progress tracking, and comprehensive scalability optimizations. It features Replit OAuth authentication with email whitelist access control, ensuring only authorized users can access the learning materials.\n\n## Scalability Features\n- **High-traffic optimizations**: Database connection pooling (100 connections), compression middleware, rate limiting\n- **Security**: Helmet.js security headers, CORS configuration, express-rate-limit for DDoS protection  \n- **Caching**: Multi-level caching with TTL for static content (30 min), video metadata (1 hour), user content (5 min)\n- **Performance monitoring**: Real-time metrics for memory usage, CPU utilization, and response times\n- **Autoscale deployment**: Configured for 2-20 instances with 2 CPU cores and 4GB RAM each\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the bundler\n- **UI Components**: Shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query for server state management\n- **Form Handling**: React Hook Form with Zod validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Replit OAuth with OpenID Connect using Passport.js\n- **Session Management**: Express sessions with PostgreSQL storage\n- **API Design**: RESTful API with role-based access control\n\n## Database Design\n- **ORM**: Drizzle with PostgreSQL dialect\n- **Schema Structure**:\n  - Users table for authentication (required for Replit Auth)\n  - Sessions table for session storage (required for Replit Auth)\n  - Email whitelist table for access control\n  - Batches table for organizing learning content\n  - Subjects table nested under batches\n  - Videos table nested under subjects\n  - User progress tracking table\n  - Ad settings table for admin configuration\n\n## Authentication & Authorization\n- **Primary Auth**: Replit OAuth integration with Google Sign-In\n- **Access Control**: Email whitelist system - only approved emails can access content\n- **Session Handling**: Server-side sessions with PostgreSQL storage\n- **Route Protection**: Middleware-based authentication checks on all protected routes\n\n## Content Management\n- **Hierarchical Structure**: Batches → Subjects → Videos\n- **Video Integration**: YouTube video embedding with privacy-enhanced URLs and comprehensive protection system\n- **Universal Protection System**: Standardized `VideoProtectionSystem` component applied to ALL video embeds automatically\n- **Mandatory Implementation**: Every video embed MUST use `VideoProtectionSystem` for consistent blocking functionality\n- **Transparent Protection**: All blocking patches are transparent by default with hover visibility (black 80% opacity on hover)\n- **Full-Width Coverage**: Top blocker covers entire player width to prevent mobile \"Y\" visibility\n- **Black Video ID Patch**: Bottom center patch remains permanently black to hide video ID numbers\n- **Hover Feedback**: Interactive areas become visible on hover to show protection zones\n- **Future-Proof Design**: All new video components automatically inherit protection when using the universal system\n- **Responsive Design**: Protection patches adapt to mobile, tablet, and desktop viewports with percentage-based positioning\n- **Progress Tracking**: User watch time and completion status tracking\n- **Video Seeking Controls**: Custom forward/backward seeking with interactive timeline\n- **Hover Controls**: Video controls appear on hover with play/pause, skip, and volume\n- **Timeline Scrubbing**: Interactive seek bar for precise video navigation\n- **Admin Features**: Admin dashboard for content and user management\n\n## Multi-Network Ad Monetization System\n- **Universal Ad Integration**: Comprehensive ad system supporting AdSense, Adsterra, and promotional ads\n- **Promotional Video Ads**: Custom brand partner video advertisements with full video player controls\n- **Pre-roll Video System**: Brand promotional videos play before educational content with 5-second skip functionality  \n- **Interactive Video Controls**: Full video player with play/pause, volume, progress bar, and click-to-website\n- **Brand Partnership Management**: Complete admin dashboard for managing brand video campaigns and analytics\n- **Analytics Tracking**: Detailed tracking for video ad impressions, clicks, completion rates, and user engagement\n- **Pause-Triggered Popup Ads**: Small popup ads appear when users pause videos (2-second delay)\n- **Between-Videos Ads**: Native and banner ads displayed between video lessons\n- **Multi-Placement Support**: Header, sidebar, footer, pause-overlay, between-videos, and native placements\n- **Revenue Optimization**: Multi-network approach maximizes earnings with fast-approval alternatives\n- **Educational Content Premium**: Higher CPM rates for educational audiences ($2-12 CPM range)\n- **Instant Monetization**: Adsterra provides 2-10 minute approval for immediate revenue\n- **Advanced Ad Controls**: Complete admin dashboard for ad configuration and revenue tracking\n- **Responsive Ad System**: All ad formats adapt to mobile, tablet, and desktop layouts\n\n## Development Environment\n- **Build System**: Vite for frontend bundling, esbuild for backend compilation\n- **Type Safety**: Full TypeScript implementation across frontend and backend\n- **Hot Reload**: Vite dev server with HMR for development\n- **Database Migrations**: Drizzle Kit for schema management\n\n# External Dependencies\n\n## Core Services\n- **Database**: PostgreSQL (configured via DATABASE_URL environment variable)\n- **Authentication Provider**: Replit OAuth service\n- **Video Content**: YouTube (embedded via privacy-enhanced nocookie domain)\n\n## Key Libraries\n- **UI Framework**: React 18 with TypeScript\n- **Backend Framework**: Express.js with TypeScript\n- **Database**: Drizzle ORM with Neon PostgreSQL driver\n- **Authentication**: Passport.js with OpenID Connect strategy\n- **Form Validation**: Zod schema validation\n- **Styling**: Tailwind CSS with Radix UI components\n- **State Management**: TanStack Query for API state\n\n## Development Tools\n- **Bundler**: Vite with React plugin\n- **Type Checking**: TypeScript compiler\n- **CSS Processing**: PostCSS with Tailwind and Autoprefixer\n- **Development Server**: Express with Vite middleware integration\n\n## Environment Requirements\n- Node.js runtime with ES modules support\n- PostgreSQL database connection\n- Replit environment variables for OAuth configuration\n- Session secret for secure session management","size_bytes":7063},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// Configure Neon for better WebSocket stability\nneonConfig.webSocketConstructor = ws;\nneonConfig.useSecureWebSocket = true;\nneonConfig.pipelineConnect = false;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Configure connection pool for high-traffic scalability (1-10 lakh users)\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  connectionTimeoutMillis: 10000,\n  idleTimeoutMillis: 60000,\n  max: 100, // Increased pool size for high concurrency\n  allowExitOnIdle: true,\n  maxUses: 7500, // Prevents connection leaks\n  keepAlive: true\n});\n\nexport const db = drizzle({ client: pool, schema });","size_bytes":893},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport compression from \"compression\";\nimport rateLimit from \"express-rate-limit\";\nimport helmet from \"helmet\";\nimport cors from \"cors\";\nimport { optimizeVideoStreaming, performanceMonitor } from \"./optimization\";\n\nconst app = express();\n\n// High-traffic optimizations\napp.set('trust proxy', true);\napp.disable('x-powered-by');\n\n// Security middleware for production\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\", \"wss:\", \"https:\"],\n      frameSrc: [\"'self'\", \"https://www.youtube-nocookie.com\", \"https://vimeo.com\", \"https://www.facebook.com\"],\n      mediaSrc: [\"'self'\", \"https:\"],\n    },\n  },\n}));\n\n// CORS configuration for cross-origin requests\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' \n    ? [`https://${process.env.REPLIT_DOMAINS}`] \n    : true,\n  credentials: true,\n  optionsSuccessStatus: 200\n}));\n\n// Rate limiting for API endpoints (1-10 lakh users support)\nconst generalLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 1000, // Limit each IP to 1000 requests per windowMs\n  message: \"Too many requests from this IP, please try again later\",\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 50, // Limit auth requests more strictly\n  message: \"Too many authentication attempts, please try again later\",\n});\n\napp.use('/api/', generalLimiter);\napp.use('/api/auth/', authLimiter);\n\n// Compression for better performance\napp.use(compression({\n  filter: (req, res) => {\n    if (req.headers['x-no-compression']) {\n      return false;\n    }\n    return compression.filter(req, res);\n  },\n  level: 6,\n  threshold: 1024\n}));\n\n// Rate limiting and body parsing with limits for security\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\n// Video streaming optimization for high traffic\napp.use(optimizeVideoStreaming);\n\n// Start performance monitoring in production\nperformanceMonitor();\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    const server = await registerRoutes(app);\n\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n\n      console.error(\"Server error:\", err);\n      res.status(status).json({ message });\n    });\n\n    // importantly only setup vite in development and after\n    // setting up all the other routes so the catch-all route\n    // doesn't interfere with the other routes\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    // ALWAYS serve the app on the port specified in the environment variable PORT\n    // Other ports are firewalled. Default to 5000 if not specified.\n    // this serves both the API and the client.\n    // It is the only port that is not firewalled.\n    const port = parseInt(process.env.PORT || '5000', 10);\n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, () => {\n      log(`serving on port ${port}`);\n    });\n  } catch (error) {\n    console.error(\"Failed to start server:\", error);\n    process.exit(1);\n  }\n})();\n","size_bytes":4359},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { z } from \"zod\";\nimport { staticContentCache, userContentCache, videoMetadataCache } from \"./cache\";\nimport { \n  insertBatchSchema, \n  insertCourseSchema,\n  insertSubjectSchema, \n  insertVideoSchema,\n  insertWhitelistedEmailSchema,\n  insertUserProgressSchema,\n  insertBrandPromotionSchema,\n  insertBrandAdPlacementSchema,\n  insertBrandPromotionAnalyticsSchema,\n  insertBannerAdSettingsSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Temporarily allow all authenticated users for demo\n      // Check if user email is whitelisted\n      // const isWhitelisted = await storage.isEmailWhitelisted(user.email!);\n      // if (!isWhitelisted) {\n      //   return res.status(403).json({ message: \"Access denied. Contact administrator.\" });\n      // }\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Batch routes\n  app.get(\"/api/batches/:batchId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Access denied\" });\n      // }\n\n      const { batchId } = req.params;\n      const batch = await storage.getBatch(batchId);\n      \n      if (!batch) {\n        return res.status(404).json({ message: \"Batch not found\" });\n      }\n      \n      res.json(batch);\n    } catch (error) {\n      console.error(\"Error fetching batch:\", error);\n      res.status(500).json({ message: \"Failed to fetch batch\" });\n    }\n  });\n\n  app.get(\"/api/batches\", isAuthenticated, staticContentCache, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Access denied\" });\n      // }\n\n      const batches = await storage.getBatches();\n      \n      // Set cache headers for better performance\n      res.set({\n        'Cache-Control': 'public, max-age=1800', // 30 minutes\n        'ETag': `\"batches-${Date.now()}\"`,\n        'Vary': 'Accept-Encoding'\n      });\n      \n      res.json(batches);\n    } catch (error) {\n      console.error(\"Error fetching batches:\", error);\n      res.status(500).json({ message: \"Failed to fetch batches\" });\n    }\n  });\n\n  app.post(\"/api/batches\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Admin access required\" });\n      // }\n\n      const batchData = insertBatchSchema.parse(req.body);\n      const batch = await storage.createBatch(batchData);\n      res.json(batch);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid batch data\", errors: error.errors });\n      }\n      console.error(\"Error creating batch:\", error);\n      res.status(500).json({ message: \"Failed to create batch\" });\n    }\n  });\n\n  app.patch(\"/api/batches/:batchId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Admin access required\" });\n      // }\n\n      const { batchId } = req.params;\n      const batchData = insertBatchSchema.partial().parse(req.body);\n      const batch = await storage.updateBatch(batchId, batchData);\n      res.json(batch);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid batch data\", errors: error.errors });\n      }\n      console.error(\"Error updating batch:\", error);\n      res.status(500).json({ message: \"Failed to update batch\" });\n    }\n  });\n\n  app.delete(\"/api/batches/:batchId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Admin access required\" });\n      // }\n\n      const { batchId } = req.params;\n      await storage.deleteBatch(batchId);\n      res.json({ message: \"Batch deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting batch:\", error);\n      res.status(500).json({ message: \"Failed to delete batch\" });\n    }\n  });\n\n  // Course routes  \n  app.get(\"/api/batches/:batchId/courses\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      const { batchId } = req.params;\n      const courses = await storage.getCoursesByBatch(batchId);\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Error fetching courses:\", error);\n      res.status(500).json({ message: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.post(\"/api/batches/:batchId/courses\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      const { batchId } = req.params;\n      const courseData = insertCourseSchema.parse({\n        ...req.body,\n        batchId\n      });\n      const course = await storage.createCourse(courseData);\n      res.json(course);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid course data\", errors: error.errors });\n      }\n      console.error(\"Error creating course:\", error);\n      res.status(500).json({ message: \"Failed to create course\" });\n    }\n  });\n\n  app.patch(\"/api/courses/:courseId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      const { courseId } = req.params;\n      const courseData = insertCourseSchema.partial().parse(req.body);\n      const course = await storage.updateCourse(courseId, courseData);\n      res.json(course);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid course data\", errors: error.errors });\n      }\n      console.error(\"Error updating course:\", error);\n      res.status(500).json({ message: \"Failed to update course\" });\n    }\n  });\n\n  app.delete(\"/api/courses/:courseId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      const { courseId } = req.params;\n      await storage.deleteCourse(courseId);\n      res.json({ message: \"Course deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting course:\", error);\n      res.status(500).json({ message: \"Failed to delete course\" });\n    }\n  });\n\n  app.get(\"/api/courses/:courseId/subjects\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      const { courseId } = req.params;\n      const subjects = await storage.getSubjectsByCourse(courseId);\n      res.json(subjects);\n    } catch (error) {\n      console.error(\"Error fetching subjects:\", error);\n      res.status(500).json({ message: \"Failed to fetch subjects\" });\n    }\n  });\n\n  app.post(\"/api/courses/:courseId/subjects\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      const { courseId } = req.params;\n      // Get course to ensure batchId is available\n      const course = await storage.getCourse(courseId);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      \n      const subjectData = insertSubjectSchema.parse({\n        ...req.body,\n        batchId: course.batchId,\n        courseId\n      });\n      const subject = await storage.createSubject(subjectData);\n      res.json(subject);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid subject data\", errors: error.errors });\n      }\n      console.error(\"Error creating subject:\", error);\n      res.status(500).json({ message: \"Failed to create subject\" });\n    }\n  });\n\n  // Subject routes\n  app.get(\"/api/subjects/:subjectId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Access denied\" });\n      // }\n\n      const { subjectId } = req.params;\n      const subject = await storage.getSubject(subjectId);\n      \n      if (!subject) {\n        return res.status(404).json({ message: \"Subject not found\" });\n      }\n      \n      res.json(subject);\n    } catch (error) {\n      console.error(\"Error fetching subject:\", error);\n      res.status(500).json({ message: \"Failed to fetch subject\" });\n    }\n  });\n\n  app.get(\"/api/batches/:batchId/subjects\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Access denied\" });\n      // }\n\n      const { batchId } = req.params;\n      const subjects = await storage.getSubjectsByBatch(batchId);\n      res.json(subjects);\n    } catch (error) {\n      console.error(\"Error fetching subjects:\", error);\n      res.status(500).json({ message: \"Failed to fetch subjects\" });\n    }\n  });\n\n  app.post(\"/api/batches/:batchId/subjects\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Admin access required\" });\n      // }\n\n      const { batchId } = req.params;\n      const subjectData = insertSubjectSchema.parse({\n        ...req.body,\n        batchId\n      });\n      const subject = await storage.createSubject(subjectData);\n      res.json(subject);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid subject data\", errors: error.errors });\n      }\n      console.error(\"Error creating subject:\", error);\n      res.status(500).json({ message: \"Failed to create subject\" });\n    }\n  });\n\n  // Subject update and delete routes\n  app.patch(\"/api/subjects/:subjectId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Admin access required\" });\n      // }\n\n      const { subjectId } = req.params;\n      const subjectData = insertSubjectSchema.partial().parse(req.body);\n      const subject = await storage.updateSubject(subjectId, subjectData);\n      res.json(subject);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid subject data\", errors: error.errors });\n      }\n      console.error(\"Error updating subject:\", error);\n      res.status(500).json({ message: \"Failed to update subject\" });\n    }\n  });\n\n  app.delete(\"/api/subjects/:subjectId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Admin access required\" });\n      // }\n\n      const { subjectId } = req.params;\n      await storage.deleteSubject(subjectId);\n      res.json({ message: \"Subject deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting subject:\", error);\n      res.status(500).json({ message: \"Failed to delete subject\" });\n    }\n  });\n\n  // Video routes\n  app.get(\"/api/videos/:videoId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Access denied\" });\n      // }\n\n      const { videoId } = req.params;\n      const video = await storage.getVideo(videoId);\n      \n      if (!video) {\n        return res.status(404).json({ message: \"Video not found\" });\n      }\n      \n      res.json(video);\n    } catch (error) {\n      console.error(\"Error fetching video:\", error);\n      res.status(500).json({ message: \"Failed to fetch video\" });\n    }\n  });\n\n  app.get(\"/api/subjects/:subjectId/videos\", isAuthenticated, videoMetadataCache, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Access denied\" });\n      // }\n\n      const { subjectId } = req.params;\n      const videos = await storage.getVideosBySubject(subjectId);\n      \n      // Set cache headers for video metadata\n      res.set({\n        'Cache-Control': 'public, max-age=3600', // 1 hour\n        'ETag': `\"videos-${subjectId}-${Date.now()}\"`,\n        'Vary': 'Accept-Encoding'\n      });\n      \n      res.json(videos);\n    } catch (error) {\n      console.error(\"Error fetching videos:\", error);\n      res.status(500).json({ message: \"Failed to fetch videos\" });\n    }\n  });\n\n  app.post(\"/api/subjects/:subjectId/videos\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Admin access required\" });\n      // }\n\n      const { subjectId } = req.params;\n      const videoData = insertVideoSchema.parse({\n        ...req.body,\n        subjectId\n      });\n      const video = await storage.createVideo(videoData);\n      res.json(video);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid video data\", errors: error.errors });\n      }\n      console.error(\"Error creating video:\", error);\n      res.status(500).json({ message: \"Failed to create video\" });\n    }\n  });\n\n  // Video update and delete routes\n  app.patch(\"/api/videos/:videoId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Admin access required\" });\n      // }\n\n      const { videoId } = req.params;\n      const videoData = insertVideoSchema.partial().parse(req.body);\n      const video = await storage.updateVideo(videoId, videoData);\n      res.json(video);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid video data\", errors: error.errors });\n      }\n      console.error(\"Error updating video:\", error);\n      res.status(500).json({ message: \"Failed to update video\" });\n    }\n  });\n\n  app.delete(\"/api/videos/:videoId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Admin access required\" });\n      // }\n\n      const { videoId } = req.params;\n      await storage.deleteVideo(videoId);\n      res.json({ message: \"Video deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting video:\", error);\n      res.status(500).json({ message: \"Failed to delete video\" });\n    }\n  });\n\n  // Multi-platform video routes\n  app.get(\"/api/subjects/:subjectId/multi-platform-videos\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Access denied\" });\n      // }\n\n      const { subjectId } = req.params;\n      const videos = await storage.getMultiPlatformVideosBySubject(subjectId);\n      res.json(videos);\n    } catch (error) {\n      console.error(\"Error fetching multi-platform videos:\", error);\n      res.status(500).json({ message: \"Failed to fetch multi-platform videos\" });\n    }\n  });\n\n  app.get(\"/api/multi-platform-videos/:videoId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Access denied\" });\n      // }\n\n      const { videoId } = req.params;\n      const video = await storage.getMultiPlatformVideo(videoId);\n      \n      if (!video) {\n        return res.status(404).json({ message: \"Multi-platform video not found\" });\n      }\n      \n      res.json(video);\n    } catch (error) {\n      console.error(\"Error fetching multi-platform video:\", error);\n      res.status(500).json({ message: \"Failed to fetch multi-platform video\" });\n    }\n  });\n\n  // Admin routes for email whitelist management\n  app.get(\"/api/admin/whitelist\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Admin access required\" });\n      // }\n\n      const whitelistedEmails = await storage.getWhitelistedEmails();\n      res.json(whitelistedEmails);\n    } catch (error) {\n      console.error(\"Error fetching whitelist:\", error);\n      res.status(500).json({ message: \"Failed to fetch whitelist\" });\n    }\n  });\n\n  app.post(\"/api/admin/whitelist\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Temporarily allow all authenticated users for demo\n      // if (!user || !(await storage.isEmailWhitelisted(user.email!))) {\n      //   return res.status(403).json({ message: \"Admin access required\" });\n      // }\n\n      const emailData = insertWhitelistedEmailSchema.parse(req.body);\n      const whitelistedEmail = await storage.addWhitelistedEmail(emailData);\n      res.json(whitelistedEmail);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid email data\", errors: error.errors });\n      }\n      console.error(\"Error adding email to whitelist:\", error);\n      res.status(500).json({ message: \"Failed to add email to whitelist\" });\n    }\n  });\n\n  // Brand Promotion Routes\n  // Get all brand promotions (Admin only)\n  app.get(\"/api/admin/brand-promotions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const promotions = await storage.getBrandPromotions();\n      res.json(promotions);\n    } catch (error) {\n      console.error(\"Error fetching brand promotions:\", error);\n      res.status(500).json({ message: \"Failed to fetch brand promotions\" });\n    }\n  });\n\n  // Get single brand promotion\n  app.get(\"/api/admin/brand-promotions/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const promotion = await storage.getBrandPromotion(id);\n      \n      if (!promotion) {\n        return res.status(404).json({ message: \"Brand promotion not found\" });\n      }\n      \n      res.json(promotion);\n    } catch (error) {\n      console.error(\"Error fetching brand promotion:\", error);\n      res.status(500).json({ message: \"Failed to fetch brand promotion\" });\n    }\n  });\n\n  // Create new brand promotion\n  app.post(\"/api/admin/brand-promotions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const promotionData = insertBrandPromotionSchema.parse(req.body);\n      const promotion = await storage.createBrandPromotion(promotionData);\n      res.json(promotion);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid promotion data\", errors: error.errors });\n      }\n      console.error(\"Error creating brand promotion:\", error);\n      res.status(500).json({ message: \"Failed to create brand promotion\" });\n    }\n  });\n\n  // Update brand promotion\n  app.patch(\"/api/admin/brand-promotions/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const promotionData = insertBrandPromotionSchema.partial().parse(req.body);\n      const promotion = await storage.updateBrandPromotion(id, promotionData);\n      res.json(promotion);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid promotion data\", errors: error.errors });\n      }\n      console.error(\"Error updating brand promotion:\", error);\n      res.status(500).json({ message: \"Failed to update brand promotion\" });\n    }\n  });\n\n  // Delete brand promotion\n  app.delete(\"/api/admin/brand-promotions/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteBrandPromotion(id);\n      res.json({ message: \"Brand promotion deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting brand promotion:\", error);\n      res.status(500).json({ message: \"Failed to delete brand promotion\" });\n    }\n  });\n\n  // Get active brand promotions for front-end display\n  app.get(\"/api/brand-promotions/active\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { placementType, videoId, subjectId, batchId } = req.query;\n      const promotions = await storage.getActiveBrandAdsByPlacement(\n        placementType as string,\n        videoId as string,\n        subjectId as string,\n        batchId as string\n      );\n      res.json(promotions);\n    } catch (error) {\n      console.error(\"Error fetching active brand promotions:\", error);\n      res.status(500).json({ message: \"Failed to fetch active brand promotions\" });\n    }\n  });\n\n  // Track brand promotion analytics\n  app.post(\"/api/brand-promotions/analytics\", isAuthenticated, async (req: any, res) => {\n    try {\n      const analyticsData = insertBrandPromotionAnalyticsSchema.parse(req.body);\n      await storage.trackBrandPromotionView(analyticsData);\n      res.json({ message: \"Analytics tracked successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid analytics data\", errors: error.errors });\n      }\n      console.error(\"Error tracking analytics:\", error);\n      res.status(500).json({ message: \"Failed to track analytics\" });\n    }\n  });\n\n  // Get brand promotion analytics (Admin only)\n  app.get(\"/api/admin/brand-promotions/:id/analytics\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const analytics = await storage.getBrandPromotionAnalytics(id);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Banner Ad Settings Routes\n  app.get(\"/api/admin/banner-ads\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Check if user is admin (for now, just check if email is whitelisted)\n      // In production, you'd have proper admin role checking\n      if (!user) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const settings = await storage.getBannerAdSettings();\n      \n      // Return default settings if none exist\n      if (!settings) {\n        const defaultSettings = {\n          enabled: true,\n          globalEnabled: true,\n          homePageEnabled: true,\n          videoPageEnabled: true,\n          subjectPageEnabled: true,\n          mobileEnabled: true,\n          placement: \"bottom\",\n          dismissible: true,\n          showCloseButton: true,\n          minimizable: true,\n          autoHide: false,\n          autoHideDelay: 30,\n          maxImpressions: 1000,\n          adNetwork: \"mixed\"\n        };\n        return res.json(defaultSettings);\n      }\n      \n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching banner ad settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch banner ad settings\" });\n    }\n  });\n\n  app.put(\"/api/admin/banner-ads\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Check if user is admin\n      if (!user) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const validatedData = insertBannerAdSettingsSchema.parse(req.body);\n      const updatedSettings = await storage.updateBannerAdSettings(validatedData);\n      \n      res.json(updatedSettings);\n    } catch (error) {\n      console.error(\"Error updating banner ad settings:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid data\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to update banner ad settings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n  // Setup WebSocket for real-time features (optional for high traffic scenarios)\n  // Uncomment the line below if you need real-time features like live viewer counts\n  // setupWebSocket(httpServer);\n  \n  return httpServer;\n}","size_bytes":28265},"server/storage.ts":{"content":"import {\n  users,\n  batches,\n  courses,\n  subjects,\n  videos,\n  multiPlatformVideos,\n  userProgress,\n  adSettings,\n  whitelistedEmails,\n  brandPromotions,\n  brandAdPlacements,\n  brandPromotionAnalytics,\n  bannerAdSettings,\n  type User,\n  type UpsertUser,\n  type Batch,\n  type Course,\n  type Subject,\n  type Video,\n  type MultiPlatformVideo,\n  type UserProgress,\n  type AdSettings,\n  type WhitelistedEmail,\n  type BrandPromotion,\n  type BrandAdPlacement,\n  type BrandPromotionAnalytics,\n  type BannerAdSettings,\n  type InsertBatch,\n  type InsertCourse,\n  type InsertSubject,\n  type InsertVideo,\n  type InsertMultiPlatformVideo,\n  type InsertWhitelistedEmail,\n  type InsertUserProgress,\n  type InsertBrandPromotion,\n  type InsertBrandAdPlacement,\n  type InsertBrandPromotionAnalytics,\n  type InsertBannerAdSettings,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, isNull, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (IMPORTANT) these are mandatory for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Email whitelist operations\n  isEmailWhitelisted(email: string): Promise<boolean>;\n  getWhitelistedEmails(): Promise<WhitelistedEmail[]>;\n  addWhitelistedEmail(email: InsertWhitelistedEmail): Promise<WhitelistedEmail>;\n  removeWhitelistedEmail(email: string): Promise<void>;\n  \n  // Batch operations\n  getBatches(): Promise<Batch[]>;\n  getBatch(id: string): Promise<Batch | undefined>;\n  createBatch(batch: InsertBatch): Promise<Batch>;\n  updateBatch(id: string, batch: Partial<InsertBatch>): Promise<Batch>;\n  deleteBatch(id: string): Promise<void>;\n  \n  // Course operations\n  getCoursesByBatch(batchId: string): Promise<Course[]>;\n  getCourse(id: string): Promise<Course | undefined>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  updateCourse(id: string, course: Partial<InsertCourse>): Promise<Course>;\n  deleteCourse(id: string): Promise<void>;\n  \n  // Subject operations\n  getSubjectsByCourse(courseId: string): Promise<Subject[]>;\n  getSubjectsByBatch(batchId: string): Promise<Subject[]>;\n  getSubject(id: string): Promise<Subject | undefined>;\n  createSubject(subject: InsertSubject): Promise<Subject>;\n  updateSubject(id: string, subject: Partial<InsertSubject>): Promise<Subject>;\n  deleteSubject(id: string): Promise<void>;\n  \n  // Video operations  \n  getVideosBySubject(subjectId: string): Promise<Video[]>;\n  getVideo(id: string): Promise<Video | undefined>;\n  createVideo(video: InsertVideo): Promise<Video>;\n  updateVideo(id: string, video: Partial<InsertVideo>): Promise<Video>;\n  deleteVideo(id: string): Promise<void>;\n  \n  // Multi-platform video operations\n  getMultiPlatformVideosBySubject(subjectId: string): Promise<MultiPlatformVideo[]>;\n  getMultiPlatformVideo(id: string): Promise<MultiPlatformVideo | undefined>;\n  createMultiPlatformVideo(video: InsertMultiPlatformVideo): Promise<MultiPlatformVideo>;\n  updateMultiPlatformVideo(id: string, video: Partial<InsertMultiPlatformVideo>): Promise<MultiPlatformVideo>;\n  deleteMultiPlatformVideo(id: string): Promise<void>;\n  \n  // User progress operations\n  getUserProgress(userId: string, videoId: string): Promise<UserProgress | undefined>;\n  updateUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  getUserProgressBySubject(userId: string, subjectId: string): Promise<UserProgress[]>;\n  \n  // Ad settings operations\n  getAdSettings(): Promise<AdSettings>;\n  updateAdSettings(settings: Partial<AdSettings>): Promise<AdSettings>;\n\n  // Brand promotion operations\n  getBrandPromotions(): Promise<BrandPromotion[]>;\n  getBrandPromotion(id: string): Promise<BrandPromotion | undefined>;\n  createBrandPromotion(promotion: InsertBrandPromotion): Promise<BrandPromotion>;\n  updateBrandPromotion(id: string, promotion: Partial<InsertBrandPromotion>): Promise<BrandPromotion>;\n  deleteBrandPromotion(id: string): Promise<void>;\n  getActiveBrandPromotions(): Promise<BrandPromotion[]>;\n  updateBrandPromotionStats(id: string, impressions: number, clicks: number): Promise<void>;\n\n  // Brand ad placement operations\n  getBrandAdPlacements(promotionId: string): Promise<BrandAdPlacement[]>;\n  createBrandAdPlacement(placement: InsertBrandAdPlacement): Promise<BrandAdPlacement>;\n  getActiveBrandAdsByPlacement(placementType: string, videoId?: string, subjectId?: string, batchId?: string): Promise<BrandPromotion[]>;\n\n  // Brand promotion analytics operations\n  trackBrandPromotionView(analytics: InsertBrandPromotionAnalytics): Promise<void>;\n  getBrandPromotionAnalytics(promotionId: string, startDate?: Date, endDate?: Date): Promise<BrandPromotionAnalytics[]>;\n\n  // Banner ad settings operations\n  getBannerAdSettings(): Promise<BannerAdSettings | undefined>;\n  updateBannerAdSettings(settings: Partial<InsertBannerAdSettings>): Promise<BannerAdSettings>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Email whitelist operations\n  async isEmailWhitelisted(email: string): Promise<boolean> {\n    const [result] = await db\n      .select()\n      .from(whitelistedEmails)\n      .where(eq(whitelistedEmails.email, email));\n    return !!result;\n  }\n\n  async getWhitelistedEmails(): Promise<WhitelistedEmail[]> {\n    return await db.select().from(whitelistedEmails);\n  }\n\n  async addWhitelistedEmail(emailData: InsertWhitelistedEmail): Promise<WhitelistedEmail> {\n    const [email] = await db\n      .insert(whitelistedEmails)\n      .values(emailData)\n      .returning();\n    return email;\n  }\n\n  async removeWhitelistedEmail(email: string): Promise<void> {\n    await db.delete(whitelistedEmails).where(eq(whitelistedEmails.email, email));\n  }\n\n  // Batch operations\n  async getBatches(): Promise<Batch[]> {\n    return await db.select().from(batches).where(eq(batches.isActive, true));\n  }\n\n  async getBatch(id: string): Promise<Batch | undefined> {\n    const [batch] = await db.select().from(batches).where(eq(batches.id, id));\n    return batch;\n  }\n\n  async createBatch(batchData: InsertBatch): Promise<Batch> {\n    const [batch] = await db.insert(batches).values(batchData).returning();\n    return batch;\n  }\n\n  async updateBatch(id: string, batchData: Partial<InsertBatch>): Promise<Batch> {\n    const [batch] = await db\n      .update(batches)\n      .set({ ...batchData, updatedAt: new Date() })\n      .where(eq(batches.id, id))\n      .returning();\n    return batch;\n  }\n\n  async deleteBatch(id: string): Promise<void> {\n    await db.update(batches)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(batches.id, id));\n  }\n\n  // Course operations\n  async getCoursesByBatch(batchId: string): Promise<Course[]> {\n    return await db\n      .select()\n      .from(courses)\n      .where(eq(courses.batchId, batchId))\n      .orderBy(courses.orderIndex);\n  }\n\n  async getCourse(id: string): Promise<Course | undefined> {\n    const [course] = await db.select().from(courses).where(eq(courses.id, id));\n    return course;\n  }\n\n  async createCourse(courseData: InsertCourse): Promise<Course> {\n    const [course] = await db.insert(courses).values(courseData).returning();\n    return course;\n  }\n\n  async updateCourse(id: string, courseData: Partial<InsertCourse>): Promise<Course> {\n    const [course] = await db\n      .update(courses)\n      .set({ ...courseData, updatedAt: new Date() })\n      .where(eq(courses.id, id))\n      .returning();\n    return course;\n  }\n\n  async deleteCourse(id: string): Promise<void> {\n    await db.update(courses)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(courses.id, id));\n  }\n\n  // Subject operations\n  async getSubjectsByCourse(courseId: string): Promise<(Subject & { videoCount: number })[]> {\n    const subjectsWithCount = await db\n      .select({\n        id: subjects.id,\n        name: subjects.name,\n        description: subjects.description,\n        batchId: subjects.batchId,\n        courseId: subjects.courseId,\n        orderIndex: subjects.orderIndex,\n        icon: subjects.icon,\n        color: subjects.color,\n        createdAt: subjects.createdAt,\n        updatedAt: subjects.updatedAt,\n        videoCount: sql<number>`COALESCE(COUNT(${videos.id}), 0)`.as('videoCount')\n      })\n      .from(subjects)\n      .leftJoin(videos, and(eq(videos.subjectId, subjects.id), eq(videos.isActive, true)))\n      .where(eq(subjects.courseId, courseId))\n      .groupBy(subjects.id)\n      .orderBy(subjects.orderIndex);\n    \n    return subjectsWithCount;\n  }\n  \n  async getSubjectsByBatch(batchId: string): Promise<(Subject & { videoCount: number })[]> {\n    const subjectsWithCount = await db\n      .select({\n        id: subjects.id,\n        name: subjects.name,\n        description: subjects.description,\n        batchId: subjects.batchId,\n        courseId: subjects.courseId,\n        orderIndex: subjects.orderIndex,\n        icon: subjects.icon,\n        color: subjects.color,\n        createdAt: subjects.createdAt,\n        updatedAt: subjects.updatedAt,\n        videoCount: sql<number>`COALESCE(COUNT(${videos.id}), 0)`.as('videoCount')\n      })\n      .from(subjects)\n      .leftJoin(videos, and(eq(videos.subjectId, subjects.id), eq(videos.isActive, true)))\n      .where(and(eq(subjects.batchId, batchId), isNull(subjects.courseId)))\n      .groupBy(subjects.id)\n      .orderBy(subjects.orderIndex);\n    \n    return subjectsWithCount;\n  }\n\n  async getSubject(id: string): Promise<Subject | undefined> {\n    const [subject] = await db.select().from(subjects).where(eq(subjects.id, id));\n    return subject;\n  }\n\n  async createSubject(subjectData: InsertSubject): Promise<Subject> {\n    const [subject] = await db.insert(subjects).values(subjectData).returning();\n    return subject;\n  }\n\n  async updateSubject(id: string, subjectData: Partial<InsertSubject>): Promise<Subject> {\n    const [subject] = await db\n      .update(subjects)\n      .set({ ...subjectData, updatedAt: new Date() })\n      .where(eq(subjects.id, id))\n      .returning();\n    return subject;\n  }\n\n  async deleteSubject(id: string): Promise<void> {\n    await db.delete(subjects).where(eq(subjects.id, id));\n  }\n\n  // Video operations\n  async getVideosBySubject(subjectId: string): Promise<Video[]> {\n    return await db\n      .select()\n      .from(videos)\n      .where(and(eq(videos.subjectId, subjectId), eq(videos.isActive, true)))\n      .orderBy(videos.orderIndex);\n  }\n\n  async getVideo(id: string): Promise<Video | undefined> {\n    const [video] = await db.select().from(videos).where(eq(videos.id, id));\n    return video;\n  }\n\n  async createVideo(videoData: InsertVideo): Promise<Video> {\n    const [video] = await db.insert(videos).values(videoData).returning();\n    return video;\n  }\n\n  async updateVideo(id: string, videoData: Partial<InsertVideo>): Promise<Video> {\n    const [video] = await db\n      .update(videos)\n      .set({ ...videoData, updatedAt: new Date() })\n      .where(eq(videos.id, id))\n      .returning();\n    return video;\n  }\n\n  async deleteVideo(id: string): Promise<void> {\n    await db.update(videos)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(videos.id, id));\n  }\n\n  // Multi-platform video operations\n  async getMultiPlatformVideosBySubject(subjectId: string): Promise<MultiPlatformVideo[]> {\n    return await db\n      .select()\n      .from(multiPlatformVideos)\n      .where(and(eq(multiPlatformVideos.subjectId, subjectId), eq(multiPlatformVideos.isActive, true)))\n      .orderBy(multiPlatformVideos.orderIndex);\n  }\n\n  async getMultiPlatformVideo(id: string): Promise<MultiPlatformVideo | undefined> {\n    const [video] = await db.select().from(multiPlatformVideos).where(eq(multiPlatformVideos.id, id));\n    return video;\n  }\n\n  async createMultiPlatformVideo(videoData: InsertMultiPlatformVideo): Promise<MultiPlatformVideo> {\n    const [video] = await db.insert(multiPlatformVideos).values(videoData).returning();\n    return video;\n  }\n\n  async updateMultiPlatformVideo(id: string, videoData: Partial<InsertMultiPlatformVideo>): Promise<MultiPlatformVideo> {\n    const [video] = await db\n      .update(multiPlatformVideos)\n      .set({ ...videoData, updatedAt: new Date() })\n      .where(eq(multiPlatformVideos.id, id))\n      .returning();\n    return video;\n  }\n\n  async deleteMultiPlatformVideo(id: string): Promise<void> {\n    await db.update(multiPlatformVideos)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(multiPlatformVideos.id, id));\n  }\n\n  // User progress operations\n  async getUserProgress(userId: string, videoId: string): Promise<UserProgress | undefined> {\n    const [progress] = await db\n      .select()\n      .from(userProgress)\n      .where(and(eq(userProgress.userId, userId), eq(userProgress.videoId, videoId)));\n    return progress;\n  }\n\n  async updateUserProgress(progressData: InsertUserProgress): Promise<UserProgress> {\n    const [progress] = await db\n      .insert(userProgress)\n      .values(progressData)\n      .onConflictDoUpdate({\n        target: [userProgress.userId, userProgress.videoId],\n        set: {\n          ...progressData,\n          lastWatchedAt: new Date(),\n        },\n      })\n      .returning();\n    return progress;\n  }\n\n  async getUserProgressBySubject(userId: string, subjectId: string): Promise<UserProgress[]> {\n    const result = await db\n      .select({\n        id: userProgress.id,\n        userId: userProgress.userId,\n        videoId: userProgress.videoId,\n        completed: userProgress.completed,\n        watchTimeSeconds: userProgress.watchTimeSeconds,\n        lastWatchedAt: userProgress.lastWatchedAt,\n      })\n      .from(userProgress)\n      .innerJoin(videos, eq(userProgress.videoId, videos.id))\n      .where(and(eq(userProgress.userId, userId), eq(videos.subjectId, subjectId)));\n    \n    return result;\n  }\n\n  // Ad settings operations\n  async getAdSettings(): Promise<AdSettings> {\n    const [settings] = await db.select().from(adSettings);\n    if (!settings) {\n      // Create default settings if none exist\n      const [newSettings] = await db\n        .insert(adSettings)\n        .values({\n          rewardedAdsEnabled: true,\n          bannerAdsEnabled: true,\n          interstitialAdsEnabled: false,\n        })\n        .returning();\n      return newSettings;\n    }\n    return settings;\n  }\n\n  async updateAdSettings(settingsData: Partial<AdSettings>): Promise<AdSettings> {\n    const existing = await this.getAdSettings();\n    const [settings] = await db\n      .update(adSettings)\n      .set({ ...settingsData, updatedAt: new Date() })\n      .where(eq(adSettings.id, existing.id))\n      .returning();\n    return settings;\n  }\n\n  // Brand promotion operations\n  async getBrandPromotions(): Promise<BrandPromotion[]> {\n    return await db.select().from(brandPromotions).orderBy(desc(brandPromotions.createdAt));\n  }\n\n  async getBrandPromotion(id: string): Promise<BrandPromotion | undefined> {\n    const [promotion] = await db.select().from(brandPromotions).where(eq(brandPromotions.id, id));\n    return promotion;\n  }\n\n  async createBrandPromotion(promotionData: InsertBrandPromotion): Promise<BrandPromotion> {\n    const [promotion] = await db.insert(brandPromotions).values(promotionData).returning();\n    return promotion;\n  }\n\n  async updateBrandPromotion(id: string, promotionData: Partial<InsertBrandPromotion>): Promise<BrandPromotion> {\n    const [promotion] = await db\n      .update(brandPromotions)\n      .set({ ...promotionData, updatedAt: new Date() })\n      .where(eq(brandPromotions.id, id))\n      .returning();\n    return promotion;\n  }\n\n  async deleteBrandPromotion(id: string): Promise<void> {\n    await db.delete(brandPromotions).where(eq(brandPromotions.id, id));\n  }\n\n  async getActiveBrandPromotions(): Promise<BrandPromotion[]> {\n    return await db\n      .select()\n      .from(brandPromotions)\n      .where(and(eq(brandPromotions.isActive, true), eq(brandPromotions.isApproved, true)))\n      .orderBy(desc(brandPromotions.priority), desc(brandPromotions.createdAt));\n  }\n\n  async updateBrandPromotionStats(id: string, impressions: number, clicks: number): Promise<void> {\n    await db\n      .update(brandPromotions)\n      .set({ impressions, clicks, updatedAt: new Date() })\n      .where(eq(brandPromotions.id, id));\n  }\n\n  // Brand ad placement operations\n  async getBrandAdPlacements(promotionId: string): Promise<BrandAdPlacement[]> {\n    return await db\n      .select()\n      .from(brandAdPlacements)\n      .where(eq(brandAdPlacements.promotionId, promotionId));\n  }\n\n  async createBrandAdPlacement(placementData: InsertBrandAdPlacement): Promise<BrandAdPlacement> {\n    const [placement] = await db.insert(brandAdPlacements).values(placementData).returning();\n    return placement;\n  }\n\n  async getActiveBrandAdsByPlacement(\n    placementType: string,\n    videoId?: string,\n    subjectId?: string,\n    batchId?: string\n  ): Promise<BrandPromotion[]> {\n    // This is a complex query that finds active brand promotions based on placement criteria\n    // For now, we'll return all active promotions and filter in the application layer\n    return await this.getActiveBrandPromotions();\n  }\n\n  // Brand promotion analytics operations\n  async trackBrandPromotionView(analyticsData: InsertBrandPromotionAnalytics): Promise<void> {\n    await db.insert(brandPromotionAnalytics).values(analyticsData);\n  }\n\n  async getBrandPromotionAnalytics(\n    promotionId: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<BrandPromotionAnalytics[]> {\n    let query = db\n      .select()\n      .from(brandPromotionAnalytics)\n      .where(eq(brandPromotionAnalytics.promotionId, promotionId));\n\n    // Note: Date range filtering would be implemented here when needed\n\n    return await query.orderBy(desc(brandPromotionAnalytics.timestamp));\n  }\n\n  // Banner ad settings operations\n  async getBannerAdSettings(): Promise<BannerAdSettings | undefined> {\n    const [settings] = await db.select().from(bannerAdSettings).limit(1);\n    return settings;\n  }\n\n  async updateBannerAdSettings(settingsData: Partial<InsertBannerAdSettings>): Promise<BannerAdSettings> {\n    // Check if settings exist\n    const existing = await this.getBannerAdSettings();\n    \n    if (existing) {\n      // Update existing settings\n      const [updated] = await db\n        .update(bannerAdSettings)\n        .set({ ...settingsData, updatedAt: new Date() })\n        .where(eq(bannerAdSettings.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new settings\n      const [created] = await db\n        .insert(bannerAdSettings)\n        .values(settingsData as InsertBannerAdSettings)\n        .returning();\n      return created;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":19167},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Whitelisted emails for access control\nexport const whitelistedEmails = pgTable(\"whitelisted_emails\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Batches (e.g., \"Batch 2025\", \"Advanced Batch\")\nexport const batches = pgTable(\"batches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  thumbnailUrl: varchar(\"thumbnail_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Courses within batches (e.g., \"JEE Main\", \"NEET Preparation\")\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  batchId: varchar(\"batch_id\").notNull().references(() => batches.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  thumbnailUrl: varchar(\"thumbnail_url\"),\n  orderIndex: integer(\"order_index\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Subjects within courses (e.g., \"Mathematics\", \"Physics\")\nexport const subjects = pgTable(\"subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  batchId: varchar(\"batch_id\").notNull().references(() => batches.id, { onDelete: \"cascade\" }),\n  courseId: varchar(\"course_id\").references(() => courses.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  icon: varchar(\"icon\").default(\"fas fa-book\"),\n  color: varchar(\"color\").default(\"blue\"),\n  orderIndex: integer(\"order_index\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Videos within subjects\n// YouTube videos table (keep existing)\nexport const videos = pgTable(\"videos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id, { onDelete: \"cascade\" }),\n  courseId: varchar(\"course_id\").references(() => courses.id, { onDelete: \"cascade\" }),\n  batchId: varchar(\"batch_id\").notNull().references(() => batches.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  youtubeVideoId: varchar(\"youtube_video_id\").notNull(),\n  duration: integer(\"duration_seconds\"),\n  orderIndex: integer(\"order_index\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Multi-platform videos table (new)\nexport const multiPlatformVideos = pgTable(\"multi_platform_videos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id, { onDelete: \"cascade\" }),\n  courseId: varchar(\"course_id\").references(() => courses.id, { onDelete: \"cascade\" }),\n  batchId: varchar(\"batch_id\").notNull().references(() => batches.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  platform: varchar(\"platform\", { length: 50 }).notNull(), // vimeo, facebook, dailymotion, twitch, peertube, rumble\n  videoUrl: varchar(\"video_url\").notNull(), // original URL\n  videoId: varchar(\"video_id\").notNull(), // extracted video ID for embedding\n  thumbnail: varchar(\"thumbnail\"), // thumbnail URL\n  duration: integer(\"duration_seconds\"),\n  orderIndex: integer(\"order_index\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User progress tracking\nexport const userProgress = pgTable(\"user_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  videoId: varchar(\"video_id\").notNull().references(() => videos.id, { onDelete: \"cascade\" }),\n  completed: boolean(\"completed\").default(false),\n  watchTimeSeconds: integer(\"watch_time_seconds\").default(0),\n  lastWatchedAt: timestamp(\"last_watched_at\").defaultNow(),\n});\n\n// Ad settings for admin control\nexport const adSettings = pgTable(\"ad_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  rewardedAdsEnabled: boolean(\"rewarded_ads_enabled\").default(true),\n  bannerAdsEnabled: boolean(\"banner_ads_enabled\").default(true),\n  interstitialAdsEnabled: boolean(\"interstitial_ads_enabled\").default(false),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Brand promotions table for custom brand video ads\nexport const brandPromotions = pgTable(\"brand_promotions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  brandName: varchar(\"brand_name\").notNull(),\n  brandLogo: varchar(\"brand_logo\"), // URL to brand logo\n  contactEmail: varchar(\"contact_email\").notNull(),\n  contactPhone: varchar(\"contact_phone\"),\n  productName: varchar(\"product_name\").notNull(),\n  productDescription: text(\"product_description\"),\n  targetAudience: varchar(\"target_audience\"), // e.g., \"Students\", \"Professionals\", \"All\"\n  campaignBudget: integer(\"campaign_budget\"), // in rupees\n  campaignDuration: integer(\"campaign_duration_days\").default(30),\n  videoUrl: varchar(\"video_url\"), // Brand's promotional video URL\n  websiteUrl: varchar(\"website_url\"), // Brand's website\n  callToAction: varchar(\"call_to_action\").default(\"Learn More\"), // \"Buy Now\", \"Visit Website\", etc.\n  isActive: boolean(\"is_active\").default(false),\n  isApproved: boolean(\"is_approved\").default(false),\n  priority: integer(\"priority\").default(1), // 1-5, higher = more priority\n  impressions: integer(\"impressions\").default(0), // Track views\n  clicks: integer(\"clicks\").default(0), // Track clicks\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Brand ad placements - where to show brand ads\nexport const brandAdPlacements = pgTable(\"brand_ad_placements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  promotionId: varchar(\"promotion_id\").notNull().references(() => brandPromotions.id, { onDelete: \"cascade\" }),\n  placementType: varchar(\"placement_type\").notNull(), // \"pre-roll\", \"mid-roll\", \"post-roll\", \"banner\", \"overlay\"\n  targetVideos: text(\"target_videos\").array(), // Array of video IDs where this ad should show\n  targetSubjects: text(\"target_subjects\").array(), // Array of subject IDs\n  targetBatches: text(\"target_batches\").array(), // Array of batch IDs\n  showFrequency: integer(\"show_frequency\").default(3), // Show every X videos\n  maxDailyShows: integer(\"max_daily_shows\").default(50), // Maximum shows per day\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Brand promotion analytics\nexport const brandPromotionAnalytics = pgTable(\"brand_promotion_analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  promotionId: varchar(\"promotion_id\").notNull().references(() => brandPromotions.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"set null\" }),\n  videoId: varchar(\"video_id\").references(() => videos.id, { onDelete: \"set null\" }),\n  actionType: varchar(\"action_type\").notNull(), // \"view\", \"click\", \"skip\", \"complete\"\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  deviceType: varchar(\"device_type\"), // \"mobile\", \"desktop\", \"tablet\"\n  userAgent: text(\"user_agent\"),\n});\n\n// Relations\nexport const batchesRelations = relations(batches, ({ many }) => ({\n  courses: many(courses),\n  subjects: many(subjects),\n}));\n\nexport const coursesRelations = relations(courses, ({ one, many }) => ({\n  batch: one(batches, {\n    fields: [courses.batchId],\n    references: [batches.id],\n  }),\n  subjects: many(subjects),\n}));\n\nexport const subjectsRelations = relations(subjects, ({ one, many }) => ({\n  batch: one(batches, {\n    fields: [subjects.batchId],\n    references: [batches.id],\n  }),\n  course: one(courses, {\n    fields: [subjects.courseId],\n    references: [courses.id],\n  }),\n  videos: many(videos),\n  multiPlatformVideos: many(multiPlatformVideos),\n}));\n\nexport const videosRelations = relations(videos, ({ one, many }) => ({\n  subject: one(subjects, {\n    fields: [videos.subjectId],\n    references: [subjects.id],\n  }),\n  userProgress: many(userProgress),\n}));\n\nexport const multiPlatformVideosRelations = relations(multiPlatformVideos, ({ one }) => ({\n  subject: one(subjects, {\n    fields: [multiPlatformVideos.subjectId],\n    references: [subjects.id],\n  }),\n}));\n\nexport const userProgressRelations = relations(userProgress, ({ one }) => ({\n  user: one(users, {\n    fields: [userProgress.userId],\n    references: [users.id],\n  }),\n  video: one(videos, {\n    fields: [userProgress.videoId],\n    references: [videos.id],\n  }),\n}));\n\nexport const brandPromotionsRelations = relations(brandPromotions, ({ many }) => ({\n  placements: many(brandAdPlacements),\n  analytics: many(brandPromotionAnalytics),\n}));\n\nexport const brandAdPlacementsRelations = relations(brandAdPlacements, ({ one }) => ({\n  promotion: one(brandPromotions, {\n    fields: [brandAdPlacements.promotionId],\n    references: [brandPromotions.id],\n  }),\n}));\n\nexport const brandPromotionAnalyticsRelations = relations(brandPromotionAnalytics, ({ one }) => ({\n  promotion: one(brandPromotions, {\n    fields: [brandPromotionAnalytics.promotionId],\n    references: [brandPromotions.id],\n  }),\n  user: one(users, {\n    fields: [brandPromotionAnalytics.userId],\n    references: [users.id],\n  }),\n  video: one(videos, {\n    fields: [brandPromotionAnalytics.videoId],\n    references: [videos.id],\n  }),\n}));\n\nexport const bannerAdSettings = pgTable(\"banner_ad_settings\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  enabled: boolean(\"enabled\").default(true),\n  globalEnabled: boolean(\"global_enabled\").default(true),\n  homePageEnabled: boolean(\"home_page_enabled\").default(true),\n  videoPageEnabled: boolean(\"video_page_enabled\").default(true),\n  subjectPageEnabled: boolean(\"subject_page_enabled\").default(true),\n  mobileEnabled: boolean(\"mobile_enabled\").default(true),\n  placement: text(\"placement\").default(\"bottom\"), // bottom, top, floating\n  dismissible: boolean(\"dismissible\").default(true),\n  showCloseButton: boolean(\"show_close_button\").default(true),\n  minimizable: boolean(\"minimizable\").default(true),\n  autoHide: boolean(\"auto_hide\").default(false),\n  autoHideDelay: integer(\"auto_hide_delay\").default(30), // seconds\n  maxImpressions: integer(\"max_impressions\").default(1000),\n  adNetwork: text(\"ad_network\").default(\"mixed\"), // adsense, adsterra, brand-promotions, mixed\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").default(sql`now()`),\n});\n\n// Schemas for validation\nexport const insertBatchSchema = createInsertSchema(batches).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSubjectSchema = createInsertSchema(subjects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertVideoSchema = createInsertSchema(videos).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMultiPlatformVideoSchema = createInsertSchema(multiPlatformVideos).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWhitelistedEmailSchema = createInsertSchema(whitelistedEmails).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({\n  id: true,\n});\n\nexport const insertBrandPromotionSchema = createInsertSchema(brandPromotions).omit({\n  id: true,\n  impressions: true,\n  clicks: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBrandAdPlacementSchema = createInsertSchema(brandAdPlacements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBrandPromotionAnalyticsSchema = createInsertSchema(brandPromotionAnalytics).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertAdSettingsSchema = createInsertSchema(adSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBannerAdSettingsSchema = createInsertSchema(bannerAdSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Batch = typeof batches.$inferSelect;\nexport type Course = typeof courses.$inferSelect;\nexport type Subject = typeof subjects.$inferSelect;\nexport type Video = typeof videos.$inferSelect;\nexport type MultiPlatformVideo = typeof multiPlatformVideos.$inferSelect;\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type AdSettings = typeof adSettings.$inferSelect;\nexport type WhitelistedEmail = typeof whitelistedEmails.$inferSelect;\nexport type BrandPromotion = typeof brandPromotions.$inferSelect;\nexport type BrandAdPlacement = typeof brandAdPlacements.$inferSelect;\nexport type BrandPromotionAnalytics = typeof brandPromotionAnalytics.$inferSelect;\nexport type BannerAdSettings = typeof bannerAdSettings.$inferSelect;\n\nexport type InsertBatch = z.infer<typeof insertBatchSchema>;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type InsertSubject = z.infer<typeof insertSubjectSchema>;\nexport type InsertVideo = z.infer<typeof insertVideoSchema>;\nexport type InsertMultiPlatformVideo = z.infer<typeof insertMultiPlatformVideoSchema>;\nexport type InsertWhitelistedEmail = z.infer<typeof insertWhitelistedEmailSchema>;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type InsertBrandPromotion = z.infer<typeof insertBrandPromotionSchema>;\nexport type InsertBrandAdPlacement = z.infer<typeof insertBrandAdPlacementSchema>;\nexport type InsertBrandPromotionAnalytics = z.infer<typeof insertBrandPromotionAnalyticsSchema>;\nexport type InsertAdSettings = z.infer<typeof insertAdSettingsSchema>;\nexport type InsertBannerAdSettings = z.infer<typeof insertBannerAdSettingsSchema>;\n","size_bytes":15556},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ResponsiveBannerAd } from \"@/components/responsive-banner-ad\";\nimport { MobileResponsiveAd } from \"@/components/mobile-responsive-ad\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport BatchSubjects from \"@/pages/batch-subjects\";\nimport SubjectVideos from \"@/pages/subject-videos\";\nimport VideoPlayer from \"@/pages/video-player\";\nimport MultiVideoViewer from \"@/pages/multi-video-viewer\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/batch/:batchId\" component={BatchSubjects} />\n          <Route path=\"/batch/:batchId/course/:courseId\" component={BatchSubjects} />\n          <Route path=\"/batch/:batchId/subject/:subjectId\" component={SubjectVideos} />\n          <Route path=\"/batch/:batchId/course/:courseId/subject/:subjectId\" component={SubjectVideos} />\n          <Route path=\"/video/:videoId\" component={VideoPlayer} />\n          <Route path=\"/multi-video/:videoId\" component={MultiVideoViewer} />\n          <Route path=\"/admin\" component={AdminDashboard} />\n          <Route path=\"/admin-dashboard\" component={AdminDashboard} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const { isAuthenticated } = useAuth();\n\n  return (\n    <div className=\"min-h-screen pb-16\"> {/* Add padding bottom for banner ad */}\n      <Toaster />\n      <Router />\n      \n      {/* Show banner ads only on main website pages (not admin) */}\n      {isAuthenticated && !window.location.pathname.startsWith('/admin') && (\n        <>\n          <ResponsiveBannerAd placement=\"global-bottom\" pageType=\"global\" />\n          <MobileResponsiveAd placement=\"global-mobile\" pageType=\"global\" position=\"bottom\" />\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AppContent />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2559},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(355, 7%, 97%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* YouTube embed customization to hide branding elements and block redirects */\n.video-embed-container {\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n}\n\n.youtube-embed-iframe {\n  pointer-events: auto;\n  border-radius: 8px;\n}\n\n/* Create a protective overlay to block unwanted clicks */\n.video-embed-container .redirect-blocker {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 20;\n  pointer-events: none;\n  background: transparent;\n}\n\n/* Block specific areas where YouTube branding/links appear */\n.video-embed-container .redirect-blocker::before {\n  content: \"\";\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 140px;\n  height: 50px;\n  background: transparent;\n  pointer-events: all;\n  z-index: 25;\n}\n\n.video-embed-container .redirect-blocker::after {\n  content: \"\";\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  width: 120px;\n  height: 50px;\n  background: transparent;\n  pointer-events: all;\n  z-index: 25;\n}\n\n/* Hide the \"Watch on YouTube\" button in bottom left corner */\n.video-embed-container::after {\n  content: \"\";\n  position: absolute;\n  bottom: 6px;\n  left: 6px;\n  width: 140px;\n  height: 36px;\n  background: rgba(0, 0, 0, 0.85);\n  z-index: 15;\n  pointer-events: none;\n  border-radius: 6px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n}\n\n/* Hide YouTube logo and controls in bottom right corner */\n.video-embed-container::before {\n  content: \"\";\n  position: absolute;\n  bottom: 6px;\n  right: 6px;\n  width: 120px;\n  height: 36px;\n  background: rgba(0, 0, 0, 0.85);\n  z-index: 15;\n  pointer-events: none;\n  border-radius: 6px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n}\n\n/* Additional strategic overlays to hide YouTube branding */\n.video-embed-container .youtube-brand-overlay-1 {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  width: 100px;\n  height: 30px;\n  background: rgba(0, 0, 0, 0.8);\n  z-index: 15;\n  pointer-events: none;\n  border-radius: 4px;\n}\n\n.video-embed-container .youtube-brand-overlay-2 {\n  position: absolute;\n  top: 50%;\n  right: 8px;\n  width: 80px;\n  height: 25px;\n  background: rgba(0, 0, 0, 0.8);\n  z-index: 15;\n  pointer-events: none;\n  border-radius: 4px;\n  transform: translateY(-50%);\n}\n\n/* Hide elements gracefully when video is being interacted with */\n.video-embed-container:hover::after,\n.video-embed-container:hover::before,\n.video-embed-container:hover .youtube-brand-overlay-1,\n.video-embed-container:hover .youtube-brand-overlay-2 {\n  opacity: 0.7;\n  transition: opacity 0.3s ease;\n}\n\n/* Fade out overlays when user clicks to play */\n.video-embed-container.playing::after,\n.video-embed-container.playing::before,\n.video-embed-container.playing .youtube-brand-overlay-1,\n.video-embed-container.playing .youtube-brand-overlay-2 {\n  opacity: 0;\n  transition: opacity 0.5s ease;\n}\n\n/* Additional overlay to cover YouTube's control bar branding */\n.video-embed-container .youtube-controls-overlay {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  height: 50px;\n  background: linear-gradient(to top, rgba(0,0,0,0.9) 0%, rgba(0,0,0,0.3) 70%, transparent 100%);\n  z-index: 10;\n  pointer-events: none;\n  border-radius: 0 0 8px 8px;\n}\n\n/* When user hovers, reduce overlay intensity for better usability */\n.video-embed-container:hover .youtube-controls-overlay {\n  opacity: 0.3;\n  transition: opacity 0.3s ease;\n}\n\n/* Completely hide overlays when playing for better viewing experience */\n.video-embed-container.playing .youtube-controls-overlay {\n  opacity: 0;\n  transition: opacity 0.5s ease 2s; /* Delay to allow user to see controls first */\n}\n\n/* Secure video embed styles */\n.secure-video-container {\n  position: relative;\n  overflow: hidden;\n  border-radius: 8px;\n  user-select: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n}\n\n.secure-youtube-iframe {\n  pointer-events: auto;\n  border-radius: 8px;\n}\n\n/* YouTube logo blocking area hover effects */\n.youtube-logo-blocker {\n  position: relative;\n  overflow: hidden;\n  z-index: 101 !important;\n}\n\n.youtube-logo-blocker::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n  transition: left 0.5s ease;\n  z-index: 52;\n}\n\n.youtube-logo-blocker:hover::before {\n  left: 100%;\n}\n\n.youtube-logo-blocker:hover {\n  background: rgba(64, 64, 64, 0.9) !important;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);\n  transform: scale(1.02);\n}\n\n.youtube-logo-blocker:active {\n  transform: scale(0.98);\n  background: rgba(32, 32, 32, 0.95) !important;\n}\n\n/* Disable text selection and context menu on secure videos */\n.secure-video-container * {\n  user-select: none !important;\n  -webkit-user-select: none !important;\n  -moz-user-select: none !important;\n  -ms-user-select: none !important;\n}\n\n/* Additional security for iframe content */\n.secure-video-container iframe {\n  border: none;\n  outline: none;\n}\n\n/* Security indicators */\n.secure-video-container::after {\n  content: \"🔒\";\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  font-size: 12px;\n  color: rgba(255, 255, 255, 0.7);\n  z-index: 30;\n  pointer-events: none;\n}\n\n/* Block the copy link context menu area - positioned at top right where it actually appears */\n.secure-video-container .copy-link-blocker {\n  position: absolute;\n  top: 120px;\n  right: 8px;\n  width: 220px;\n  height: 80px;\n  background: rgba(0, 0, 0, 0.98);\n  z-index: 999;\n  pointer-events: all;\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 13px;\n  color: rgba(255, 255, 255, 0.8);\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  backdrop-filter: blur(8px);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);\n}\n\n/* Additional comprehensive overlay to block all right-side interactions */\n.secure-video-container .right-side-blocker {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 250px;\n  height: 100%;\n  background: transparent;\n  z-index: 40;\n  pointer-events: all;\n}\n\n/* Block the entire top area where context menus and notifications appear */\n.secure-video-container .top-area-blocker {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 100%;\n  height: 200px;\n  background: transparent;\n  z-index: 900;\n  pointer-events: all;\n}\n\n/* Specific overlay to cover the exact location where \"Link copied\" appears */\n.secure-video-container .notification-blocker {\n  position: absolute;\n  top: 100px;\n  right: 50px;\n  width: 250px;\n  height: 100px;\n  background: rgba(0, 0, 0, 0.95);\n  z-index: 1000;\n  pointer-events: all;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 14px;\n  color: rgba(255, 255, 255, 0.9);\n  font-weight: 500;\n}\n\n/* Block the entire right edge where context menus appear */\n.secure-video-container .edge-protection {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 100px;\n  height: 100%;\n  background: transparent;\n  z-index: 40;\n  pointer-events: all;\n}\n","size_bytes":8623},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/batch-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowRight } from \"lucide-react\";\nimport type { Batch } from \"@shared/schema\";\n\ninterface BatchCardProps {\n  batch: Batch;\n}\n\nexport default function BatchCard({ batch }: BatchCardProps) {\n  // Use a professional educational image from Unsplash\n  const imageUrl = \"https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&h=200\";\n\n  return (\n    <Card className=\"shadow-sm hover:shadow-md transition-shadow duration-200 overflow-hidden cursor-pointer border hover:border-primary\">\n      <img \n        src={imageUrl} \n        alt={batch.name}\n        className=\"w-full h-48 object-cover\"\n      />\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{batch.name}</h3>\n        {batch.description && (\n          <p className=\"text-gray-600 text-sm mb-4\">{batch.description}</p>\n        )}\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm text-gray-500\">\n            Created {new Date(batch.createdAt!).toLocaleDateString()}\n          </span>\n          <div className=\"flex items-center text-secondary text-sm\">\n            <span>View</span>\n            <ArrowRight className=\"ml-2 h-4 w-4\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1419},"client/src/components/secure-video-embed.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle, Shield, ChevronUp, ChevronDown } from \"lucide-react\";\nimport YouTubeProtectionOverlay from \"./youtube-protection-overlay\";\nimport VideoProtectionSystem from \"./video-protection-system\";\nimport VideoSeekControls, { useVideoSeekControls } from \"./video-seek-controls\";\nimport PauseOverlayAd from \"./ads/pause-overlay-ad\";\nimport { AdConfig } from \"./ads/ad-manager\";\n\ninterface SecureVideoEmbedProps {\n  videoId: string;\n  title: string;\n  onProgress?: (watchTime: number, completed?: boolean) => void;\n  adConfigs?: AdConfig[];\n}\n\n// Extract YouTube video ID from various URL formats\nfunction extractVideoId(url: string): string {\n  if (url.length === 11 && /^[a-zA-Z0-9_-]{11}$/.test(url)) {\n    return url;\n  }\n  \n  const patterns = [\n    /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/|youtube\\.com\\/v\\/|youtube\\.com\\/shorts\\/)([a-zA-Z0-9_-]{11})/,\n    /(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/watch\\?.*v=([a-zA-Z0-9_-]{11})/\n  ];\n  \n  for (const pattern of patterns) {\n    const match = url.match(pattern);\n    if (match) {\n      return match[1];\n    }\n  }\n  \n  return url;\n}\n\nexport default function SecureVideoEmbed({ videoId: rawVideoId, title, onProgress, adConfigs = [] }: SecureVideoEmbedProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [showControls, setShowControls] = useState(false);\n  const [controlsManuallyOpened, setControlsManuallyOpened] = useState(false);\n  const [showPauseAd, setShowPauseAd] = useState(false);\n  const [videoPaused, setVideoPaused] = useState(false);\n  const progressRef = useRef<number>(0);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Video seeking controls\n  const seekControls = useVideoSeekControls(iframeRef);\n\n  const videoId = extractVideoId(rawVideoId);\n\n  // Maximum security YouTube embed URL\n  const embedUrl = `https://www.youtube-nocookie.com/embed/${videoId}?` + \n    `rel=0&modestbranding=1&showinfo=0&fs=0&cc_load_policy=0&iv_load_policy=3&` +\n    `autohide=1&controls=1&disablekb=1&enablejsapi=1&playsinline=1&` +\n    `origin=${encodeURIComponent(window.location.origin)}&` +\n    `widget_referrer=${encodeURIComponent(window.location.origin)}&` +\n    `loop=0&autoplay=0`;\n\n  useEffect(() => {\n    const handleMessage = (event: MessageEvent) => {\n      if (event.origin !== \"https://www.youtube-nocookie.com\" && event.origin !== \"https://www.youtube.com\") return;\n      \n      try {\n        const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\n        \n        if (data.event === \"video-ready\" || data.event === \"onReady\") {\n          setIsLoading(false);\n          setError(null);\n        } else if (data.event === \"onStateChange\") {\n          // 1 = playing, 2 = paused\n          if (data.info === 1) {\n            setIsPlaying(true);\n            setVideoPaused(false);\n            setShowPauseAd(false);\n            containerRef.current?.classList.add('playing');\n          } else if (data.info === 2) {\n            setIsPlaying(false);\n            setVideoPaused(true);\n            containerRef.current?.classList.remove('playing');\n          } else {\n            setIsPlaying(false);\n            setVideoPaused(false);\n            setShowPauseAd(false);\n            containerRef.current?.classList.remove('playing');\n          }\n        }\n      } catch (e) {\n        // Ignore parsing errors\n      }\n    };\n\n    window.addEventListener(\"message\", handleMessage);\n    \n    // Block right-click context menu on the container\n    const handleContextMenu = (e: MouseEvent) => {\n      e.preventDefault();\n      return false;\n    };\n\n    // Block keyboard shortcuts that might reveal YouTube branding\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Block common YouTube shortcuts and copy operations\n      if (e.key === 'Escape' || e.key === 'Tab' || \n          (e.ctrlKey && (e.key === 'u' || e.key === 'U' || e.key === 'c' || e.key === 'C')) ||\n          (e.metaKey && (e.key === 'u' || e.key === 'U' || e.key === 'c' || e.key === 'C')) ||\n          e.key === 'F12' || e.key === 'F11' ||\n          (e.ctrlKey && e.shiftKey && (e.key === 'I' || e.key === 'i'))) {\n        e.preventDefault();\n        return false;\n      }\n    };\n\n    const container = containerRef.current;\n    if (container) {\n      container.addEventListener('contextmenu', handleContextMenu);\n      container.addEventListener('keydown', handleKeyDown);\n    }\n\n    // Simulate progress tracking\n    intervalRef.current = setInterval(() => {\n      if (!isLoading && !error && onProgress && isPlaying) {\n        progressRef.current += 5;\n        onProgress(progressRef.current);\n      }\n    }, 5000);\n\n    return () => {\n      window.removeEventListener(\"message\", handleMessage);\n      if (container) {\n        container.removeEventListener('contextmenu', handleContextMenu);\n        container.removeEventListener('keydown', handleKeyDown);\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [videoId, isLoading, onProgress, error, isPlaying]);\n\n  // Auto-hide controls after inactivity when manually opened\n  useEffect(() => {\n    let timeout: NodeJS.Timeout;\n    \n    if (controlsManuallyOpened && showControls) {\n      timeout = setTimeout(() => {\n        setControlsManuallyOpened(false);\n        setShowControls(false);\n      }, 5000); // Hide after 5 seconds of inactivity\n    }\n    \n    return () => {\n      if (timeout) clearTimeout(timeout);\n    };\n  }, [controlsManuallyOpened, showControls]);\n\n  const handleLoad = () => {\n    setIsLoading(false);\n    setError(null);\n  };\n\n  const handleError = () => {\n    setIsLoading(false);\n    setError(\"Video could not be loaded. Please check if the YouTube video ID is correct and accessible.\");\n  };\n\n  // Block iframe navigation attempts\n  const handleIframeClick = (e: React.MouseEvent) => {\n    // Allow clicks in the center area for play/pause\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    // Block clicks in corners and edges where YouTube branding appears\n    if (\n      (x < 150 && y > rect.height - 60) || // Bottom left corner\n      (x > rect.width - 150 && y > rect.height - 60) || // Bottom right corner\n      (y < 50) || // Top area\n      (x > rect.width - 100 && y < rect.height / 2) // Right side\n    ) {\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    }\n  };\n\n  return (\n    <div \n      ref={containerRef}\n      className=\"relative bg-black secure-video-container rounded-lg overflow-hidden\" \n      style={{ paddingBottom: \"56.25%\", height: 0 }}\n      onContextMenu={(e) => e.preventDefault()}\n      onMouseEnter={() => !controlsManuallyOpened && setShowControls(true)}\n      onMouseLeave={() => !controlsManuallyOpened && setShowControls(false)}\n    >\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-black flex items-center justify-center z-10\">\n          <div className=\"text-center text-white\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\n            <p>Loading secure video content...</p>\n            <div className=\"flex items-center justify-center mt-2 text-sm text-gray-400\">\n              <Shield className=\"h-4 w-4 mr-1\" />\n              <span>Protected Content</span>\n            </div>\n          </div>\n        </div>\n      )}\n      {error ? (\n        <div className=\"absolute inset-0 bg-black flex items-center justify-center z-10\">\n          <Card className=\"bg-gray-900 border-gray-700 text-white max-w-md mx-4\">\n            <CardContent className=\"pt-6 text-center\">\n              <AlertCircle className=\"h-12 w-12 text-red-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Secure Video Loading Issue</h3>\n              <p className=\"text-gray-300 mb-4 text-sm\">{error}</p>\n              <div className=\"text-xs text-gray-400\">\n                <div className=\"flex items-center justify-center mb-2\">\n                  <Shield className=\"h-4 w-4 mr-1\" />\n                  <span>Content protection is active</span>\n                </div>\n                <p>This video is protected from external access</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      ) : (\n        <>\n          <iframe\n            ref={iframeRef}\n            src={embedUrl}\n            title={title}\n            className=\"absolute top-0 left-0 w-full h-full border-0 secure-youtube-iframe\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen={false}\n            onLoad={handleLoad}\n            onError={handleError}\n            loading=\"lazy\"\n            sandbox=\"allow-scripts allow-same-origin allow-presentation\"\n            onClick={handleIframeClick}\n          />\n          \n          {/* Comprehensive YouTube Protection System */}\n          <YouTubeProtectionOverlay containerRef={containerRef} />\n          \n          {/* Responsive visual patches to hide YouTube branding elements across all devices */}\n          \n          {/* Universal Video Protection System - Applied to ALL embeds */}\n          <VideoProtectionSystem />\n          \n          {/* Additional protection patches for secure video embed */}\n          <div className=\"absolute top-0 right-0 w-20 h-10 sm:w-24 sm:h-12 md:w-32 md:h-16 bg-black z-20 pointer-events-none\" />\n          <div className=\"absolute bottom-1 left-1 w-24 h-8 sm:bottom-2 sm:left-2 sm:w-28 md:w-36 sm:h-10 md:h-12 bg-black rounded z-20 pointer-events-none\" />\n\n          {/* Arrow button to toggle controls */}\n          {!isLoading && !error && (\n            <div className=\"absolute bottom-2 right-2 z-[1001]\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => {\n                  setControlsManuallyOpened(!controlsManuallyOpened);\n                  setShowControls(!showControls);\n                }}\n                className=\"bg-black/60 hover:bg-black/80 text-white p-1 h-8 w-8 rounded-full\"\n                title={showControls ? \"Hide Controls\" : \"Show Controls\"}\n              >\n                {showControls ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronUp className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n          )}\n\n          {/* Video seeking controls - appears when arrow button clicked or on hover */}\n          {showControls && !isLoading && !error && (\n            <div className=\"absolute bottom-0 left-0 right-0 z-[1000]\">\n              <VideoSeekControls\n                isPlaying={seekControls.isPlaying}\n                currentTime={seekControls.currentTime}\n                duration={seekControls.duration}\n                onSeek={seekControls.handleSeek}\n                onPlayPause={seekControls.handlePlayPause}\n                onSkipBackward={seekControls.handleSkipBackward}\n                onSkipForward={seekControls.handleSkipForward}\n                onQualityChange={seekControls.handleQualityChange}\n                className=\"animate-in slide-in-from-bottom-2 duration-300 rounded-none\"\n              />\n            </div>\n          )}\n\n          {/* Pause Overlay Ad */}\n          <PauseOverlayAd\n            isVisible={videoPaused && !isLoading && !error}\n            onClose={() => setShowPauseAd(false)}\n            onResume={() => {\n              setVideoPaused(false);\n              setShowPauseAd(false);\n              // Send resume command to YouTube iframe\n              if (iframeRef.current) {\n                const message = {\n                  event: 'command',\n                  func: 'playVideo',\n                  args: []\n                };\n                iframeRef.current.contentWindow?.postMessage(JSON.stringify(message), '*');\n              }\n            }}\n            adConfigs={adConfigs}\n          />\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":12340},"client/src/components/subject-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Calculator, \n  Atom, \n  FlaskConical, \n  Dna, \n  BookOpen, \n  Globe, \n  PenTool, \n  Music \n} from \"lucide-react\";\nimport type { Subject } from \"@shared/schema\";\n\ninterface SubjectCardProps {\n  subject: Subject & { videoCount?: number };\n}\n\nconst iconMap = {\n  \"fas fa-calculator\": Calculator,\n  \"fas fa-atom\": Atom,\n  \"fas fa-flask\": FlaskConical,\n  \"fas fa-dna\": Dna,\n  \"fas fa-book\": BookOpen,\n  \"fas fa-globe\": Globe,\n  \"fas fa-pen\": PenTool,\n  \"fas fa-music\": Music,\n};\n\nconst colorMap = {\n  blue: \"from-blue-500 to-blue-600\",\n  green: \"from-green-500 to-green-600\",\n  purple: \"from-purple-500 to-purple-600\",\n  red: \"from-red-500 to-red-600\",\n  yellow: \"from-yellow-500 to-yellow-600\",\n  indigo: \"from-indigo-500 to-indigo-600\",\n  pink: \"from-pink-500 to-pink-600\",\n  teal: \"from-teal-500 to-teal-600\",\n};\n\nexport default function SubjectCard({ subject }: SubjectCardProps) {\n  const IconComponent = iconMap[subject.icon as keyof typeof iconMap] || BookOpen;\n  const gradientColor = colorMap[subject.color as keyof typeof colorMap] || colorMap.blue;\n  \n  // Mock progress for now - in real app, this would come from user progress data\n  const progress = Math.floor(Math.random() * 100);\n  // Use actual video count from API data\n  const videoCount = subject.videoCount || 0;\n  const duration = Math.floor(Math.random() * 15) + 5;\n\n  return (\n    <Link href={subject.courseId \n      ? `/batch/${subject.batchId}/course/${subject.courseId}/subject/${subject.id}`\n      : `/batch/${subject.batchId}/subject/${subject.id}`}>\n      <Card className=\"shadow-sm hover:shadow-lg transition-all duration-200 overflow-hidden cursor-pointer border hover:border-primary hover:-translate-y-1\">\n        <CardContent className=\"p-6\">\n          <div className={`h-12 w-12 bg-gradient-to-br ${gradientColor} rounded-xl flex items-center justify-center mb-4`}>\n            <IconComponent className=\"text-white text-xl\" size={24} />\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{subject.name}</h3>\n          {subject.description && (\n            <p className=\"text-gray-600 text-sm mb-4\">{subject.description}</p>\n          )}\n          \n          <div className=\"mb-4\">\n            <div className=\"flex justify-between text-sm text-gray-600 mb-1\">\n              <span>Progress</span>\n              <span>{progress}%</span>\n            </div>\n            <Progress value={progress} className=\"w-full\" />\n          </div>\n          \n          <div className=\"flex justify-between items-center text-sm text-gray-500\">\n            <span>{videoCount} Videos</span>\n            <span>{duration} hours</span>\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n","size_bytes":2854},"client/src/components/video-embed.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExternalLink, AlertCircle } from \"lucide-react\";\nimport VideoProtectionSystem from \"./video-protection-system\";\nimport VideoSeekControls, { useVideoSeekControls } from \"./video-seek-controls\";\nimport PauseOverlayAd from \"./ads/pause-overlay-ad\";\nimport { AdConfig } from \"./ads/ad-manager\";\n\ninterface VideoEmbedProps {\n  videoId: string;\n  title: string;\n  onProgress?: (watchTime: number, completed?: boolean) => void;\n  adConfigs?: AdConfig[];\n}\n\n// Extract YouTube video ID from various URL formats\nfunction extractVideoId(url: string): string {\n  // If it's already just an ID (11 characters), return as is\n  if (url.length === 11 && /^[a-zA-Z0-9_-]{11}$/.test(url)) {\n    return url;\n  }\n  \n  const patterns = [\n    /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/|youtube\\.com\\/v\\/|youtube\\.com\\/shorts\\/)([a-zA-Z0-9_-]{11})/,\n    /(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/watch\\?.*v=([a-zA-Z0-9_-]{11})/\n  ];\n  \n  for (const pattern of patterns) {\n    const match = url.match(pattern);\n    if (match) {\n      return match[1];\n    }\n  }\n  \n  return url; // Return original if no match\n}\n\nexport default function VideoEmbed({ videoId: rawVideoId, title, onProgress, adConfigs = [] }: VideoEmbedProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const [showControls, setShowControls] = useState(false);\n  const [videoPaused, setVideoPaused] = useState(false);\n  const progressRef = useRef<number>(0);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n\n  // Video seeking controls\n  const seekControls = useVideoSeekControls(iframeRef);\n\n  // Extract clean video ID\n  const videoId = extractVideoId(rawVideoId);\n\n  // Enhanced YouTube embed URL with maximum branding removal and redirect blocking\n  const embedUrl = `https://www.youtube-nocookie.com/embed/${videoId}?` + \n    `rel=0&modestbranding=1&showinfo=0&fs=0&cc_load_policy=0&iv_load_policy=3&` +\n    `autohide=1&controls=1&disablekb=1&enablejsapi=1&playsinline=1&` +\n    `origin=${encodeURIComponent(window.location.origin)}&widget_referrer=${encodeURIComponent(window.location.origin)}`;\n\n  const fallbackEmbedUrl = `https://www.youtube.com/embed/${videoId}?` +\n    `rel=0&modestbranding=1&showinfo=0&fs=0&controls=1&disablekb=1&playsinline=1&` +\n    `origin=${encodeURIComponent(window.location.origin)}`;\n\n  useEffect(() => {\n    let loadTimeout: NodeJS.Timeout;\n    \n    const handleMessage = (event: MessageEvent) => {\n      // Handle YouTube player events\n      if (event.origin !== \"https://www.youtube-nocookie.com\" && event.origin !== \"https://www.youtube.com\") return;\n      \n      try {\n        const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\n        if (data.event === \"video-ready\" || data.event === \"onReady\") {\n          setIsLoading(false);\n          setError(null);\n        } else if (data.event === \"onStateChange\") {\n          // 1 = playing, 2 = paused\n          if (data.info === 1) {\n            setVideoPaused(false);\n          } else if (data.info === 2) {\n            setVideoPaused(true);\n          }\n        } else if (data.event === \"video-progress\") {\n          const currentTime = data.info || data.currentTime || 0;\n          if (currentTime > 0) {\n            progressRef.current = currentTime;\n            onProgress?.(currentTime);\n          }\n        }\n      } catch (e) {\n        // Ignore parsing errors\n      }\n    };\n\n    window.addEventListener(\"message\", handleMessage);\n    \n    // Set a timeout to detect loading issues\n    loadTimeout = setTimeout(() => {\n      if (isLoading) {\n        setIsLoading(false);\n        // Don't set error immediately, let iframe try to load\n      }\n    }, 8000);\n\n    // Simulate basic progress tracking\n    intervalRef.current = setInterval(() => {\n      if (!isLoading && !error && onProgress) {\n        progressRef.current += 5;\n        onProgress(progressRef.current);\n      }\n    }, 5000);\n\n    return () => {\n      window.removeEventListener(\"message\", handleMessage);\n      clearTimeout(loadTimeout);\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [videoId, isLoading, onProgress, error]);\n\n  const handleLoad = () => {\n    setIsLoading(false);\n    setError(null);\n  };\n\n  const handleError = () => {\n    setIsLoading(false);\n    if (retryCount === 0) {\n      setError(\"primary_failed\");\n    } else {\n      setError(\"Video could not be loaded. Please check if the YouTube video ID is correct and the video is accessible.\");\n    }\n  };\n\n  const retryLoad = () => {\n    setRetryCount(prev => prev + 1);\n    setError(null);\n    setIsLoading(true);\n  };\n\n  const openInYouTube = () => {\n    window.open(`https://www.youtube.com/watch?v=${videoId}`, '_blank');\n  };\n\n  const currentEmbedUrl = error === \"primary_failed\" ? fallbackEmbedUrl : embedUrl;\n\n  return (\n    <div \n      className=\"relative bg-black video-embed-container rounded-lg overflow-hidden\" \n      style={{ paddingBottom: \"56.25%\", height: 0 }}\n      onMouseEnter={() => setShowControls(true)}\n      onMouseLeave={() => setShowControls(false)}\n    >\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-black flex items-center justify-center z-10\">\n          <div className=\"text-center text-white\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\n            <p>Loading video content...</p>\n            <p className=\"text-sm text-gray-400 mt-2\">Video ID: {videoId}</p>\n          </div>\n        </div>\n      )}\n      \n      {error && error !== \"primary_failed\" ? (\n        <div className=\"absolute inset-0 bg-black flex items-center justify-center z-10\">\n          <Card className=\"bg-gray-900 border-gray-700 text-white max-w-md mx-4\">\n            <CardContent className=\"pt-6 text-center\">\n              <AlertCircle className=\"h-12 w-12 text-red-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Video Loading Issue</h3>\n              <p className=\"text-gray-300 mb-4 text-sm\">{error}</p>\n              <div className=\"space-y-2\">\n                <div className=\"text-xs text-gray-400\">\n                  <p>Video ID: <code className=\"bg-gray-800 px-1 rounded\">{videoId}</code></p>\n                  <p className=\"mt-1\">Make sure the video is:</p>\n                  <ul className=\"text-left mt-1 ml-4\">\n                    <li>• Public or Unlisted (not Private)</li>\n                    <li>• Embeddable (not restricted)</li>\n                    <li>• Valid YouTube video ID</li>\n                  </ul>\n                </div>\n                <div className=\"flex space-x-2 justify-center mt-4\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={retryLoad}\n                    className=\"bg-gray-800 border-gray-600 text-white hover:bg-gray-700\"\n                  >\n                    Retry\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={openInYouTube}\n                    className=\"bg-gray-800 border-gray-600 text-white hover:bg-gray-700\"\n                  >\n                    <ExternalLink className=\"h-4 w-4 mr-1\" />\n                    Open in YouTube\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      ) : (\n        <>\n          <iframe\n            ref={iframeRef}\n            src={currentEmbedUrl}\n            title={title}\n            className=\"absolute top-0 left-0 w-full h-full border-0 youtube-embed-iframe\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n            allowFullScreen\n            onLoad={handleLoad}\n            onError={handleError}\n            loading=\"lazy\"\n            sandbox=\"allow-scripts allow-same-origin allow-presentation\"\n          />\n          {/* Universal Video Protection System - Applied to ALL embeds */}\n          <VideoProtectionSystem />\n\n          {/* Video seeking controls - appears on hover */}\n          {showControls && !isLoading && error !== \"primary_failed\" && (\n            <div className=\"absolute bottom-4 left-4 right-4 z-[1000]\">\n              <VideoSeekControls\n                isPlaying={seekControls.isPlaying}\n                currentTime={seekControls.currentTime}\n                duration={seekControls.duration}\n                onSeek={seekControls.handleSeek}\n                onPlayPause={seekControls.handlePlayPause}\n                onSkipBackward={seekControls.handleSkipBackward}\n                onSkipForward={seekControls.handleSkipForward}\n                className=\"animate-in slide-in-from-bottom-2 duration-300\"\n              />\n            </div>\n          )}\n\n          {/* Pause Overlay Ad */}\n          <PauseOverlayAd\n            isVisible={videoPaused && !isLoading && error !== \"primary_failed\"}\n            onClose={() => setVideoPaused(false)}\n            onResume={() => {\n              setVideoPaused(false);\n              // Send resume command to YouTube iframe\n              if (iframeRef.current) {\n                const message = {\n                  event: 'command',\n                  func: 'playVideo',\n                  args: []\n                };\n                iframeRef.current.contentWindow?.postMessage(JSON.stringify(message), '*');\n              }\n            }}\n            adConfigs={adConfigs}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":9893},"client/src/components/youtube-protection-overlay.tsx":{"content":"import { useEffect, useRef } from 'react';\n\ninterface YouTubeProtectionOverlayProps {\n  containerRef: React.RefObject<HTMLDivElement>;\n}\n\nexport default function YouTubeProtectionOverlay({ containerRef }: YouTubeProtectionOverlayProps) {\n  const overlayRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const preventCopyOperations = (e: ClipboardEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    };\n\n    const preventKeyboardShortcuts = (e: KeyboardEvent) => {\n      // Only block copy-related shortcuts, not all interactions\n      if (\n        (e.ctrlKey && (e.key === 'c' || e.key === 'C')) ||\n        (e.metaKey && (e.key === 'c' || e.key === 'C'))\n      ) {\n        e.preventDefault();\n        e.stopPropagation();\n        return false;\n      }\n    };\n\n    const preventContextMenu = (e: MouseEvent) => {\n      e.preventDefault();\n      return false;\n    };\n\n    // Only add targeted event blocking, not comprehensive blocking\n    document.addEventListener('copy', preventCopyOperations, true);\n    document.addEventListener('cut', preventCopyOperations, true);\n    document.addEventListener('keydown', preventKeyboardShortcuts, true);\n    document.addEventListener('contextmenu', preventContextMenu, true);\n\n    return () => {\n      document.removeEventListener('copy', preventCopyOperations, true);\n      document.removeEventListener('cut', preventCopyOperations, true);\n      document.removeEventListener('keydown', preventKeyboardShortcuts, true);\n      document.removeEventListener('contextmenu', preventContextMenu, true);\n    };\n  }, [containerRef]);\n\n  return (\n    <div\n      ref={overlayRef}\n      className=\"absolute inset-0 pointer-events-none\"\n      style={{ zIndex: 50 }}\n    >\n      {/* Responsive extended coverage area - 2cm around copy link functionality */}\n      \n      {/* Large blocking area covering entire copy link region - responsive sizing */}\n      <div className=\"absolute top-0 right-0 w-48 h-32 sm:w-64 sm:h-40 md:w-80 md:h-48 bg-transparent pointer-events-auto\" \n           onClick={(e) => { e.preventDefault(); e.stopPropagation(); }}\n           onContextMenu={(e) => { e.preventDefault(); e.stopPropagation(); }}\n           onMouseDown={(e) => { e.preventDefault(); e.stopPropagation(); }}\n           onMouseUp={(e) => { e.preventDefault(); e.stopPropagation(); }}\n           onDoubleClick={(e) => { e.preventDefault(); e.stopPropagation(); }} />\n      \n      {/* Additional coverage for notification area - responsive positioning */}\n      <div className=\"absolute top-8 right-4 w-48 h-20 sm:top-12 sm:right-6 sm:w-56 sm:h-24 md:top-16 md:right-8 md:w-72 md:h-32 bg-transparent pointer-events-auto\"\n           onClick={(e) => { e.preventDefault(); e.stopPropagation(); }}\n           onContextMenu={(e) => { e.preventDefault(); e.stopPropagation(); }}\n           onMouseDown={(e) => { e.preventDefault(); e.stopPropagation(); }}\n           onMouseUp={(e) => { e.preventDefault(); e.stopPropagation(); }} />\n    </div>\n  );\n}","size_bytes":3012},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/youtube-utils.ts":{"content":"// YouTube URL parsing and validation utilities\n\nexport interface YouTubeUrlResult {\n  videoId: string | null;\n  isValid: boolean;\n  originalUrl: string;\n}\n\n/**\n * Extracts YouTube video ID from various URL formats\n * Supports:\n * - youtube.com/watch?v=VIDEO_ID\n * - youtu.be/VIDEO_ID\n * - youtube.com/embed/VIDEO_ID\n * - youtube.com/shorts/VIDEO_ID\n * - youtube.com/v/VIDEO_ID\n * - Raw video ID (11 characters)\n */\nexport function extractYouTubeVideoId(url: string): YouTubeUrlResult {\n  const originalUrl = url.trim();\n  \n  if (!originalUrl) {\n    return { videoId: null, isValid: false, originalUrl };\n  }\n\n  // Check if it's already a video ID (11 characters, alphanumeric and dashes/underscores)\n  const videoIdRegex = /^[a-zA-Z0-9_-]{11}$/;\n  if (videoIdRegex.test(originalUrl)) {\n    return { videoId: originalUrl, isValid: true, originalUrl };\n  }\n\n  // YouTube URL patterns\n  const patterns = [\n    // youtube.com/watch?v=VIDEO_ID\n    /(?:youtube\\.com\\/watch\\?v=)([a-zA-Z0-9_-]{11})/,\n    // youtu.be/VIDEO_ID\n    /(?:youtu\\.be\\/)([a-zA-Z0-9_-]{11})/,\n    // youtube.com/embed/VIDEO_ID\n    /(?:youtube\\.com\\/embed\\/)([a-zA-Z0-9_-]{11})/,\n    // youtube.com/shorts/VIDEO_ID\n    /(?:youtube\\.com\\/shorts\\/)([a-zA-Z0-9_-]{11})/,\n    // youtube.com/v/VIDEO_ID\n    /(?:youtube\\.com\\/v\\/)([a-zA-Z0-9_-]{11})/,\n  ];\n\n  for (const pattern of patterns) {\n    const match = originalUrl.match(pattern);\n    if (match && match[1]) {\n      return { videoId: match[1], isValid: true, originalUrl };\n    }\n  }\n\n  return { videoId: null, isValid: false, originalUrl };\n}\n\n/**\n * Generates a privacy-enhanced YouTube embed URL\n */\nexport function getYouTubeEmbedUrl(videoId: string): string {\n  return `https://www.youtube-nocookie.com/embed/${videoId}?modestbranding=1&rel=0&showinfo=0`;\n}\n\n/**\n * Generates a fallback YouTube embed URL (regular YouTube)\n */\nexport function getYouTubeFallbackEmbedUrl(videoId: string): string {\n  return `https://www.youtube.com/embed/${videoId}?modestbranding=1&rel=0&showinfo=0`;\n}\n\n/**\n * Validates if a YouTube video can be embedded\n */\nexport function validateYouTubeVideoId(videoId: string): boolean {\n  return /^[a-zA-Z0-9_-]{11}$/.test(videoId);\n}","size_bytes":2182},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Crown, Users, PlayCircle, DollarSign, Ban, Check, Info, Plus, Edit2, Trash2, FolderOpen, Video, ArrowLeft, Settings as SettingsIcon } from \"lucide-react\";\nimport AdminAds from \"./admin/ads\";\nimport BrandPromotions from \"./admin/brand-promotions\";\nimport BannerAdsControl from \"@/components/admin/banner-ads-control\";\nimport type { Batch, Course, Subject, Video as VideoType, AdSettings, InsertBatch, InsertCourse, InsertSubject, InsertVideo, MultiPlatformVideo, InsertMultiPlatformVideo } from \"@shared/schema\";\nimport { extractYouTubeVideoId } from \"@/lib/youtube-utils\";\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"batches\");\n  const [selectedBatch, setSelectedBatch] = useState<Batch | null>(null);\n  const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);\n  const [selectedSubject, setSelectedSubject] = useState<Subject | null>(null);\n  \n  // Dialog states\n  const [isCreateBatchDialogOpen, setIsCreateBatchDialogOpen] = useState(false);\n  const [isEditBatchDialogOpen, setIsEditBatchDialogOpen] = useState(false);\n  const [isCreateCourseDialogOpen, setIsCreateCourseDialogOpen] = useState(false);\n  const [isEditCourseDialogOpen, setIsEditCourseDialogOpen] = useState(false);\n  const [isCreateSubjectDialogOpen, setIsCreateSubjectDialogOpen] = useState(false);\n  const [isCreateVideoDialogOpen, setIsCreateVideoDialogOpen] = useState(false);\n  const [isCreatePlatformVideoDialogOpen, setIsCreatePlatformVideoDialogOpen] = useState(false);\n  \n  // Form states\n  const [editingBatch, setEditingBatch] = useState<Batch | null>(null);\n  const [editingCourse, setEditingCourse] = useState<Course | null>(null);\n  const [editingSubject, setEditingSubject] = useState<Subject | null>(null);\n  const [editingVideo, setEditingVideo] = useState<VideoType | null>(null);\n  const [isEditSubjectDialogOpen, setIsEditSubjectDialogOpen] = useState(false);\n  const [isEditVideoDialogOpen, setIsEditVideoDialogOpen] = useState(false);\n  \n  const [batchForm, setBatchForm] = useState({\n    name: \"\",\n    description: \"\",\n    thumbnailUrl: \"\",\n    isActive: true\n  });\n  const [courseForm, setCourseForm] = useState({\n    name: \"\",\n    description: \"\",\n    thumbnailUrl: \"\",\n    orderIndex: 0,\n    isActive: true\n  });\n  \n  const [subjectForm, setSubjectForm] = useState({\n    name: \"\",\n    description: \"\",\n    orderIndex: 0\n  });\n  const [videoForm, setVideoForm] = useState({\n    title: \"\",\n    description: \"\",\n    youtubeVideoId: \"\",\n    duration: 0,\n    orderIndex: 0\n  });\n  \n  const [platformVideoForm, setPlatformVideoForm] = useState({\n    title: \"\",\n    description: \"\",\n    platform: \"vimeo\" as const,\n    videoId: \"\",\n    videoUrl: \"\",\n    duration: 0,\n    orderIndex: 0\n  });\n\n  // Queries\n  const { data: batches = [], isLoading: batchesLoading } = useQuery<Batch[]>({\n    queryKey: [\"/api/batches\"],\n  });\n\n  const { data: courses = [], isLoading: coursesLoading } = useQuery<Course[]>({\n    queryKey: [\"/api/batches\", selectedBatch?.id, \"courses\"],\n    enabled: !!selectedBatch?.id,\n  });\n\n  const { data: subjects = [], isLoading: subjectsLoading } = useQuery<Subject[]>({\n    queryKey: [\"/api/courses\", selectedCourse?.id, \"subjects\"],\n    enabled: !!selectedCourse?.id,\n  });\n\n  const { data: videos = [], isLoading: videosLoading } = useQuery<VideoType[]>({\n    queryKey: [\"/api/subjects\", selectedSubject?.id, \"videos\"],\n    enabled: !!selectedSubject?.id,\n  });\n\n  const { data: adSettings, isLoading: adSettingsLoading } = useQuery<AdSettings>({\n    queryKey: [\"/api/admin/ads\"],\n  });\n\n  const { data: platformVideos = [], isLoading: platformVideosLoading } = useQuery<MultiPlatformVideo[]>({\n    queryKey: [\"/api/multi-platform-videos\"],\n  });\n\n  // Batch mutations\n  const createBatchMutation = useMutation({\n    mutationFn: async (batchData: InsertBatch) => {\n      await apiRequest(\"POST\", \"/api/batches\", batchData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/batches\"] });\n      setIsCreateBatchDialogOpen(false);\n      setBatchForm({ name: \"\", description: \"\", thumbnailUrl: \"\", isActive: true });\n      toast({\n        title: \"Success\",\n        description: \"Batch created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create batch\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const updateBatchMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertBatch> }) => {\n      await apiRequest(\"PATCH\", `/api/batches/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/batches\"] });\n      setIsEditBatchDialogOpen(false);\n      setEditingBatch(null);\n      setBatchForm({ name: \"\", description: \"\", thumbnailUrl: \"\", isActive: true });\n      toast({\n        title: \"Success\",\n        description: \"Batch updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to update batch\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const deleteBatchMutation = useMutation({\n    mutationFn: async (batchId: string) => {\n      await apiRequest(\"DELETE\", `/api/batches/${batchId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/batches\"] });\n      toast({\n        title: \"Success\",\n        description: \"Batch deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete batch\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Course mutations\n  const createCourseMutation = useMutation({\n    mutationFn: async (courseData: InsertCourse) => {\n      await apiRequest(\"POST\", `/api/batches/${selectedBatch?.id}/courses`, courseData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/batches\", selectedBatch?.id, \"courses\"] });\n      setIsCreateCourseDialogOpen(false);\n      setCourseForm({ name: \"\", description: \"\", thumbnailUrl: \"\", orderIndex: 0, isActive: true });\n      toast({\n        title: \"Success\",\n        description: \"Course created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create course\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const updateCourseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertCourse> }) => {\n      await apiRequest(\"PATCH\", `/api/courses/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/batches\", selectedBatch?.id, \"courses\"] });\n      setIsEditCourseDialogOpen(false);\n      setEditingCourse(null);\n      setCourseForm({ name: \"\", description: \"\", thumbnailUrl: \"\", orderIndex: 0, isActive: true });\n      toast({\n        title: \"Success\",\n        description: \"Course updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to update course\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const deleteCourseMutation = useMutation({\n    mutationFn: async (courseId: string) => {\n      await apiRequest(\"DELETE\", `/api/courses/${courseId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/batches\", selectedBatch?.id, \"courses\"] });\n      toast({\n        title: \"Success\",\n        description: \"Course deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete course\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Subject mutations\n  const createSubjectMutation = useMutation({\n    mutationFn: async (subjectData: InsertSubject) => {\n      await apiRequest(\"POST\", `/api/courses/${selectedCourse?.id}/subjects`, subjectData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\", selectedCourse?.id, \"subjects\"] });\n      setIsCreateSubjectDialogOpen(false);\n      setSubjectForm({ name: \"\", description: \"\", orderIndex: 0 });\n      toast({\n        title: \"Success\",\n        description: \"Subject created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create subject\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Subject edit/delete mutations\n  const updateSubjectMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertSubject> }) => {\n      await apiRequest(\"PATCH\", `/api/subjects/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\", selectedCourse?.id, \"subjects\"] });\n      setIsEditSubjectDialogOpen(false);\n      setEditingSubject(null);\n      setSubjectForm({ name: \"\", description: \"\", orderIndex: 0 });\n      toast({\n        title: \"Success\",\n        description: \"Subject updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to update subject\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const deleteSubjectMutation = useMutation({\n    mutationFn: async (subjectId: string) => {\n      await apiRequest(\"DELETE\", `/api/subjects/${subjectId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\", selectedCourse?.id, \"subjects\"] });\n      toast({\n        title: \"Success\",\n        description: \"Subject deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete subject\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Video mutations\n  const createVideoMutation = useMutation({\n    mutationFn: async (videoData: InsertVideo) => {\n      await apiRequest(\"POST\", `/api/subjects/${selectedSubject?.id}/videos`, videoData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subjects\", selectedSubject?.id, \"videos\"] });\n      setIsCreateVideoDialogOpen(false);\n      setVideoForm({ title: \"\", description: \"\", youtubeVideoId: \"\", duration: 0, orderIndex: 0 });\n      toast({\n        title: \"Success\",\n        description: \"Video created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create video\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const updateVideoMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertVideo> }) => {\n      await apiRequest(\"PATCH\", `/api/videos/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subjects\", selectedSubject?.id, \"videos\"] });\n      setIsEditVideoDialogOpen(false);\n      setEditingVideo(null);\n      setVideoForm({ title: \"\", description: \"\", youtubeVideoId: \"\", duration: 0, orderIndex: 0 });\n      toast({\n        title: \"Success\",\n        description: \"Video updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to update video\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const deleteVideoMutation = useMutation({\n    mutationFn: async (videoId: string) => {\n      await apiRequest(\"DELETE\", `/api/videos/${videoId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/subjects\", selectedSubject?.id, \"videos\"] });\n      toast({\n        title: \"Success\",\n        description: \"Video deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete video\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Platform video mutations\n  const createPlatformVideoMutation = useMutation({\n    mutationFn: async (videoData: InsertMultiPlatformVideo) => {\n      await apiRequest(\"POST\", \"/api/multi-platform-videos\", videoData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/multi-platform-videos\"] });\n      setIsCreatePlatformVideoDialogOpen(false);\n      setPlatformVideoForm({ \n        title: \"\", \n        description: \"\", \n        platform: \"vimeo\" as const, \n        videoId: \"\", \n        videoUrl: \"\", \n        duration: 0, \n        orderIndex: 0 \n      });\n      toast({\n        title: \"Success\",\n        description: \"Platform video created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to create platform video\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Ad settings mutation\n  const updateAdSettingsMutation = useMutation({\n    mutationFn: async (settings: Partial<AdSettings>) => {\n      await apiRequest(\"PATCH\", \"/api/admin/ads\", settings);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/ads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Ad settings updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to update ad settings\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Handler functions\n  const handleCreateBatch = () => {\n    if (!batchForm.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a batch name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createBatchMutation.mutate({\n      name: batchForm.name,\n      description: batchForm.description || null,\n      thumbnailUrl: batchForm.thumbnailUrl || null,\n      isActive: batchForm.isActive,\n    });\n  };\n\n  const handleEditBatch = (batch: Batch) => {\n    setEditingBatch(batch);\n    setBatchForm({\n      name: batch.name,\n      description: batch.description || \"\",\n      thumbnailUrl: batch.thumbnailUrl || \"\",\n      isActive: batch.isActive ?? true,\n    });\n    setIsEditBatchDialogOpen(true);\n  };\n\n  const handleUpdateBatch = () => {\n    if (!editingBatch || !batchForm.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a batch name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    updateBatchMutation.mutate({\n      id: editingBatch.id,\n      data: {\n        name: batchForm.name,\n        description: batchForm.description || null,\n        thumbnailUrl: batchForm.thumbnailUrl || null,\n        isActive: batchForm.isActive,\n      },\n    });\n  };\n\n  const handleEditSubject = (subject: Subject) => {\n    setEditingSubject(subject);\n    setSubjectForm({\n      name: subject.name,\n      description: subject.description || \"\",\n      orderIndex: subject.orderIndex || 0,\n    });\n    setIsEditSubjectDialogOpen(true);\n  };\n\n  const handleUpdateSubject = () => {\n    if (!editingSubject || !subjectForm.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a subject name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    updateSubjectMutation.mutate({\n      id: editingSubject.id,\n      data: {\n        name: subjectForm.name,\n        description: subjectForm.description || null,\n        orderIndex: subjectForm.orderIndex,\n      },\n    });\n  };\n\n  const handleDeleteSubject = (subjectId: string) => {\n    if (confirm(\"Are you sure you want to delete this subject? This will also delete all videos in this subject.\")) {\n      deleteSubjectMutation.mutate(subjectId);\n    }\n  };\n\n  const handleEditVideo = (video: VideoType) => {\n    setEditingVideo(video);\n    setVideoForm({\n      title: video.title,\n      description: video.description || \"\",\n      youtubeVideoId: video.youtubeVideoId,\n      duration: video.duration || 0,\n      orderIndex: video.orderIndex || 0,\n    });\n    setIsEditVideoDialogOpen(true);\n  };\n\n  const handleUpdateVideo = () => {\n    if (!editingVideo || !videoForm.title.trim() || !videoForm.youtubeVideoId.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter video title and YouTube video ID\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Extract video ID from URL if needed\n    const { videoId, isValid } = extractYouTubeVideoId(videoForm.youtubeVideoId);\n    \n    if (!isValid || !videoId) {\n      toast({\n        title: \"Invalid YouTube URL\",\n        description: \"Please enter a valid YouTube URL or video ID\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    updateVideoMutation.mutate({\n      id: editingVideo.id,\n      data: {\n        title: videoForm.title,\n        description: videoForm.description || null,\n        youtubeVideoId: videoId,\n        duration: videoForm.duration || null,\n        orderIndex: videoForm.orderIndex,\n      },\n    });\n  };\n\n  const handleDeleteVideo = (videoId: string) => {\n    if (confirm(\"Are you sure you want to delete this video?\")) {\n      deleteVideoMutation.mutate(videoId);\n    }\n  };\n\n  const handleDeleteBatch = (batchId: string) => {\n    if (confirm(\"Are you sure you want to delete this batch? This action cannot be undone.\")) {\n      deleteBatchMutation.mutate(batchId);\n    }\n  };\n\n  // Course handler functions\n  const handleCreateCourse = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!courseForm.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Course name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createCourseMutation.mutate({\n      ...courseForm,\n      batchId: selectedBatch!.id\n    });\n  };\n\n  const handleEditCourse = (course: Course) => {\n    setEditingCourse(course);\n    setCourseForm({\n      name: course.name,\n      description: course.description || \"\",\n      thumbnailUrl: course.thumbnailUrl || \"\",\n      orderIndex: course.orderIndex ?? 0,\n      isActive: course.isActive ?? true\n    });\n    setIsEditCourseDialogOpen(true);\n  };\n\n  const handleUpdateCourse = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingCourse) return;\n    updateCourseMutation.mutate({ id: editingCourse.id, data: courseForm });\n  };\n\n  const handleDeleteCourse = (courseId: string) => {\n    if (confirm(\"Are you sure you want to delete this course? This will also delete all subjects and videos in this course.\")) {\n      deleteCourseMutation.mutate(courseId);\n    }\n  };\n\n  const handleCreateSubject = () => {\n    if (!subjectForm.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a subject name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createSubjectMutation.mutate({\n      name: subjectForm.name,\n      description: subjectForm.description || null,\n      batchId: selectedCourse?.batchId || selectedBatch!.id,\n      courseId: selectedCourse?.id || null,\n      orderIndex: subjectForm.orderIndex,\n    });\n  };\n\n  const handleCreateVideo = () => {\n    if (!videoForm.title.trim() || !videoForm.youtubeVideoId.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter video title and YouTube video ID\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Extract video ID from URL if needed\n    const { videoId, isValid } = extractYouTubeVideoId(videoForm.youtubeVideoId);\n    \n    if (!isValid || !videoId) {\n      toast({\n        title: \"Invalid YouTube URL\",\n        description: \"Please enter a valid YouTube URL or video ID\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createVideoMutation.mutate({\n      title: videoForm.title,\n      description: videoForm.description || null,\n      youtubeVideoId: videoId,\n      duration: videoForm.duration || null,\n      subjectId: selectedSubject?.id || null,\n      courseId: selectedCourse?.id || null,\n      batchId: selectedBatch!.id,\n      orderIndex: videoForm.orderIndex,\n      isActive: true,\n    });\n  };\n\n  const handleAdToggle = (setting: keyof AdSettings, enabled: boolean) => {\n    updateAdSettingsMutation.mutate({ [setting]: enabled });\n  };\n\n  const disableAllAds = () => {\n    updateAdSettingsMutation.mutate({\n      rewardedAdsEnabled: false,\n      bannerAdsEnabled: false,\n      interstitialAdsEnabled: false,\n    });\n  };\n\n  const enableAllAds = () => {\n    updateAdSettingsMutation.mutate({\n      rewardedAdsEnabled: true,\n      bannerAdsEnabled: true,\n      interstitialAdsEnabled: true,\n    });\n  };\n\n  const handleCreatePlatformVideo = () => {\n    if (!platformVideoForm.title.trim() || !platformVideoForm.videoUrl.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter video title and URL\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createPlatformVideoMutation.mutate({\n      title: platformVideoForm.title,\n      description: platformVideoForm.description || null,\n      platform: platformVideoForm.platform,\n      videoId: platformVideoForm.videoId || \"\",\n      videoUrl: platformVideoForm.videoUrl,\n      durationSeconds: platformVideoForm.duration || null,\n      subjectId: selectedSubject?.id || null,\n      courseId: selectedCourse?.id || null,\n      batchId: selectedBatch!.id,\n      orderIndex: platformVideoForm.orderIndex,\n      isActive: true,\n    });\n  };\n\n  if (!user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <Crown className=\"h-8 w-8 text-blue-600 mr-3\" />\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">Admin Dashboard</h1>\n                <p className=\"text-sm text-gray-600\">Manage content and settings</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Badge variant=\"secondary\">Admin</Badge>\n                <span className=\"text-sm text-gray-600\">{(user as any)?.email || 'Admin User'}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        <Card className=\"bg-white shadow\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <div className=\"border-b border-gray-200 px-6\">\n              <TabsList className=\"h-auto p-0 bg-transparent\">\n                <div className=\"flex space-x-8\">\n                  <TabsTrigger \n                    value=\"batches\" \n                    className=\"data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-blue-600 rounded-none px-1 py-4\"\n                  >\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    Content Management\n                  </TabsTrigger>\n                  <TabsTrigger \n                    value=\"multi-platform\" \n                    className=\"data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-blue-600 rounded-none px-1 py-4\"\n                  >\n                    <Video className=\"h-4 w-4 mr-2\" />\n                    Multi-Platform Videos\n                  </TabsTrigger>\n                  <TabsTrigger \n                    value=\"ads\" \n                    className=\"data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-blue-600 rounded-none px-1 py-4\"\n                  >\n                    <DollarSign className=\"h-4 w-4 mr-2\" />\n                    Advertisement Settings\n                  </TabsTrigger>\n                  <TabsTrigger \n                    value=\"brand-promotions\" \n                    className=\"data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-blue-600 rounded-none px-1 py-4\"\n                  >\n                    <PlayCircle className=\"h-4 w-4 mr-2\" />\n                    Brand Partnerships\n                  </TabsTrigger>\n                  <TabsTrigger \n                    value=\"banner-ads\" \n                    className=\"data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-blue-600 rounded-none px-1 py-4\"\n                  >\n                    <SettingsIcon className=\"h-4 w-4 mr-2\" />\n                    Banner Ads\n                  </TabsTrigger>\n                </div>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"batches\" className=\"p-6 mt-0\">\n              {/* Navigation Breadcrumbs */}\n              <div className=\"flex items-center gap-2 mb-6 text-sm text-gray-600\">\n                <button \n                  className={`hover:text-blue-600 ${!selectedBatch ? 'font-semibold text-gray-900' : ''}`}\n                  onClick={() => { setSelectedBatch(null); setSelectedCourse(null); setSelectedSubject(null); }}\n                >\n                  Batches\n                </button>\n                {selectedBatch && (\n                  <>\n                    <span>/</span>\n                    <button \n                      className={`hover:text-blue-600 ${!selectedCourse ? 'font-semibold text-gray-900' : ''}`}\n                      onClick={() => { setSelectedCourse(null); setSelectedSubject(null); }}\n                    >\n                      {selectedBatch.name}\n                    </button>\n                  </>\n                )}\n                {selectedCourse && (\n                  <>\n                    <span>/</span>\n                    <button \n                      className={`hover:text-blue-600 ${!selectedSubject ? 'font-semibold text-gray-900' : ''}`}\n                      onClick={() => setSelectedSubject(null)}\n                    >\n                      {selectedCourse.name}\n                    </button>\n                  </>\n                )}\n                {selectedSubject && (\n                  <>\n                    <span>/</span>\n                    <span className=\"font-semibold text-gray-900\">{selectedSubject.name}</span>\n                  </>\n                )}\n              </div>\n\n              {/* Content based on selection */}\n              {!selectedBatch ? (\n                // Batch list view\n                <div>\n                  <div className=\"flex justify-between items-center mb-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Manage Batches</h3>\n                    <Dialog open={isCreateBatchDialogOpen} onOpenChange={setIsCreateBatchDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button className=\"bg-primary hover:bg-blue-700\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Create Batch\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-[425px]\">\n                        <DialogHeader>\n                          <DialogTitle>Create New Batch</DialogTitle>\n                          <DialogDescription>\n                            Create a new learning batch. You can add subjects and videos later.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid gap-4 py-4\">\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"name\" className=\"text-right\">\n                              Name\n                            </Label>\n                            <Input\n                              id=\"name\"\n                              value={batchForm.name}\n                              onChange={(e) => setBatchForm({ ...batchForm, name: e.target.value })}\n                              className=\"col-span-3\"\n                              placeholder=\"e.g., Advanced Mathematics\"\n                            />\n                          </div>\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"description\" className=\"text-right\">\n                              Description\n                            </Label>\n                            <Textarea\n                              id=\"description\"\n                              value={batchForm.description}\n                              onChange={(e) => setBatchForm({ ...batchForm, description: e.target.value })}\n                              className=\"col-span-3\"\n                              placeholder=\"Brief description of the batch...\"\n                            />\n                          </div>\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"thumbnailUrl\" className=\"text-right\">\n                              Thumbnail URL\n                            </Label>\n                            <Input\n                              id=\"thumbnailUrl\"\n                              value={batchForm.thumbnailUrl}\n                              onChange={(e) => setBatchForm({ ...batchForm, thumbnailUrl: e.target.value })}\n                              className=\"col-span-3\"\n                              placeholder=\"https://example.com/image.jpg\"\n                            />\n                          </div>\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"isActive\" className=\"text-right\">\n                              Active\n                            </Label>\n                            <Switch\n                              id=\"isActive\"\n                              checked={batchForm.isActive}\n                              onCheckedChange={(checked) => setBatchForm({ ...batchForm, isActive: checked })}\n                            />\n                          </div>\n                        </div>\n                        <DialogFooter>\n                          <Button \n                            type=\"submit\" \n                            onClick={handleCreateBatch}\n                            disabled={createBatchMutation.isPending}\n                          >\n                            {createBatchMutation.isPending ? \"Creating...\" : \"Create Batch\"}\n                          </Button>\n                        </DialogFooter>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                  \n                  {batchesLoading ? (\n                    <div className=\"grid gap-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <Card key={i} className=\"border border-gray-200\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex-1\">\n                                <Skeleton className=\"h-6 w-48 mb-2\" />\n                                <Skeleton className=\"h-4 w-64 mb-4\" />\n                                <div className=\"flex items-center space-x-2\">\n                                  <Skeleton className=\"h-6 w-16\" />\n                                  <Skeleton className=\"h-4 w-32\" />\n                                </div>\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                <Skeleton className=\"h-8 w-16\" />\n                                <Skeleton className=\"h-8 w-16\" />\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"grid gap-4\">\n                      {batches.map((batch: Batch) => (\n                        <Card key={batch.id} className=\"border border-gray-200 hover:shadow-md transition-shadow cursor-pointer\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex space-x-4 flex-1\">\n                                {batch.thumbnailUrl && (\n                                  <div className=\"flex-shrink-0\">\n                                    <img \n                                      src={batch.thumbnailUrl} \n                                      alt={batch.name}\n                                      className=\"w-20 h-20 object-cover rounded-lg border border-gray-200\"\n                                      onError={(e) => {\n                                        e.currentTarget.style.display = 'none';\n                                      }}\n                                    />\n                                  </div>\n                                )}\n                                <div \n                                  className=\"flex-1 cursor-pointer\"\n                                  onClick={() => setSelectedBatch(batch)}\n                                >\n                                  <div className=\"flex items-center space-x-2 mb-2\">\n                                    <FolderOpen className=\"h-5 w-5 text-blue-600\" />\n                                    <h4 className=\"text-lg font-medium text-gray-900\">{batch.name}</h4>\n                                  </div>\n                                  {batch.description && (\n                                    <p className=\"text-gray-600 text-sm mb-3\">{batch.description}</p>\n                                  )}\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Badge variant={batch.isActive ? \"default\" : \"secondary\"}>\n                                      {batch.isActive ? \"Active\" : \"Inactive\"}\n                                    </Badge>\n                                    <span className=\"text-sm text-gray-500\">\n                                      Created {new Date(batch.createdAt!).toLocaleDateString()}\n                                    </span>\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"flex space-x-2 flex-wrap gap-2\">\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedBatch(batch);\n                                  }}\n                                >\n                                  <FolderOpen className=\"h-4 w-4 mr-1\" />\n                                  View\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  className=\"bg-red-50 hover:bg-red-100 text-red-700 border-red-200\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedBatch(batch);\n                                    setSelectedSubject(null);\n                                    setIsCreateVideoDialogOpen(true);\n                                  }}\n                                >\n                                  <Video className=\"h-4 w-4 mr-1\" />\n                                  Add YT Video\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  className=\"bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-200\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedBatch(batch);\n                                    setSelectedSubject(null);\n                                    setIsCreatePlatformVideoDialogOpen(true);\n                                  }}\n                                >\n                                  <PlayCircle className=\"h-4 w-4 mr-1\" />\n                                  Add Platform Video\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleEditBatch(batch);\n                                  }}\n                                >\n                                  <Edit2 className=\"h-4 w-4 mr-1\" />\n                                  Edit\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\" \n                                  className=\"text-red-600 hover:text-red-700\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleDeleteBatch(batch.id);\n                                  }}\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                                  Delete\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              ) : !selectedCourse ? (\n                // Course list view\n                <div>\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div className=\"flex items-center gap-3\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => setSelectedBatch(null)}\n                      >\n                        <ArrowLeft className=\"h-4 w-4 mr-1\" />\n                        Back\n                      </Button>\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\n                        Courses in {selectedBatch.name}\n                      </h3>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Dialog open={isCreateCourseDialogOpen} onOpenChange={setIsCreateCourseDialogOpen}>\n                        <DialogTrigger asChild>\n                          <Button className=\"bg-primary hover:bg-blue-700\">\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            Create Course\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[425px]\">\n                          <DialogHeader>\n                            <DialogTitle>Create New Course</DialogTitle>\n                            <DialogDescription>\n                              Create a new course folder within {selectedBatch.name}.\n                            </DialogDescription>\n                          </DialogHeader>\n                          <form onSubmit={handleCreateCourse}>\n                            <div className=\"grid gap-4 py-4\">\n                              <div className=\"grid grid-cols-4 items-center gap-4\">\n                                <Label htmlFor=\"course-name\" className=\"text-right\">\n                                  Name\n                                </Label>\n                                <Input\n                                  id=\"course-name\"\n                                  value={courseForm.name}\n                                  onChange={(e) => setCourseForm({ ...courseForm, name: e.target.value })}\n                                  className=\"col-span-3\"\n                                  placeholder=\"e.g., Advanced Mathematics\"\n                                  required\n                                />\n                              </div>\n                              <div className=\"grid grid-cols-4 items-center gap-4\">\n                                <Label htmlFor=\"course-description\" className=\"text-right\">\n                                  Description\n                                </Label>\n                                <Textarea\n                                  id=\"course-description\"\n                                  value={courseForm.description}\n                                  onChange={(e) => setCourseForm({ ...courseForm, description: e.target.value })}\n                                  className=\"col-span-3\"\n                                  placeholder=\"Brief description of the course...\"\n                                />\n                              </div>\n                              <div className=\"grid grid-cols-4 items-center gap-4\">\n                                <Label htmlFor=\"course-thumbnail\" className=\"text-right\">\n                                  Thumbnail URL\n                                </Label>\n                                <Input\n                                  id=\"course-thumbnail\"\n                                  value={courseForm.thumbnailUrl}\n                                  onChange={(e) => setCourseForm({ ...courseForm, thumbnailUrl: e.target.value })}\n                                  className=\"col-span-3\"\n                                  placeholder=\"https://example.com/image.jpg\"\n                                />\n                              </div>\n                              <div className=\"grid grid-cols-4 items-center gap-4\">\n                                <Label htmlFor=\"course-order\" className=\"text-right\">\n                                  Order\n                                </Label>\n                                <Input\n                                  id=\"course-order\"\n                                  type=\"number\"\n                                  value={courseForm.orderIndex}\n                                  onChange={(e) => setCourseForm({ ...courseForm, orderIndex: parseInt(e.target.value) || 0 })}\n                                  className=\"col-span-3\"\n                                  placeholder=\"0\"\n                                />\n                              </div>\n                            </div>\n                            <DialogFooter>\n                              <Button \n                                type=\"submit\" \n                                disabled={createCourseMutation.isPending}\n                              >\n                                {createCourseMutation.isPending ? \"Creating...\" : \"Create Course\"}\n                              </Button>\n                            </DialogFooter>\n                          </form>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </div>\n                  \n                  {coursesLoading ? (\n                    <div className=\"grid gap-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <Card key={i} className=\"border border-gray-200\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex-1\">\n                                <Skeleton className=\"h-6 w-48 mb-2\" />\n                                <Skeleton className=\"h-4 w-64 mb-4\" />\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                <Skeleton className=\"h-8 w-16\" />\n                                <Skeleton className=\"h-8 w-16\" />\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"grid gap-4\">\n                      {courses.map((course: Course) => (\n                        <Card key={course.id} className=\"border border-gray-200 hover:shadow-md transition-shadow cursor-pointer\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex space-x-4 flex-1\">\n                                {course.thumbnailUrl && (\n                                  <div className=\"flex-shrink-0\">\n                                    <img \n                                      src={course.thumbnailUrl} \n                                      alt={course.name}\n                                      className=\"w-20 h-20 object-cover rounded-lg border border-gray-200\"\n                                      onError={(e) => {\n                                        e.currentTarget.style.display = 'none';\n                                      }}\n                                    />\n                                  </div>\n                                )}\n                                <div \n                                  className=\"flex-1 cursor-pointer\"\n                                  onClick={() => setSelectedCourse(course)}\n                                >\n                                  <div className=\"flex items-center space-x-2 mb-2\">\n                                    <FolderOpen className=\"h-5 w-5 text-purple-600\" />\n                                    <h4 className=\"text-lg font-medium text-gray-900\">{course.name}</h4>\n                                  </div>\n                                  {course.description && (\n                                    <p className=\"text-gray-600 text-sm mb-3\">{course.description}</p>\n                                  )}\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Badge variant={course.isActive ? \"default\" : \"secondary\"}>\n                                      {course.isActive ? \"Active\" : \"Inactive\"}\n                                    </Badge>\n                                    <span className=\"text-sm text-gray-500\">\n                                      Order: {course.orderIndex}\n                                    </span>\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"flex space-x-2 flex-wrap gap-2\">\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedCourse(course);\n                                  }}\n                                >\n                                  <FolderOpen className=\"h-4 w-4 mr-1\" />\n                                  View\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  className=\"bg-red-50 hover:bg-red-100 text-red-700 border-red-200\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedBatch(selectedBatch);\n                                    setSelectedCourse(course);\n                                    setSelectedSubject(null);\n                                    setIsCreateVideoDialogOpen(true);\n                                  }}\n                                >\n                                  <Video className=\"h-4 w-4 mr-1\" />\n                                  Add YT Video\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  className=\"bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-200\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedBatch(selectedBatch);\n                                    setSelectedCourse(course);\n                                    setSelectedSubject(null);\n                                    setIsCreatePlatformVideoDialogOpen(true);\n                                  }}\n                                >\n                                  <PlayCircle className=\"h-4 w-4 mr-1\" />\n                                  Add Platform Video\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleEditCourse(course);\n                                  }}\n                                >\n                                  <Edit2 className=\"h-4 w-4 mr-1\" />\n                                  Edit\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\" \n                                  className=\"text-red-600 hover:text-red-700\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleDeleteCourse(course.id);\n                                  }}\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                                  Delete\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                      {courses.length === 0 && (\n                        <div className=\"text-center py-8 text-gray-500\">\n                          <FolderOpen className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                          <p>No courses found. Create the first course to get started.</p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ) : !selectedSubject ? (\n                // Subject list view\n                <div>\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div className=\"flex items-center gap-3\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => setSelectedCourse(null)}\n                      >\n                        <ArrowLeft className=\"h-4 w-4 mr-1\" />\n                        Back\n                      </Button>\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\n                        Subjects in {selectedCourse.name}\n                      </h3>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Dialog open={isCreateSubjectDialogOpen} onOpenChange={setIsCreateSubjectDialogOpen}>\n                        <DialogTrigger asChild>\n                          <Button className=\"bg-primary hover:bg-blue-700\">\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            Create Subject\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[425px]\">\n                        <DialogHeader>\n                          <DialogTitle>Create New Subject</DialogTitle>\n                          <DialogDescription>\n                            Create a new subject folder within {selectedCourse.name}.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid gap-4 py-4\">\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"subject-name\" className=\"text-right\">\n                              Name\n                            </Label>\n                            <Input\n                              id=\"subject-name\"\n                              value={subjectForm.name}\n                              onChange={(e) => setSubjectForm({ ...subjectForm, name: e.target.value })}\n                              className=\"col-span-3\"\n                              placeholder=\"e.g., Calculus Basics\"\n                            />\n                          </div>\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"subject-description\" className=\"text-right\">\n                              Description\n                            </Label>\n                            <Textarea\n                              id=\"subject-description\"\n                              value={subjectForm.description}\n                              onChange={(e) => setSubjectForm({ ...subjectForm, description: e.target.value })}\n                              className=\"col-span-3\"\n                              placeholder=\"Brief description of the subject...\"\n                            />\n                          </div>\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"subject-order\" className=\"text-right\">\n                              Order\n                            </Label>\n                            <Input\n                              id=\"subject-order\"\n                              type=\"number\"\n                              value={subjectForm.orderIndex}\n                              onChange={(e) => setSubjectForm({ ...subjectForm, orderIndex: parseInt(e.target.value) || 0 })}\n                              className=\"col-span-3\"\n                              placeholder=\"0\"\n                            />\n                          </div>\n                        </div>\n                        <DialogFooter>\n                          <Button \n                            type=\"submit\" \n                            onClick={handleCreateSubject}\n                            disabled={createSubjectMutation.isPending}\n                          >\n                            {createSubjectMutation.isPending ? \"Creating...\" : \"Create Subject\"}\n                          </Button>\n                        </DialogFooter>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </div>\n                  \n                  {subjectsLoading ? (\n                    <div className=\"grid gap-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <Card key={i} className=\"border border-gray-200\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex-1\">\n                                <Skeleton className=\"h-6 w-48 mb-2\" />\n                                <Skeleton className=\"h-4 w-64 mb-4\" />\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                <Skeleton className=\"h-8 w-16\" />\n                                <Skeleton className=\"h-8 w-16\" />\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"grid gap-4\">\n                      {subjects.map((subject: Subject) => (\n                        <Card key={subject.id} className=\"border border-gray-200 hover:shadow-md transition-shadow cursor-pointer\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex justify-between items-start\">\n                              <div \n                                className=\"flex-1\"\n                                onClick={() => setSelectedSubject(subject)}\n                              >\n                                <div className=\"flex items-center space-x-2 mb-2\">\n                                  <FolderOpen className=\"h-5 w-5 text-green-600\" />\n                                  <h4 className=\"text-lg font-medium text-gray-900\">{subject.name}</h4>\n                                </div>\n                                {subject.description && (\n                                  <p className=\"text-gray-600 text-sm mb-3\">{subject.description}</p>\n                                )}\n                                <span className=\"text-sm text-gray-500\">\n                                  Order: {subject.orderIndex}\n                                </span>\n                              </div>\n                              <div className=\"flex space-x-2 flex-wrap gap-2\">\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedSubject(subject);\n                                  }}\n                                >\n                                  <FolderOpen className=\"h-4 w-4 mr-1\" />\n                                  View\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  className=\"bg-red-50 hover:bg-red-100 text-red-700 border-red-200\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedSubject(subject);\n                                    setIsCreateVideoDialogOpen(true);\n                                  }}\n                                >\n                                  <Video className=\"h-4 w-4 mr-1\" />\n                                  Add YT Video\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  className=\"bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-200\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedSubject(subject);\n                                    setIsCreatePlatformVideoDialogOpen(true);\n                                  }}\n                                >\n                                  <PlayCircle className=\"h-4 w-4 mr-1\" />\n                                  Add Platform Video\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleEditSubject(subject);\n                                  }}\n                                >\n                                  <Edit2 className=\"h-4 w-4 mr-1\" />\n                                  Edit\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\" \n                                  className=\"text-red-600 hover:text-red-700\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleDeleteSubject(subject.id);\n                                  }}\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                                  Delete\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                      {subjects.length === 0 && (\n                        <div className=\"text-center py-12\">\n                          <FolderOpen className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                          <p className=\"text-gray-600\">No subjects created yet. Create your first subject to get started.</p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ) : (\n                // Video list view\n                <div>\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div className=\"flex items-center gap-3\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => setSelectedSubject(null)}\n                      >\n                        <ArrowLeft className=\"h-4 w-4 mr-1\" />\n                        Back\n                      </Button>\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\n                        Videos in {selectedSubject.name}\n                      </h3>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Dialog open={isCreateVideoDialogOpen} onOpenChange={setIsCreateVideoDialogOpen}>\n                        <DialogTrigger asChild>\n                          <Button className=\"bg-red-50 hover:bg-red-100 text-red-700 border border-red-200\">\n                            <Video className=\"h-4 w-4 mr-2\" />\n                            Add YouTube Video\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[525px]\">\n                        <DialogHeader>\n                          <DialogTitle>Add New Video</DialogTitle>\n                          <DialogDescription>\n                            Add an unlisted YouTube video to {selectedSubject.name}.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid gap-4 py-4\">\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"video-title\" className=\"text-right\">\n                              Title\n                            </Label>\n                            <Input\n                              id=\"video-title\"\n                              value={videoForm.title}\n                              onChange={(e) => setVideoForm({ ...videoForm, title: e.target.value })}\n                              className=\"col-span-3\"\n                              placeholder=\"e.g., Introduction to Functions\"\n                            />\n                          </div>\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"video-description\" className=\"text-right\">\n                              Description\n                            </Label>\n                            <Textarea\n                              id=\"video-description\"\n                              value={videoForm.description}\n                              onChange={(e) => setVideoForm({ ...videoForm, description: e.target.value })}\n                              className=\"col-span-3\"\n                              placeholder=\"Brief description of the video content...\"\n                            />\n                          </div>\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"video-id\" className=\"text-right\">\n                              YouTube URL/ID\n                            </Label>\n                            <div className=\"col-span-3 space-y-2\">\n                              <Input\n                                id=\"video-id\"\n                                value={videoForm.youtubeVideoId}\n                                onChange={(e) => setVideoForm({ ...videoForm, youtubeVideoId: e.target.value })}\n                                placeholder=\"Paste any YouTube URL or Video ID\"\n                              />\n                              <p className=\"text-xs text-gray-500\">\n                                Accepts: youtube.com/watch?v=..., youtu.be/..., youtube.com/embed/..., or just the video ID\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"video-duration\" className=\"text-right\">\n                              Duration (min)\n                            </Label>\n                            <Input\n                              id=\"video-duration\"\n                              type=\"number\"\n                              value={videoForm.duration}\n                              onChange={(e) => setVideoForm({ ...videoForm, duration: parseInt(e.target.value) || 0 })}\n                              className=\"col-span-3\"\n                              placeholder=\"0\"\n                            />\n                          </div>\n                          <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"video-order\" className=\"text-right\">\n                              Order\n                            </Label>\n                            <Input\n                              id=\"video-order\"\n                              type=\"number\"\n                              value={videoForm.orderIndex}\n                              onChange={(e) => setVideoForm({ ...videoForm, orderIndex: parseInt(e.target.value) || 0 })}\n                              className=\"col-span-3\"\n                              placeholder=\"0\"\n                            />\n                          </div>\n                        </div>\n                        <DialogFooter>\n                          <Button \n                            type=\"submit\" \n                            onClick={handleCreateVideo}\n                            disabled={createVideoMutation.isPending}\n                          >\n                            {createVideoMutation.isPending ? \"Adding...\" : \"Add Video\"}\n                          </Button>\n                        </DialogFooter>\n                        </DialogContent>\n                      </Dialog>\n                      \n                      <Dialog open={isCreatePlatformVideoDialogOpen} onOpenChange={setIsCreatePlatformVideoDialogOpen}>\n                        <DialogTrigger asChild>\n                          <Button className=\"bg-blue-50 hover:bg-blue-100 text-blue-700 border border-blue-200\">\n                            <PlayCircle className=\"h-4 w-4 mr-2\" />\n                            Add Platform Video\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[700px]\">\n                          <DialogHeader>\n                            <DialogTitle>Add Platform Video</DialogTitle>\n                            <DialogDescription>\n                              Add a video from Facebook, Vimeo, Dailymotion, Twitch, or Telegram.\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"grid gap-4 py-4\">\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                              <Label htmlFor=\"platform-video-title\" className=\"text-right\">\n                                Title\n                              </Label>\n                              <Input\n                                id=\"platform-video-title\"\n                                value={platformVideoForm.title}\n                                onChange={(e) => setPlatformVideoForm({ ...platformVideoForm, title: e.target.value })}\n                                className=\"col-span-3\"\n                                placeholder=\"e.g., Introduction to Functions\"\n                              />\n                            </div>\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                              <Label htmlFor=\"platform-video-description\" className=\"text-right\">\n                                Description\n                              </Label>\n                              <Textarea\n                                id=\"platform-video-description\"\n                                value={platformVideoForm.description}\n                                onChange={(e) => setPlatformVideoForm({ ...platformVideoForm, description: e.target.value })}\n                                className=\"col-span-3\"\n                                placeholder=\"Brief description of the video content...\"\n                              />\n                            </div>\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                              <Label htmlFor=\"platform-type\" className=\"text-right\">\n                                Platform\n                              </Label>\n                              <Select \n                                value={platformVideoForm.platform} \n                                onValueChange={(value) => setPlatformVideoForm({ ...platformVideoForm, platform: value as \"facebook\" | \"vimeo\" | \"dailymotion\" | \"twitch\" | \"telegram\" })}\n                              >\n                                <SelectTrigger className=\"col-span-3\">\n                                  <SelectValue placeholder=\"Select video platform\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"facebook\">Facebook</SelectItem>\n                                  <SelectItem value=\"vimeo\">Vimeo</SelectItem>\n                                  <SelectItem value=\"dailymotion\">Dailymotion</SelectItem>\n                                  <SelectItem value=\"twitch\">Twitch</SelectItem>\n                                  <SelectItem value=\"telegram\">Telegram</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                              <Label htmlFor=\"platform-video-url\" className=\"text-right\">\n                                Video URL\n                              </Label>\n                              <div className=\"col-span-3 space-y-2\">\n                                <Input\n                                  id=\"platform-video-url\"\n                                  value={platformVideoForm.videoUrl}\n                                  onChange={(e) => setPlatformVideoForm({ ...platformVideoForm, videoUrl: e.target.value })}\n                                  placeholder=\"Paste the full video URL\"\n                                />\n                                <p className=\"text-xs text-gray-500\">\n                                  Paste the complete URL from the platform (e.g., facebook.com/watch?v=..., vimeo.com/...)\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                              <Label htmlFor=\"platform-video-duration\" className=\"text-right\">\n                                Duration (min)\n                              </Label>\n                              <Input\n                                id=\"platform-video-duration\"\n                                type=\"number\"\n                                value={platformVideoForm.duration}\n                                onChange={(e) => setPlatformVideoForm({ ...platformVideoForm, duration: parseInt(e.target.value) || 0 })}\n                                className=\"col-span-3\"\n                                placeholder=\"0\"\n                              />\n                            </div>\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                              <Label htmlFor=\"platform-video-order\" className=\"text-right\">\n                                Order\n                              </Label>\n                              <Input\n                                id=\"platform-video-order\"\n                                type=\"number\"\n                                value={platformVideoForm.orderIndex}\n                                onChange={(e) => setPlatformVideoForm({ ...platformVideoForm, orderIndex: parseInt(e.target.value) || 0 })}\n                                className=\"col-span-3\"\n                                placeholder=\"0\"\n                              />\n                            </div>\n                          </div>\n                          <DialogFooter>\n                            <Button \n                              type=\"submit\" \n                              onClick={handleCreatePlatformVideo}\n                              disabled={createPlatformVideoMutation.isPending}\n                            >\n                              {createPlatformVideoMutation.isPending ? \"Adding...\" : \"Add Platform Video\"}\n                            </Button>\n                          </DialogFooter>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </div>\n                  \n                  {videosLoading ? (\n                    <div className=\"grid gap-4\">\n                      {[...Array(3)].map((_, i) => (\n                        <Card key={i} className=\"border border-gray-200\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex-1\">\n                                <Skeleton className=\"h-6 w-48 mb-2\" />\n                                <Skeleton className=\"h-4 w-64 mb-4\" />\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                <Skeleton className=\"h-8 w-16\" />\n                                <Skeleton className=\"h-8 w-16\" />\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"grid gap-4\">\n                      {videos.map((video: VideoType) => (\n                        <Card key={video.id} className=\"border border-gray-200 hover:shadow-md transition-shadow\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center space-x-2 mb-2\">\n                                  <Video className=\"h-5 w-5 text-red-600\" />\n                                  <h4 className=\"text-lg font-medium text-gray-900\">{video.title}</h4>\n                                </div>\n                                {video.description && (\n                                  <p className=\"text-gray-600 text-sm mb-3\">{video.description}</p>\n                                )}\n                                <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                                  <span>Order: {video.orderIndex}</span>\n                                  {video.duration && <span>Duration: {video.duration} min</span>}\n                                  <span>Video ID: {video.youtubeVideoId}</span>\n                                </div>\n                              </div>\n                              <div className=\"flex space-x-2\">\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => {\n                                    handleEditVideo(video);\n                                  }}\n                                >\n                                  <Edit2 className=\"h-4 w-4 mr-1\" />\n                                  Edit\n                                </Button>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\" \n                                  className=\"text-red-600 hover:text-red-700\"\n                                  onClick={() => {\n                                    handleDeleteVideo(video.id);\n                                  }}\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                                  Delete\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                      {videos.length === 0 && (\n                        <div className=\"text-center py-12\">\n                          <Video className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                          <p className=\"text-gray-600\">No videos added yet. Add your first unlisted YouTube video to get started.</p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Edit Batch Dialog */}\n              <Dialog open={isEditBatchDialogOpen} onOpenChange={setIsEditBatchDialogOpen}>\n                <DialogContent className=\"sm:max-w-[425px]\">\n                  <DialogHeader>\n                    <DialogTitle>Edit Batch</DialogTitle>\n                    <DialogDescription>\n                      Update the batch information.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-name\" className=\"text-right\">\n                        Name\n                      </Label>\n                      <Input\n                        id=\"edit-name\"\n                        value={batchForm.name}\n                        onChange={(e) => setBatchForm({ ...batchForm, name: e.target.value })}\n                        className=\"col-span-3\"\n                        placeholder=\"e.g., Advanced Mathematics\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-description\" className=\"text-right\">\n                        Description\n                      </Label>\n                      <Textarea\n                        id=\"edit-description\"\n                        value={batchForm.description}\n                        onChange={(e) => setBatchForm({ ...batchForm, description: e.target.value })}\n                        className=\"col-span-3\"\n                        placeholder=\"Brief description of the batch...\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-thumbnailUrl\" className=\"text-right\">\n                        Thumbnail URL\n                      </Label>\n                      <Input\n                        id=\"edit-thumbnailUrl\"\n                        value={batchForm.thumbnailUrl}\n                        onChange={(e) => setBatchForm({ ...batchForm, thumbnailUrl: e.target.value })}\n                        className=\"col-span-3\"\n                        placeholder=\"https://example.com/image.jpg\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-isActive\" className=\"text-right\">\n                        Active\n                      </Label>\n                      <Switch\n                        id=\"edit-isActive\"\n                        checked={batchForm.isActive || false}\n                        onCheckedChange={(checked) => setBatchForm({ ...batchForm, isActive: checked })}\n                      />\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button \n                      type=\"submit\" \n                      onClick={handleUpdateBatch}\n                      disabled={updateBatchMutation.isPending}\n                    >\n                      {updateBatchMutation.isPending ? \"Updating...\" : \"Update Batch\"}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n\n              {/* Edit Subject Dialog */}\n              <Dialog open={isEditSubjectDialogOpen} onOpenChange={setIsEditSubjectDialogOpen}>\n                <DialogContent className=\"sm:max-w-[425px]\">\n                  <DialogHeader>\n                    <DialogTitle>Edit Subject</DialogTitle>\n                    <DialogDescription>\n                      Update the subject information.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-subject-name\" className=\"text-right\">\n                        Name\n                      </Label>\n                      <Input\n                        id=\"edit-subject-name\"\n                        value={subjectForm.name}\n                        onChange={(e) => setSubjectForm({ ...subjectForm, name: e.target.value })}\n                        className=\"col-span-3\"\n                        placeholder=\"e.g., Calculus Basics\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-subject-description\" className=\"text-right\">\n                        Description\n                      </Label>\n                      <Textarea\n                        id=\"edit-subject-description\"\n                        value={subjectForm.description}\n                        onChange={(e) => setSubjectForm({ ...subjectForm, description: e.target.value })}\n                        className=\"col-span-3\"\n                        placeholder=\"Brief description of the subject...\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-subject-order\" className=\"text-right\">\n                        Order\n                      </Label>\n                      <Input\n                        id=\"edit-subject-order\"\n                        type=\"number\"\n                        value={subjectForm.orderIndex}\n                        onChange={(e) => setSubjectForm({ ...subjectForm, orderIndex: parseInt(e.target.value) || 0 })}\n                        className=\"col-span-3\"\n                        placeholder=\"0\"\n                      />\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button \n                      type=\"submit\" \n                      onClick={handleUpdateSubject}\n                      disabled={updateSubjectMutation.isPending}\n                    >\n                      {updateSubjectMutation.isPending ? \"Updating...\" : \"Update Subject\"}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n\n              {/* Edit Video Dialog */}\n              <Dialog open={isEditVideoDialogOpen} onOpenChange={setIsEditVideoDialogOpen}>\n                <DialogContent className=\"sm:max-w-[525px]\">\n                  <DialogHeader>\n                    <DialogTitle>Edit Video</DialogTitle>\n                    <DialogDescription>\n                      Update the video information.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-video-title\" className=\"text-right\">\n                        Title\n                      </Label>\n                      <Input\n                        id=\"edit-video-title\"\n                        value={videoForm.title}\n                        onChange={(e) => setVideoForm({ ...videoForm, title: e.target.value })}\n                        className=\"col-span-3\"\n                        placeholder=\"e.g., Introduction to Functions\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-video-description\" className=\"text-right\">\n                        Description\n                      </Label>\n                      <Textarea\n                        id=\"edit-video-description\"\n                        value={videoForm.description}\n                        onChange={(e) => setVideoForm({ ...videoForm, description: e.target.value })}\n                        className=\"col-span-3\"\n                        placeholder=\"Brief description of the video content...\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-video-id\" className=\"text-right\">\n                        YouTube URL/ID\n                      </Label>\n                      <div className=\"col-span-3 space-y-2\">\n                        <Input\n                          id=\"edit-video-id\"\n                          value={videoForm.youtubeVideoId}\n                          onChange={(e) => setVideoForm({ ...videoForm, youtubeVideoId: e.target.value })}\n                          placeholder=\"Paste any YouTube URL or Video ID\"\n                        />\n                        <p className=\"text-xs text-gray-500\">\n                          Accepts: youtube.com/watch?v=..., youtu.be/..., youtube.com/embed/..., or just the video ID\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-video-duration\" className=\"text-right\">\n                        Duration (min)\n                      </Label>\n                      <Input\n                        id=\"edit-video-duration\"\n                        type=\"number\"\n                        value={videoForm.duration}\n                        onChange={(e) => setVideoForm({ ...videoForm, duration: parseInt(e.target.value) || 0 })}\n                        className=\"col-span-3\"\n                        placeholder=\"0\"\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor=\"edit-video-order\" className=\"text-right\">\n                        Order\n                      </Label>\n                      <Input\n                        id=\"edit-video-order\"\n                        type=\"number\"\n                        value={videoForm.orderIndex}\n                        onChange={(e) => setVideoForm({ ...videoForm, orderIndex: parseInt(e.target.value) || 0 })}\n                        className=\"col-span-3\"\n                        placeholder=\"0\"\n                      />\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button \n                      type=\"submit\" \n                      onClick={handleUpdateVideo}\n                      disabled={updateVideoMutation.isPending}\n                    >\n                      {updateVideoMutation.isPending ? \"Updating...\" : \"Update Video\"}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n\n              {/* Edit Course Dialog */}\n              <Dialog open={isEditCourseDialogOpen} onOpenChange={setIsEditCourseDialogOpen}>\n                <DialogContent className=\"sm:max-w-[425px]\">\n                  <DialogHeader>\n                    <DialogTitle>Edit Course</DialogTitle>\n                    <DialogDescription>\n                      Update the course information.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <form onSubmit={handleUpdateCourse}>\n                    <div className=\"grid gap-4 py-4\">\n                      <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"edit-course-name\" className=\"text-right\">\n                          Name\n                        </Label>\n                        <Input\n                          id=\"edit-course-name\"\n                          value={courseForm.name}\n                          onChange={(e) => setCourseForm({ ...courseForm, name: e.target.value })}\n                          className=\"col-span-3\"\n                          placeholder=\"e.g., Advanced Mathematics\"\n                          required\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"edit-course-description\" className=\"text-right\">\n                          Description\n                        </Label>\n                        <Textarea\n                          id=\"edit-course-description\"\n                          value={courseForm.description}\n                          onChange={(e) => setCourseForm({ ...courseForm, description: e.target.value })}\n                          className=\"col-span-3\"\n                          placeholder=\"Brief description of the course...\"\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"edit-course-thumbnail\" className=\"text-right\">\n                          Thumbnail URL\n                        </Label>\n                        <Input\n                          id=\"edit-course-thumbnail\"\n                          value={courseForm.thumbnailUrl}\n                          onChange={(e) => setCourseForm({ ...courseForm, thumbnailUrl: e.target.value })}\n                          className=\"col-span-3\"\n                          placeholder=\"https://example.com/image.jpg\"\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"edit-course-order\" className=\"text-right\">\n                          Order\n                        </Label>\n                        <Input\n                          id=\"edit-course-order\"\n                          type=\"number\"\n                          value={courseForm.orderIndex}\n                          onChange={(e) => setCourseForm({ ...courseForm, orderIndex: parseInt(e.target.value) || 0 })}\n                          className=\"col-span-3\"\n                          placeholder=\"0\"\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-4 items-center gap-4\">\n                        <Label htmlFor=\"edit-course-active\" className=\"text-right\">\n                          Active\n                        </Label>\n                        <Switch\n                          id=\"edit-course-active\"\n                          checked={courseForm.isActive}\n                          onCheckedChange={(checked) => setCourseForm({ ...courseForm, isActive: checked })}\n                        />\n                      </div>\n                    </div>\n                    <DialogFooter>\n                      <Button \n                        type=\"submit\" \n                        disabled={updateCourseMutation.isPending}\n                      >\n                        {updateCourseMutation.isPending ? \"Updating...\" : \"Update Course\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </TabsContent>\n\n            <TabsContent value=\"ads\" className=\"p-6 mt-0\">\n              <AdminAds />\n            </TabsContent>\n\n            <TabsContent value=\"brand-promotions\" className=\"p-6 mt-0\">\n              <BrandPromotions />\n            </TabsContent>\n\n            <TabsContent value=\"banner-ads\" className=\"p-6 mt-0\">\n              <BannerAdsControl />\n            </TabsContent>\n\n            <TabsContent value=\"multi-platform\" className=\"p-6 mt-0\">\n              <div className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Multi-Platform Video Management</h3>\n                    <p className=\"text-sm text-gray-600\">Manage videos from Vimeo, Facebook, Dailymotion, Twitch, and other platforms</p>\n                  </div>\n                  <Button onClick={() => setIsCreatePlatformVideoDialogOpen(true)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Platform Video\n                  </Button>\n                </div>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Video className=\"h-5 w-5\" />\n                      Platform Video Support\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-8 h-8 bg-red-100 rounded flex items-center justify-center\">\n                            <span className=\"text-red-600 font-bold\">Y</span>\n                          </div>\n                          <span className=\"font-medium\">YouTube</span>\n                        </div>\n                        <Badge variant=\"secondary\">Main Platform</Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-8 h-8 bg-blue-100 rounded flex items-center justify-center\">\n                            <span className=\"text-blue-600 font-bold\">V</span>\n                          </div>\n                          <span className=\"font-medium\">Vimeo</span>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-green-600 border-green-200\">✓ Supported</Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-8 h-8 bg-blue-100 rounded flex items-center justify-center\">\n                            <span className=\"text-blue-600 font-bold\">F</span>\n                          </div>\n                          <span className=\"font-medium\">Facebook</span>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-green-600 border-green-200\">✓ Supported</Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-8 h-8 bg-orange-100 rounded flex items-center justify-center\">\n                            <span className=\"text-orange-600 font-bold\">D</span>\n                          </div>\n                          <span className=\"font-medium\">Dailymotion</span>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-green-600 border-green-200\">✓ Supported</Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-8 h-8 bg-purple-100 rounded flex items-center justify-center\">\n                            <span className=\"text-purple-600 font-bold\">T</span>\n                          </div>\n                          <span className=\"font-medium\">Twitch</span>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-green-600 border-green-200\">✓ Supported</Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-8 h-8 bg-gray-100 rounded flex items-center justify-center\">\n                            <span className=\"text-gray-600 font-bold\">T</span>\n                          </div>\n                          <span className=\"font-medium\">Telegram</span>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-yellow-600 border-yellow-200\">⚠ Limited</Badge>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n                      <h4 className=\"font-medium text-blue-900 mb-2\">About Telegram Video Support</h4>\n                      <p className=\"text-sm text-blue-700\">\n                        Telegram videos from private channels (like t.me/c/2281650605/2514) cannot be directly embedded due to privacy restrictions. \n                        Users need to be members of the channel to view such content. Public Telegram videos may work with external video \n                        extraction tools, but this requires additional setup and may violate terms of service.\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Platform Videos List */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Video className=\"h-5 w-5\" />\n                      Existing Platform Videos ({platformVideos.length})\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {platformVideosLoading ? (\n                      <div className=\"space-y-4\">\n                        {[1, 2, 3].map((i) => (\n                          <Skeleton key={i} className=\"h-16 w-full\" />\n                        ))}\n                      </div>\n                    ) : platformVideos.length === 0 ? (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        <Video className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                        <p>No platform videos added yet</p>\n                        <p className=\"text-sm\">Click \"Add Platform Video\" to get started</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {platformVideos.map((video) => (\n                          <div key={video.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex items-center gap-4\">\n                              <div className=\"w-12 h-12 bg-gray-100 rounded flex items-center justify-center\">\n                                <span className=\"text-gray-600 font-bold\">\n                                  {video.platform === 'vimeo' ? 'V' : \n                                   video.platform === 'facebook' ? 'F' : \n                                   video.platform === 'dailymotion' ? 'D' : \n                                   video.platform === 'twitch' ? 'T' : \n                                   video.platform === 'telegram' ? 'T' : '?'}\n                                </span>\n                              </div>\n                              <div>\n                                <h4 className=\"font-medium\">{video.title}</h4>\n                                <p className=\"text-sm text-gray-600 capitalize\">\n                                  {video.platform} • {video.isActive ? 'Active' : 'Inactive'}\n                                </p>\n                                <p className=\"text-xs text-gray-500 truncate max-w-md\">\n                                  {video.videoUrl}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Badge variant={video.isActive ? \"default\" : \"secondary\"}>\n                                {video.isActive ? \"Active\" : \"Inactive\"}\n                              </Badge>\n                              <Button variant=\"outline\" size=\"sm\">\n                                <Edit2 className=\"h-3 w-3\" />\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 hover:text-red-700\">\n                                <Trash2 className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </Card>\n\n        {/* Platform Video Creation Dialog */}\n        <Dialog open={isCreatePlatformVideoDialogOpen} onOpenChange={setIsCreatePlatformVideoDialogOpen}>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>Add Platform Video</DialogTitle>\n              <DialogDescription>\n                Add a video from Vimeo, Facebook, Dailymotion, Twitch, or other supported platforms.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"platform-video-title\" className=\"text-right\">\n                  Title\n                </Label>\n                <Input\n                  id=\"platform-video-title\"\n                  value={platformVideoForm.title}\n                  onChange={(e) => setPlatformVideoForm({ ...platformVideoForm, title: e.target.value })}\n                  className=\"col-span-3\"\n                  placeholder=\"Video title\"\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"platform-video-platform\" className=\"text-right\">\n                  Platform\n                </Label>\n                <Select\n                  value={platformVideoForm.platform}\n                  onValueChange={(value) => setPlatformVideoForm({ ...platformVideoForm, platform: value as any })}\n                >\n                  <SelectTrigger className=\"col-span-3\">\n                    <SelectValue placeholder=\"Select platform\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"vimeo\">Vimeo</SelectItem>\n                    <SelectItem value=\"facebook\">Facebook</SelectItem>\n                    <SelectItem value=\"dailymotion\">Dailymotion</SelectItem>\n                    <SelectItem value=\"twitch\">Twitch</SelectItem>\n                    <SelectItem value=\"peertube\">PeerTube</SelectItem>\n                    <SelectItem value=\"rumble\">Rumble</SelectItem>\n                    <SelectItem value=\"telegram\">Telegram (Limited)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"platform-video-url\" className=\"text-right\">\n                  Video URL\n                </Label>\n                <Input\n                  id=\"platform-video-url\"\n                  value={platformVideoForm.videoUrl}\n                  onChange={(e) => setPlatformVideoForm({ ...platformVideoForm, videoUrl: e.target.value })}\n                  className=\"col-span-3\"\n                  placeholder=\"https://vimeo.com/123456789\"\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"platform-video-id\" className=\"text-right\">\n                  Video ID\n                </Label>\n                <Input\n                  id=\"platform-video-id\"\n                  value={platformVideoForm.videoId}\n                  onChange={(e) => setPlatformVideoForm({ ...platformVideoForm, videoId: e.target.value })}\n                  className=\"col-span-3\"\n                  placeholder=\"Optional: specific video ID\"\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"platform-video-description\" className=\"text-right\">\n                  Description\n                </Label>\n                <Textarea\n                  id=\"platform-video-description\"\n                  value={platformVideoForm.description}\n                  onChange={(e) => setPlatformVideoForm({ ...platformVideoForm, description: e.target.value })}\n                  className=\"col-span-3\"\n                  placeholder=\"Video description (optional)\"\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"platform-video-duration\" className=\"text-right\">\n                  Duration (seconds)\n                </Label>\n                <Input\n                  id=\"platform-video-duration\"\n                  type=\"number\"\n                  value={platformVideoForm.duration}\n                  onChange={(e) => setPlatformVideoForm({ ...platformVideoForm, duration: parseInt(e.target.value) || 0 })}\n                  className=\"col-span-3\"\n                  placeholder=\"0\"\n                />\n              </div>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"platform-video-order\" className=\"text-right\">\n                  Order\n                </Label>\n                <Input\n                  id=\"platform-video-order\"\n                  type=\"number\"\n                  value={platformVideoForm.orderIndex}\n                  onChange={(e) => setPlatformVideoForm({ ...platformVideoForm, orderIndex: parseInt(e.target.value) || 0 })}\n                  className=\"col-span-3\"\n                  placeholder=\"0\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button \n                type=\"submit\" \n                onClick={handleCreatePlatformVideo}\n                disabled={createPlatformVideoMutation.isPending}\n              >\n                {createPlatformVideoMutation.isPending ? \"Creating...\" : \"Create Platform Video\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}","size_bytes":114386},"client/src/pages/batch-subjects.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link, useParams } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport SubjectCard from \"@/components/subject-card\";\nimport CourseCard from \"@/components/course-card\";\nimport GridViewToggle, { getGridClassName } from \"@/components/grid-view-toggle\";\n\nimport { useViewMode } from \"@/hooks/use-view-mode\";\nimport { GraduationCap, ArrowLeft } from \"lucide-react\";\nimport type { Subject, Batch, Course } from \"@shared/schema\";\n\nexport default function BatchSubjects() {\n  const { batchId, courseId } = useParams<{ batchId: string; courseId?: string }>();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [viewMode, setViewMode] = useViewMode('batch-subjects-view-mode', 'grid-medium');\n\n  const { data: batch } = useQuery<Batch>({\n    queryKey: [`/api/batches/${batchId}`],\n    retry: false,\n  });\n\n  // Fetch courses if no courseId (showing batch level)\n  const { data: courses } = useQuery<Course[]>({\n    queryKey: [`/api/batches/${batchId}/courses`],\n    retry: false,\n    enabled: !courseId, // Only fetch when not viewing a specific course\n  });\n\n  const { data: subjects, isLoading, error } = useQuery<Subject[]>({\n    queryKey: courseId \n      ? [`/api/courses/${courseId}/subjects`]\n      : [`/api/batches/${batchId}/subjects`],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (error && isUnauthorizedError(error as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <header className=\"bg-white shadow-sm border-b\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center h-16\">\n              <div className=\"flex items-center\">\n                <Skeleton className=\"h-8 w-8 rounded-lg mr-4\" />\n                <div className=\"h-8 w-8 bg-primary rounded-lg flex items-center justify-center mr-3\">\n                  <GraduationCap className=\"text-white text-sm\" size={16} />\n                </div>\n                <div>\n                  <Skeleton className=\"h-6 w-32 mb-1\" />\n                  <Skeleton className=\"h-4 w-48\" />\n                </div>\n              </div>\n              <Skeleton className=\"h-8 w-8 rounded-full\" />\n            </div>\n          </div>\n        </header>\n\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <Card key={i} className=\"shadow-sm\">\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-12 w-12 rounded-xl mb-4\" />\n                  <Skeleton className=\"h-6 w-32 mb-2\" />\n                  <Skeleton className=\"h-4 w-full mb-4\" />\n                  <div className=\"mb-4\">\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <Skeleton className=\"h-4 w-16\" />\n                      <Skeleton className=\"h-4 w-8\" />\n                    </div>\n                    <Skeleton className=\"h-2 w-full rounded-full\" />\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <Skeleton className=\"h-4 w-16\" />\n                    <Skeleton className=\"h-4 w-16\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                </Button>\n              </Link>\n              <div className=\"h-8 w-8 bg-primary rounded-lg flex items-center justify-center mr-3\">\n                <GraduationCap className=\"text-white text-sm\" size={16} />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">{batch?.name}</h1>\n                <p className=\"text-sm text-gray-500\">Choose a subject to start learning</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {(user as any)?.profileImageUrl && (\n                <img \n                  src={(user as any).profileImageUrl} \n                  alt=\"User Profile\" \n                  className=\"w-8 h-8 rounded-full object-cover\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Show courses if no courseId (batch level) */}\n        {!courseId && courses && courses.length > 0 && (\n          <>\n            <div className=\"mb-6\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Courses</h2>\n                  <p className=\"text-gray-600\">Choose a course to view subjects</p>\n                </div>\n                <GridViewToggle \n                  viewMode={viewMode} \n                  onViewModeChange={setViewMode}\n                />\n              </div>\n            </div>\n            <div className={getGridClassName(viewMode)}>\n              {courses.map((course) => (\n                <CourseCard key={course.id} course={course} batchId={batchId} />\n              ))}\n            </div>\n          </>\n        )}\n\n        {/* Show subjects (either batch-level or course-level) */}\n        {subjects && subjects.length > 0 && (\n          <>\n            <div className=\"mb-6\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                    {courseId ? \"Course Subjects\" : \"Direct Subjects\"}\n                  </h2>\n                  <p className=\"text-gray-600\">Choose a subject to continue learning</p>\n                </div>\n                {(!courseId || !courses || courses.length === 0) && (\n                  <GridViewToggle \n                    viewMode={viewMode} \n                    onViewModeChange={setViewMode}\n                  />\n                )}\n              </div>\n            </div>\n            <div className={getGridClassName(viewMode)}>\n              {subjects.map((subject) => (\n                <SubjectCard key={subject.id} subject={subject} />\n              ))}\n            </div>\n          </>\n        )}\n\n        {/* No content available message */}\n        {(!subjects || subjects.length === 0) && (!courses || courses.length === 0) && (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <GraduationCap className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No content available</h3>\n              <p className=\"text-gray-600\">This batch doesn't have any courses or subjects yet.</p>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":7906},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport BatchCard from \"@/components/batch-card\";\nimport GridViewToggle, { getGridClassName } from \"@/components/grid-view-toggle\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\nimport { ResponsiveBannerAd } from \"@/components/responsive-banner-ad\";\n\nimport { useViewMode } from \"@/hooks/use-view-mode\";\nimport { GraduationCap, LogOut, Settings } from \"lucide-react\";\nimport type { Batch } from \"@shared/schema\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [viewMode, setViewMode] = useViewMode('home-view-mode', 'grid-medium');\n\n  const { data: batches, isLoading, error } = useQuery<Batch[]>({\n    queryKey: [\"/api/batches\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (error && isUnauthorizedError(error as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  const handleSignOut = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <header className=\"bg-white shadow-sm border-b\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center h-16\">\n              <div className=\"flex items-center\">\n                <div className=\"h-8 w-8 bg-primary rounded-lg flex items-center justify-center mr-3\">\n                  <GraduationCap className=\"text-white text-sm\" size={16} />\n                </div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">Learn Here Free</h1>\n              </div>\n              <Skeleton className=\"h-8 w-8 rounded-full\" />\n            </div>\n          </div>\n        </header>\n        \n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-8\">\n            <Skeleton className=\"h-8 w-64 mb-2\" />\n            <Skeleton className=\"h-5 w-48\" />\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"shadow-sm\">\n                <Skeleton className=\"w-full h-48\" />\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-6 w-32 mb-2\" />\n                  <Skeleton className=\"h-4 w-full mb-4\" />\n                  <div className=\"flex justify-between items-center\">\n                    <Skeleton className=\"h-4 w-20\" />\n                    <Skeleton className=\"h-4 w-12\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <AppLayout pageType=\"home\" showBannerAds={true} className=\"bg-gray-50\">\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"h-8 w-8 bg-primary rounded-lg flex items-center justify-center mr-3\">\n                <GraduationCap className=\"text-white text-sm\" size={16} />\n              </div>\n              <h1 className=\"text-xl font-semibold text-gray-900\">Learn Here Free</h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/admin\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Admin\n                </Button>\n              </Link>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"text-sm text-gray-600\">\n                  <span>{(user as any)?.firstName} {(user as any)?.lastName}</span>\n                </div>\n                {(user as any)?.profileImageUrl && (\n                  <img \n                    src={(user as any).profileImageUrl} \n                    alt=\"User Profile\" \n                    className=\"w-8 h-8 rounded-full object-cover\"\n                  />\n                )}\n              </div>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleSignOut}>\n                <LogOut className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-start mb-4\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Welcome back!</h2>\n              <p className=\"text-gray-600\">Choose your batch to continue learning</p>\n            </div>\n            <GridViewToggle \n              viewMode={viewMode} \n              onViewModeChange={setViewMode}\n            />\n          </div>\n        </div>\n\n        {batches && batches.length > 0 ? (\n          <div className={getGridClassName(viewMode)}>\n            {batches.map((batch) => (\n              <Link key={batch.id} href={`/batch/${batch.id}`}>\n                <BatchCard batch={batch} />\n              </Link>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <GraduationCap className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No batches available</h3>\n              <p className=\"text-gray-600\">Contact your administrator to get access to learning content.</p>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </AppLayout>\n  );\n}\n","size_bytes":6219},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertCircle, GraduationCap } from \"lucide-react\";\n\nexport default function Landing() {\n  const [error, setError] = useState<string | null>(null);\n\n  const handleGoogleSignIn = () => {\n    // Clear any previous errors and redirect to Google Sign-In\n    setError(null);\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-16 w-16 bg-primary rounded-full flex items-center justify-center mb-4\">\n            <GraduationCap className=\"text-white text-2xl\" size={32} />\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900\">Learn Here Free</h2>\n          <p className=\"mt-2 text-gray-600\">Access your personalized learning content</p>\n        </div>\n        \n        <Card className=\"shadow-lg\">\n          <CardContent className=\"pt-6\">\n            <Button \n              onClick={handleGoogleSignIn}\n              className=\"w-full flex justify-center items-center px-4 py-3 border border-gray-300 rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-colors\"\n              variant=\"outline\"\n            >\n              <svg className=\"w-5 h-5 mr-3\" viewBox=\"0 0 24 24\">\n                <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n              </svg>\n              Continue with Google\n            </Button>\n            \n            {error && (\n              <Alert className=\"mt-4\" variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <div className=\"mt-6 text-center text-sm text-gray-500\">\n              <p>Only authorized email addresses can access this platform</p>\n              <p className=\"mt-1\">Contact administrator for access requests</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2972},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/subject-videos.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link, useParams } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { GraduationCap, ArrowLeft, Play, Clock } from \"lucide-react\";\nimport GridViewToggle, { getGridClassName } from \"@/components/grid-view-toggle\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\n\nimport { useViewMode } from \"@/hooks/use-view-mode\";\nimport PlatformVideoTabs from \"@/components/platform-video-tabs\";\nimport type { Subject, Video, UserProgress, MultiPlatformVideo } from \"@shared/schema\";\n\nexport default function SubjectVideos() {\n  const { batchId, subjectId } = useParams<{ batchId: string; subjectId: string }>();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [viewMode, setViewMode] = useViewMode('subject-videos-view-mode', 'grid-medium');\n\n  const { data: subject } = useQuery<Subject>({\n    queryKey: [`/api/subjects/${subjectId}`],\n    retry: false,\n  });\n\n  const { data: videos, isLoading, error } = useQuery<Video[]>({\n    queryKey: [`/api/subjects/${subjectId}/videos`],\n    retry: false,\n  });\n\n  const { data: multiPlatformVideos } = useQuery<MultiPlatformVideo[]>({\n    queryKey: [`/api/subjects/${subjectId}/multi-platform-videos`],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (error && isUnauthorizedError(error as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  const formatDuration = (seconds: number | null) => {\n    if (!seconds) return \"N/A\";\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <header className=\"bg-white shadow-sm border-b\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center h-16\">\n              <div className=\"flex items-center\">\n                <Skeleton className=\"h-8 w-8 rounded-lg mr-4\" />\n                <div className=\"h-8 w-8 bg-primary rounded-lg flex items-center justify-center mr-3\">\n                  <GraduationCap className=\"text-white text-sm\" size={16} />\n                </div>\n                <div>\n                  <Skeleton className=\"h-6 w-32 mb-1\" />\n                  <Skeleton className=\"h-4 w-48\" />\n                </div>\n              </div>\n              <Skeleton className=\"h-8 w-8 rounded-full\" />\n            </div>\n          </div>\n        </header>\n\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"shadow-sm\">\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-6 w-32 mb-2\" />\n                  <Skeleton className=\"h-4 w-full mb-4\" />\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <Skeleton className=\"h-4 w-16\" />\n                    <Skeleton className=\"h-4 w-12\" />\n                  </div>\n                  <Skeleton className=\"h-2 w-full mb-4\" />\n                  <Skeleton className=\"h-8 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <AppLayout pageType=\"subject\" showBannerAds={true} className=\"bg-gray-50\">\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Link href={`/batch/${batchId}`}>\n                <a>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                    <ArrowLeft className=\"h-4 w-4\" />\n                  </Button>\n                </a>\n              </Link>\n              <div className=\"h-8 w-8 bg-primary rounded-lg flex items-center justify-center mr-3\">\n                <GraduationCap className=\"text-white text-sm\" size={16} />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">{subject?.name}</h1>\n                <p className=\"text-sm text-gray-500\">Choose a video to start learning</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {(user as any)?.profileImageUrl && (\n                <img \n                  src={(user as any).profileImageUrl} \n                  alt=\"User Profile\" \n                  className=\"w-8 h-8 rounded-full object-cover\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {subject?.description && (\n          <div className=\"mb-8 p-6 bg-white rounded-xl shadow-sm\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">About this course</h2>\n            <p className=\"text-gray-600\">{subject.description}</p>\n          </div>\n        )}\n\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Videos</h2>\n              <p className=\"text-gray-600\">Choose a video to continue learning</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Platform Video Tabs */}\n        <PlatformVideoTabs \n          youtubeVideos={videos || []}\n          multiPlatformVideos={multiPlatformVideos || []}\n        />\n      </main>\n    </AppLayout>\n  );\n}","size_bytes":6268},"client/src/pages/video-player.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link, useParams } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport SecureVideoEmbed from \"@/components/secure-video-embed\";\nimport { BetweenVideosAds, NativeAds } from \"@/components/ads/ad-placements\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\n\nimport { useAdSystem } from \"@/hooks/use-ad-system\";\nimport VideoAds from \"@/components/ads/video-ads\";\nimport BetweenVideosAd from \"@/components/ads/between-videos-ad\";\nimport PromotionalVideoAd from \"@/components/ads/promotional-video-ad\";\nimport { ArrowLeft, ChevronLeft, ChevronRight, Expand, Play, Pause } from \"lucide-react\";\nimport type { Video, Subject, UserProgress } from \"@shared/schema\";\n\nexport default function VideoPlayer() {\n  const { videoId } = useParams<{ videoId: string }>();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showPreRollAd, setShowPreRollAd] = useState(true);\n  const [showBetweenAd, setShowBetweenAd] = useState(false);\n  const [showPromotionalVideoAd, setShowPromotionalVideoAd] = useState(true);\n  const [videoStarted, setVideoStarted] = useState(false);\n  \n  // Ad system integration\n  const { configs: adConfigs } = useAdSystem();\n\n  const { data: video, isLoading: videoLoading } = useQuery<Video>({\n    queryKey: [`/api/videos/${videoId}`],\n    retry: false,\n  });\n\n  const { data: subject } = useQuery<Subject>({\n    queryKey: [`/api/subjects/${video?.subjectId}`],\n    enabled: !!video?.subjectId,\n    retry: false,\n  });\n\n  const { data: subjectVideos } = useQuery<Video[]>({\n    queryKey: [`/api/subjects/${video?.subjectId}/videos`],\n    enabled: !!video?.subjectId,\n    retry: false,\n  });\n\n  const { data: progress } = useQuery<UserProgress>({\n    queryKey: [`/api/progress/${videoId}`],\n    retry: false,\n  });\n\n  const updateProgressMutation = useMutation({\n    mutationFn: async (progressData: { videoId: string; completed: boolean; watchTimeSeconds: number }) => {\n      await apiRequest(\"POST\", \"/api/progress\", progressData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/progress/${videoId}`] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      }\n    },\n  });\n\n  const handleProgressUpdate = (watchTime: number, completed = false) => {\n    if (videoId) {\n      updateProgressMutation.mutate({\n        videoId,\n        completed,\n        watchTimeSeconds: watchTime,\n      });\n    }\n  };\n\n  const toggleFullscreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n      setIsFullscreen(true);\n    } else {\n      document.exitFullscreen();\n      setIsFullscreen(false);\n    }\n  };\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    document.addEventListener(\"fullscreenchange\", handleFullscreenChange);\n    return () => document.removeEventListener(\"fullscreenchange\", handleFullscreenChange);\n  }, []);\n\n  if (videoLoading) {\n    return (\n      <div className=\"min-h-screen bg-black\">\n        <div className=\"bg-gray-900 text-white\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center h-16\">\n              <div className=\"flex items-center\">\n                <Skeleton className=\"h-8 w-8 rounded-lg mr-4\" />\n                <div>\n                  <Skeleton className=\"h-6 w-64 mb-1\" />\n                  <Skeleton className=\"h-4 w-32\" />\n                </div>\n              </div>\n              <Skeleton className=\"h-8 w-8\" />\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"relative bg-black\" style={{ paddingBottom: \"56.25%\", height: 0 }}>\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center text-white\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\n              <p>Loading secure content...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!video) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Video not found</h3>\n            <p className=\"text-gray-600 mb-4\">The requested video could not be found.</p>\n            <Link href=\"/\">\n              <Button>Go Home</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const currentIndex = subjectVideos?.findIndex(v => v.id === videoId) ?? -1;\n  const previousVideo = currentIndex > 0 ? subjectVideos?.[currentIndex - 1] : null;\n  const nextVideo = currentIndex < (subjectVideos?.length ?? 0) - 1 ? subjectVideos?.[currentIndex + 1] : null;\n  const progressPercentage = progress?.completed \n    ? 100 \n    : video.duration \n      ? Math.round((progress?.watchTimeSeconds ?? 0) / video.duration * 100)\n      : 0;\n\n  return (\n    <>\n      {/* Promotional Video Ad (Pre-roll) */}\n      {showPromotionalVideoAd && !videoStarted && video && (\n        <PromotionalVideoAd\n          key={`promo-${videoId}`}\n          videoId={videoId}\n          subjectId={video.subjectId}\n          batchId={subject?.batchId}\n          placement=\"pre-roll\"\n          onAdComplete={() => {\n            setShowPromotionalVideoAd(false);\n            setVideoStarted(true);\n          }}\n        />\n      )}\n\n      {/* Fallback Pre-roll ad system */}\n      {!showPromotionalVideoAd && showPreRollAd && videoStarted && (\n        <VideoAds\n          type=\"pre-roll\"\n          adConfigs={adConfigs}\n          onComplete={() => setShowPreRollAd(false)}\n          skipAfter={5}\n        />\n      )}\n\n      <div className=\"min-h-screen bg-black\">\n      <div className=\"bg-gray-900 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Link href={subject ? `/batch/${subject.batchId}` : \"/\"}>\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-4 text-white hover:bg-gray-800\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                </Button>\n              </Link>\n              <div>\n                <h1 className=\"text-lg font-semibold\">{video.title}</h1>\n                <p className=\"text-sm text-gray-400\">{subject?.name}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n\n              <Button variant=\"ghost\" size=\"sm\" onClick={toggleFullscreen} className=\"text-white hover:bg-gray-800\">\n                <Expand className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-center bg-black py-8\">\n        <div className=\"w-full max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"relative bg-black rounded-lg overflow-hidden shadow-2xl border-4 border-gray-800\">\n            <SecureVideoEmbed \n              videoId={video.youtubeVideoId} \n              title={video.title}\n              onProgress={handleProgressUpdate}\n              adConfigs={adConfigs}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">{video.title}</h2>\n            {video.description && (\n              <p className=\"text-gray-600\">{video.description}</p>\n            )}\n            \n            <div className=\"flex items-center space-x-6 mt-4 text-sm text-gray-500\">\n              {video.duration && (\n                <span>Duration: {Math.floor(video.duration / 60)}:{(video.duration % 60).toString().padStart(2, '0')}</span>\n              )}\n            </div>\n          </div>\n\n          {/* Native ads between video and content */}\n          <NativeAds adConfigs={adConfigs} />\n          \n          {/* Between videos ads */}\n          <BetweenVideosAds adConfigs={adConfigs} />\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <div className=\"flex justify-between items-center mb-4\">\n                {previousVideo ? (\n                  <Link href={`/video/${previousVideo.id}`}>\n                    <Button variant=\"outline\" className=\"flex items-center\">\n                      <ChevronLeft className=\"h-4 w-4 mr-2\" />\n                      Previous\n                    </Button>\n                  </Link>\n                ) : (\n                  <div />\n                )}\n                \n                <div className=\"text-sm text-gray-500\">\n                  Video {currentIndex + 1} of {subjectVideos?.length}\n                </div>\n                \n                {nextVideo ? (\n                  <Button \n                    onClick={() => setShowBetweenAd(true)}\n                    className=\"flex items-center\"\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                ) : (\n                  <div />\n                )}\n              </div>\n              \n              <div className=\"mb-4\">\n                <div className=\"flex justify-between text-sm text-gray-600 mb-1\">\n                  <span>Progress</span>\n                  <span>{progressPercentage}%</span>\n                </div>\n                <Progress value={progressPercentage} className=\"w-full\" />\n              </div>\n            </div>\n\n            <div className=\"bg-gray-50 rounded-xl p-4\">\n              <h3 className=\"font-semibold text-gray-900 mb-4\">Course Playlist</h3>\n              <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                {subjectVideos?.map((playlistVideo, index) => (\n                  <Link key={playlistVideo.id} href={`/video/${playlistVideo.id}`}>\n                    <div className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${\n                      playlistVideo.id === videoId \n                        ? 'bg-white border-l-4 border-primary' \n                        : 'hover:bg-white'\n                    }`}>\n                      <div className={`h-8 w-8 rounded flex items-center justify-center text-sm font-medium ${\n                        playlistVideo.id === videoId \n                          ? 'bg-primary text-white' \n                          : 'bg-primary bg-opacity-10 text-primary'\n                      }`}>\n                        {index + 1}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900 truncate\">{playlistVideo.title}</p>\n                        {playlistVideo.duration && (\n                          <p className=\"text-xs text-gray-500\">\n                            {Math.floor(playlistVideo.duration / 60)}:{(playlistVideo.duration % 60).toString().padStart(2, '0')}\n                          </p>\n                        )}\n                      </div>\n                      {playlistVideo.id === videoId ? (\n                        <Pause className=\"text-primary text-xs\" size={12} />\n                      ) : (\n                        <Play className=\"text-gray-400 text-xs\" size={12} />\n                      )}\n                    </div>\n                  </Link>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    {/* Between Videos Ad Modal */}\n    {showBetweenAd && nextVideo && (\n      <BetweenVideosAd\n        onAdComplete={() => {\n          setShowBetweenAd(false);\n          window.location.href = `/video/${nextVideo.id}`;\n        }}\n        onSkip={() => {\n          setShowBetweenAd(false);\n          window.location.href = `/video/${nextVideo.id}`;\n        }}\n        nextVideoTitle={nextVideo.title}\n      />\n    )}\n\n    {/* Pre-roll Ad */}\n    {showPreRollAd && (\n      <VideoAds\n        type=\"pre-roll\"\n        adConfigs={adConfigs}\n        skipAfter={7}\n        onComplete={() => setShowPreRollAd(false)}\n        onSkip={() => setShowPreRollAd(false)}\n      />\n    )}\n    </>\n  );\n}\n","size_bytes":13163},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ads/ad-manager.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { X, Play, ExternalLink } from \"lucide-react\";\n\nexport interface AdConfig {\n  id: string;\n  type: 'adsense' | 'adsterra' | 'promotional';\n  format: 'banner' | 'video' | 'popup' | 'native';\n  placement: 'header' | 'sidebar' | 'between-videos' | 'pause-overlay' | 'footer' | 'native';\n  code?: string;\n  vastTag?: string;\n  imageUrl?: string;\n  clickUrl?: string;\n  title?: string;\n  description?: string;\n  enabled: boolean;\n  dimensions?: {\n    width: number;\n    height: number;\n  };\n}\n\ninterface AdManagerProps {\n  config: AdConfig;\n  onAdClick?: () => void;\n  onAdClose?: () => void;\n  className?: string;\n}\n\nexport function AdManager({ config, onAdClick, onAdClose, className = \"\" }: AdManagerProps) {\n  const [isVisible, setIsVisible] = useState(config.enabled);\n  const [isLoading, setIsLoading] = useState(true);\n  const adRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!config.enabled) {\n      setIsVisible(false);\n      return;\n    }\n\n    // Load ad content based on type\n    if (config.type === 'adsense') {\n      loadAdSenseAd();\n    } else if (config.type === 'adsterra') {\n      loadAdsterraAd();\n    } else if (config.type === 'promotional') {\n      setIsLoading(false);\n    }\n\n    // Cleanup function\n    return () => {\n      // Clean up any DOM manipulations safely\n      if (adRef.current) {\n        try {\n          while (adRef.current.firstChild) {\n            adRef.current.removeChild(adRef.current.firstChild);\n          }\n        } catch (error) {\n          // Ignore cleanup errors\n        }\n      }\n    };\n  }, [config]);\n\n  const loadAdSenseAd = () => {\n    if (!config.code || !adRef.current) {\n      setIsLoading(false);\n      return;\n    }\n    \n    try {\n      const script = document.createElement('script');\n      script.async = true;\n      script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js';\n      script.crossOrigin = 'anonymous';\n      \n      script.onload = () => {\n        try {\n          // @ts-ignore\n          (window.adsbygoogle = window.adsbygoogle || []).push({});\n          setIsLoading(false);\n        } catch (e) {\n          console.error('AdSense loading error:', e);\n          setIsLoading(false);\n        }\n      };\n      \n      script.onerror = () => {\n        console.error('Failed to load AdSense script');\n        setIsLoading(false);\n      };\n      \n      if (!document.querySelector('script[src*=\"adsbygoogle\"]')) {\n        document.head.appendChild(script);\n      }\n      \n      // Create ad unit safely\n      const adDiv = document.createElement('div');\n      adDiv.innerHTML = config.code;\n      adRef.current.appendChild(adDiv);\n      \n    } catch (error) {\n      console.error('AdSense setup error:', error);\n      setIsLoading(false);\n    }\n  };\n\n  const loadAdsterraAd = () => {\n    try {\n      if (config.code && adRef.current) {\n        const script = document.createElement('script');\n        script.async = true;\n        script.src = config.code;\n        \n        script.onload = () => {\n          setIsLoading(false);\n        };\n        \n        script.onerror = () => {\n          console.error('Adsterra loading error');\n          setIsLoading(false);\n        };\n        \n        if (!document.querySelector(`script[src=\"${config.code}\"]`)) {\n          document.head.appendChild(script);\n        }\n      }\n      setIsLoading(false);\n    } catch (error) {\n      console.error('Adsterra setup error:', error);\n      setIsLoading(false);\n    }\n  };\n\n  const handleAdClick = () => {\n    if (config.clickUrl) {\n      window.open(config.clickUrl, '_blank');\n    }\n    onAdClick?.();\n  };\n\n  const handleClose = () => {\n    setIsVisible(false);\n    onAdClose?.();\n  };\n\n  if (!isVisible) return null;\n\n  // Render based on ad format\n  switch (config.format) {\n    case 'popup':\n      return (\n        <div className={`fixed inset-0 bg-black/50 flex items-center justify-center z-[2000] ${className}`}>\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md mx-4 relative\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClose}\n              className=\"absolute top-2 right-2 p-1\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n            \n            {config.type === 'promotional' ? (\n              <div className=\"text-center\">\n                {config.imageUrl && (\n                  <img \n                    src={config.imageUrl} \n                    alt={config.title}\n                    className=\"w-full h-32 object-cover rounded mb-4\"\n                  />\n                )}\n                <h3 className=\"text-lg font-semibold mb-2\">{config.title}</h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">{config.description}</p>\n                <Button onClick={handleAdClick} className=\"w-full\">\n                  Learn More <ExternalLink className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </div>\n            ) : (\n              <div ref={adRef} className=\"text-center\">\n                {isLoading ? (\n                  <div className=\"animate-pulse bg-gray-200 h-32 rounded\" />\n                ) : null}\n              </div>\n            )}\n          </div>\n        </div>\n      );\n\n    case 'banner':\n      return (\n        <div className={`ad-container ${className}`}>\n          {config.type === 'promotional' ? (\n            <div \n              className=\"border rounded-lg p-4 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n              onClick={handleAdClick}\n            >\n              <div className=\"flex items-center space-x-4\">\n                {config.imageUrl && (\n                  <img \n                    src={config.imageUrl} \n                    alt={config.title}\n                    className=\"w-16 h-16 object-cover rounded\"\n                  />\n                )}\n                <div className=\"flex-1\">\n                  <h4 className=\"font-medium\">{config.title}</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">{config.description}</p>\n                </div>\n                <ExternalLink className=\"h-4 w-4 text-gray-400\" />\n              </div>\n            </div>\n          ) : (\n            <div ref={adRef}>\n              {isLoading && (\n                <div className=\"animate-pulse bg-gray-200 h-24 rounded\" />\n              )}\n            </div>\n          )}\n        </div>\n      );\n\n    case 'video':\n      return (\n        <div className={`video-ad-container ${className}`}>\n          <div className=\"relative bg-black rounded-lg overflow-hidden\">\n            {config.vastTag ? (\n              <div className=\"w-full h-48 bg-gray-900 rounded flex items-center justify-center\">\n                <div className=\"text-white text-center\">\n                  <Play className=\"h-12 w-12 mx-auto mb-2\" />\n                  <p>Video Ad Loading...</p>\n                </div>\n              </div>\n            ) : (\n              <div ref={adRef} className=\"w-full h-48\">\n                {isLoading && (\n                  <div className=\"animate-pulse bg-gray-200 h-full rounded flex items-center justify-center\">\n                    <Play className=\"h-12 w-12 text-gray-400\" />\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      );\n\n    case 'native':\n      return (\n        <div className={`native-ad ${className}`}>\n          {config.type === 'promotional' ? (\n            <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n                    <ExternalLink className=\"h-4 w-4 text-white\" />\n                  </div>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-xs text-blue-600 dark:text-blue-400 uppercase tracking-wide\">Sponsored</p>\n                  <h4 className=\"font-medium text-gray-900 dark:text-white\">{config.title}</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">{config.description}</p>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={handleAdClick}\n                    className=\"mt-2 text-blue-600 border-blue-300 hover:bg-blue-50\"\n                  >\n                    Learn More\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div ref={adRef}>\n              {isLoading && (\n                <div className=\"animate-pulse bg-gray-200 h-20 rounded\" />\n              )}\n            </div>\n          )}\n        </div>\n      );\n\n    default:\n      return null;\n  }\n}\n\nexport default AdManager;","size_bytes":9095},"client/src/hooks/use-ad-system.tsx":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { AdConfig } from '@/components/ads/ad-manager';\n\n// Default ad configurations for the system\nexport const defaultAdConfigs: AdConfig[] = [\n  // AdSense Configurations\n  {\n    id: 'adsense-header-banner',\n    type: 'adsense',\n    format: 'banner',\n    placement: 'header',\n    code: `<ins class=\"adsbygoogle\"\n                style=\"display:block\"\n                data-ad-client=\"ca-pub-XXXXXXXXXXXXXXXX\"\n                data-ad-slot=\"XXXXXXXXXX\"\n                data-ad-format=\"auto\"\n                data-full-width-responsive=\"true\"></ins>`,\n    enabled: true,\n    dimensions: { width: 728, height: 90 }\n  },\n  {\n    id: 'adsense-sidebar',\n    type: 'adsense',\n    format: 'banner',\n    placement: 'sidebar',\n    code: `<ins class=\"adsbygoogle\"\n                style=\"display:block\"\n                data-ad-client=\"ca-pub-XXXXXXXXXXXXXXXX\"\n                data-ad-slot=\"XXXXXXXXXX\"\n                data-ad-format=\"rectangle\"></ins>`,\n    enabled: true,\n    dimensions: { width: 300, height: 250 }\n  },\n  {\n    id: 'adsense-native',\n    type: 'adsense',\n    format: 'native',\n    placement: 'between-videos',\n    code: `<ins class=\"adsbygoogle\"\n                style=\"display:block\"\n                data-ad-format=\"fluid\"\n                data-ad-layout-key=\"-gw-3+1f-3d+2z\"\n                data-ad-client=\"ca-pub-XXXXXXXXXXXXXXXX\"\n                data-ad-slot=\"XXXXXXXXXX\"></ins>`,\n    enabled: true\n  },\n\n  // Video Ads - Pre-roll (Before videos)\n  {\n    id: 'adsterra-video-preroll',\n    type: 'adsterra',\n    format: 'video',\n    placement: 'pre-roll',\n    vastTag: 'https://www.videosprofitnetwork.com/watch.xml?key=YOUR_KEY&w=640&h=360&cb=[CACHE_BUSTER]&url=[PAGE_URL]',\n    enabled: true,\n    skipAfter: 7,\n    dimensions: { width: 640, height: 360 }\n  },\n  {\n    id: 'propellerads-video-preroll',\n    type: 'propellerads',\n    format: 'video',\n    placement: 'pre-roll',\n    vastTag: 'https://nep.propellerads.com/ag/tags?key=YOUR_PROPELLER_KEY&w=640&h=360',\n    enabled: false,\n    skipAfter: 7,\n    dimensions: { width: 640, height: 360 }\n  },\n  \n  // Video Ads - Between videos (After completing a video)\n  {\n    id: 'adsterra-video-between',\n    type: 'adsterra',\n    format: 'video',\n    placement: 'between-videos',\n    vastTag: 'https://www.videosprofitnetwork.com/watch.xml?key=YOUR_KEY_2&w=640&h=360&cb=[CACHE_BUSTER]&url=[PAGE_URL]',\n    enabled: true,\n    skipAfter: 7,\n    dimensions: { width: 640, height: 360 }\n  },\n  {\n    id: 'propellerads-video-between',\n    type: 'propellerads',\n    format: 'video',\n    placement: 'between-videos',\n    vastTag: 'https://nep.propellerads.com/ag/tags?key=YOUR_PROPELLER_KEY_2&w=640&h=360',\n    enabled: false,\n    skipAfter: 7,\n    dimensions: { width: 640, height: 360 }\n  },\n  {\n    id: 'adsterra-popup',\n    type: 'adsterra',\n    format: 'popup',\n    placement: 'pause-overlay',\n    code: 'https://a.realsrv.com/ad-provider.js',\n    enabled: true,\n    dimensions: { width: 400, height: 300 }\n  },\n  {\n    id: 'adsterra-banner',\n    type: 'adsterra',\n    format: 'banner',\n    placement: 'footer',\n    code: `<script type=\"text/javascript\">\n        atOptions = {\n          'key' : 'YOUR_ADSTERRA_KEY',\n          'format' : 'iframe',\n          'height' : 90,\n          'width' : 728,\n          'params' : {}\n        };\n        document.write('<scr' + 'ipt type=\"text/javascript\" src=\"//www.topcreativeformat.com/YOUR_ADSTERRA_KEY/invoke.js\"></scr' + 'ipt>');\n      </script>`,\n    enabled: true,\n    dimensions: { width: 728, height: 90 }\n  },\n\n  // Promotional Ads\n  {\n    id: 'promo-course-upgrade',\n    type: 'promotional',\n    format: 'popup',\n    placement: 'pause-overlay',\n    title: 'Upgrade to Premium',\n    description: 'Get unlimited access to all courses and remove ads!',\n    imageUrl: 'https://via.placeholder.com/400x200/3b82f6/ffffff?text=Premium+Course',\n    clickUrl: '/pricing',\n    enabled: true,\n    dimensions: { width: 400, height: 300 }\n  },\n  {\n    id: 'promo-new-course',\n    type: 'promotional',\n    format: 'native',\n    placement: 'native',\n    title: 'New Course Available',\n    description: 'Learn advanced programming concepts in our latest course series.',\n    imageUrl: 'https://via.placeholder.com/300x150/10b981/ffffff?text=New+Course',\n    clickUrl: '/courses/new',\n    enabled: true\n  },\n  {\n    id: 'promo-sidebar-banner',\n    type: 'promotional',\n    format: 'banner',\n    placement: 'sidebar',\n    title: 'Join Our Community',\n    description: 'Connect with fellow learners and get help with your studies.',\n    imageUrl: 'https://via.placeholder.com/300x200/f59e0b/ffffff?text=Community',\n    clickUrl: '/community',\n    enabled: true,\n    dimensions: { width: 300, height: 200 }\n  }\n];\n\nexport interface AdSystemState {\n  configs: AdConfig[];\n  isLoading: boolean;\n  error: string | null;\n  revenue: {\n    daily: number;\n    monthly: number;\n    total: number;\n  };\n}\n\nexport function useAdSystem() {\n  const [adState, setAdState] = useState<AdSystemState>({\n    configs: defaultAdConfigs,\n    isLoading: false,\n    error: null,\n    revenue: {\n      daily: 0,\n      monthly: 0,\n      total: 0\n    }\n  });\n\n  // Load ad configurations from API\n  const loadAdConfigs = useCallback(async () => {\n    setAdState(prev => ({ ...prev, isLoading: true, error: null }));\n    \n    try {\n      const response = await fetch('/api/admin/ads');\n      if (response.ok) {\n        const data = await response.json();\n        setAdState(prev => ({\n          ...prev,\n          configs: data.configs || defaultAdConfigs,\n          revenue: data.revenue || prev.revenue,\n          isLoading: false\n        }));\n      } else {\n        // Use default configs if API fails\n        setAdState(prev => ({ ...prev, isLoading: false }));\n      }\n    } catch (error) {\n      console.error('Failed to load ad configs:', error);\n      setAdState(prev => ({ \n        ...prev, \n        isLoading: false, \n        error: 'Failed to load ad configurations'\n      }));\n    }\n  }, []);\n\n  // Update ad configuration\n  const updateAdConfig = useCallback(async (adId: string, updates: Partial<AdConfig>) => {\n    setAdState(prev => ({\n      ...prev,\n      configs: prev.configs.map(config =>\n        config.id === adId ? { ...config, ...updates } : config\n      )\n    }));\n\n    try {\n      await fetch(`/api/admin/ads/${adId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates)\n      });\n    } catch (error) {\n      console.error('Failed to update ad config:', error);\n    }\n  }, []);\n\n  // Toggle ad enabled state\n  const toggleAd = useCallback((adId: string) => {\n    updateAdConfig(adId, { \n      enabled: !adState.configs.find(c => c.id === adId)?.enabled \n    });\n  }, [adState.configs, updateAdConfig]);\n\n  // Get ads by placement\n  const getAdsByPlacement = useCallback((placement: AdConfig['placement']) => {\n    return adState.configs.filter(config => \n      config.placement === placement && config.enabled\n    );\n  }, [adState.configs]);\n\n  // Track ad impression\n  const trackImpression = useCallback(async (adId: string) => {\n    try {\n      await fetch('/api/admin/ads/track', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ adId, event: 'impression' })\n      });\n    } catch (error) {\n      console.error('Failed to track impression:', error);\n    }\n  }, []);\n\n  // Track ad click\n  const trackClick = useCallback(async (adId: string) => {\n    try {\n      await fetch('/api/admin/ads/track', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ adId, event: 'click' })\n      });\n    } catch (error) {\n      console.error('Failed to track click:', error);\n    }\n  }, []);\n\n  // Load configs on mount\n  useEffect(() => {\n    loadAdConfigs();\n  }, [loadAdConfigs]);\n\n  return {\n    ...adState,\n    updateAdConfig,\n    toggleAd,\n    getAdsByPlacement,\n    trackImpression,\n    trackClick,\n    refresh: loadAdConfigs\n  };\n}\n\n// Hook for video ads specifically\nexport function useVideoAds() {\n  const { configs, trackImpression, trackClick } = useAdSystem();\n  \n  const getPreRollAds = useCallback(() => {\n    return configs.filter(config => \n      config.format === 'video' && \n      config.placement === 'between-videos' && \n      config.enabled\n    );\n  }, [configs]);\n\n  const getPauseOverlayAds = useCallback(() => {\n    return configs.filter(config => \n      config.placement === 'pause-overlay' && \n      config.enabled\n    );\n  }, [configs]);\n\n  return {\n    preRollAds: getPreRollAds(),\n    pauseOverlayAds: getPauseOverlayAds(),\n    trackImpression,\n    trackClick\n  };\n}","size_bytes":8719},"client/src/pages/admin/ads.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useAdSystem } from \"@/hooks/use-ad-system\";\nimport AdSetupGuide from \"@/components/ads/ad-setup-guide\";\nimport { Settings, DollarSign, Eye, MousePointer, TrendingUp } from \"lucide-react\";\n\nexport default function AdminAds() {\n  const { configs, revenue, updateAdConfig, toggleAd } = useAdSystem();\n  const [selectedAd, setSelectedAd] = useState<string | null>(null);\n\n  const adsByType = {\n    adsense: configs.filter(ad => ad.type === 'adsense'),\n    adsterra: configs.filter(ad => ad.type === 'adsterra'),\n    propellerads: configs.filter(ad => ad.type === 'propellerads'),\n    promotional: configs.filter(ad => ad.type === 'promotional')\n  };\n\n  const handleUpdateAd = (adId: string, field: string, value: any) => {\n    updateAdConfig(adId, { [field]: value });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Ad Management</h1>\n          <p className=\"text-gray-600\">Manage your monetization settings and ad configurations</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant=\"outline\" className=\"text-green-600\">\n            {configs.filter(ad => ad.enabled).length} Active\n          </Badge>\n          <Badge variant=\"secondary\">\n            ${revenue.monthly.toFixed(2)} Monthly\n          </Badge>\n        </div>\n      </div>\n\n      {/* Revenue Dashboard */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"h-5 w-5 text-green-500\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Daily Revenue</p>\n                <p className=\"text-2xl font-bold\">${revenue.daily.toFixed(2)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-5 w-5 text-blue-500\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Monthly Revenue</p>\n                <p className=\"text-2xl font-bold\">${revenue.monthly.toFixed(2)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Eye className=\"h-5 w-5 text-purple-500\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Impressions</p>\n                <p className=\"text-2xl font-bold\">12.5K</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <MousePointer className=\"h-5 w-5 text-orange-500\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Click Rate</p>\n                <p className=\"text-2xl font-bold\">2.3%</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"configs\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"configs\">Ad Configurations</TabsTrigger>\n          <TabsTrigger value=\"setup\">Setup Guide</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"configs\" className=\"space-y-6\">\n          {/* AdSense */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                <span>Google AdSense</span>\n                <Badge variant=\"outline\">Premium CPM</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {adsByType.adsense.map(ad => (\n                  <div key={ad.id} className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Switch\n                          checked={ad.enabled}\n                          onCheckedChange={() => toggleAd(ad.id)}\n                        />\n                        <div>\n                          <h4 className=\"font-medium\">{ad.format.charAt(0).toUpperCase() + ad.format.slice(1)} Ad</h4>\n                          <p className=\"text-sm text-gray-600\">{ad.placement}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={ad.enabled ? \"default\" : \"secondary\"}>\n                          {ad.enabled ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setSelectedAd(selectedAd === ad.id ? null : ad.id)}\n                        >\n                          <Settings className=\"h-4 w-4 mr-1\" />\n                          {selectedAd === ad.id ? 'Close' : 'Edit Code'}\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    {selectedAd === ad.id && (\n                      <div className=\"ml-4 p-6 bg-blue-50 rounded-lg border-l-4 border-blue-500 space-y-4\">\n                        <h5 className=\"font-semibold text-blue-900\">📝 Paste Your AdSense Code Here</h5>\n                        <div className=\"space-y-3\">\n                          <Label htmlFor={`code-${ad.id}`} className=\"text-blue-800\">\n                            AdSense HTML Code (Replace ca-pub-XXXXXXXXXXXXXXXX with your Publisher ID)\n                          </Label>\n                          <Textarea\n                            id={`code-${ad.id}`}\n                            value={ad.code || ''}\n                            onChange={(e) => handleUpdateAd(ad.id, 'code', e.target.value)}\n                            rows={8}\n                            className=\"font-mono text-sm\"\n                            placeholder=\"Paste your AdSense code here...\"\n                          />\n                          <div className=\"text-sm text-blue-700 bg-blue-100 p-3 rounded\">\n                            💡 <strong>How to get this code:</strong><br/>\n                            1. Go to AdSense Dashboard → Ads → By ad unit<br/>\n                            2. Create new {ad.format} ad unit<br/>\n                            3. Copy the HTML code<br/>\n                            4. Paste it above and click Save\n                          </div>\n                          <Button \n                            onClick={() => setSelectedAd(null)} \n                            className=\"bg-blue-600 hover:bg-blue-700\"\n                          >\n                            Save AdSense Code\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Adsterra */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                <span>Adsterra Network</span>\n                <Badge variant=\"outline\">Fast Approval</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {adsByType.adsterra.map(ad => (\n                  <div key={ad.id} className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Switch\n                          checked={ad.enabled}\n                          onCheckedChange={() => toggleAd(ad.id)}\n                        />\n                        <div>\n                          <h4 className=\"font-medium\">{ad.format.charAt(0).toUpperCase() + ad.format.slice(1)} Ad</h4>\n                          <p className=\"text-sm text-gray-600\">{ad.placement}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={ad.enabled ? \"default\" : \"secondary\"}>\n                          {ad.enabled ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setSelectedAd(selectedAd === ad.id ? null : ad.id)}\n                        >\n                          <Settings className=\"h-4 w-4 mr-1\" />\n                          {selectedAd === ad.id ? 'Close' : 'Edit Code'}\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    {selectedAd === ad.id && (\n                      <div className=\"ml-4 p-6 bg-green-50 rounded-lg border-l-4 border-green-500 space-y-4\">\n                        <h5 className=\"font-semibold text-green-900\">⚡ Paste Your Adsterra Code Here</h5>\n                        <div className=\"space-y-3\">\n                          {ad.format === 'video' ? (\n                            <>\n                              <Label htmlFor={`vastTag-${ad.id}`} className=\"text-green-800\">\n                                Video VAST Tag URL (Replace YOUR_KEY with your actual key)\n                              </Label>\n                              <Input\n                                id={`vastTag-${ad.id}`}\n                                value={ad.vastTag || ''}\n                                onChange={(e) => handleUpdateAd(ad.id, 'vastTag', e.target.value)}\n                                className=\"font-mono text-sm\"\n                                placeholder=\"https://www.videosprofitnetwork.com/watch.xml?key=YOUR_KEY&w=640&h=360\"\n                              />\n                            </>\n                          ) : (\n                            <>\n                              <Label htmlFor={`code-${ad.id}`} className=\"text-green-800\">\n                                Adsterra {ad.format === 'popup' ? 'Popup' : 'Banner'} Code\n                              </Label>\n                              <Textarea\n                                id={`code-${ad.id}`}\n                                value={ad.code || ''}\n                                onChange={(e) => handleUpdateAd(ad.id, 'code', e.target.value)}\n                                rows={6}\n                                className=\"font-mono text-sm\"\n                                placeholder=\"Paste your Adsterra code here...\"\n                              />\n                            </>\n                          )}\n                          <div className=\"text-sm text-green-700 bg-green-100 p-3 rounded\">\n                            🚀 <strong>Adsterra Setup (2-10 min approval!):</strong><br/>\n                            1. Sign up at adsterra.com<br/>\n                            2. Go to Websites → Ad Units<br/>\n                            3. Create {ad.format} ad unit<br/>\n                            4. Copy the {ad.format === 'video' ? 'VAST URL' : 'JavaScript code'}<br/>\n                            5. Paste above and start earning!\n                          </div>\n                          <Button \n                            onClick={() => setSelectedAd(null)} \n                            className=\"bg-green-600 hover:bg-green-700\"\n                          >\n                            Save Adsterra Code\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* PropellerAds */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-orange-500 rounded\"></div>\n                <span>PropellerAds Network</span>\n                <Badge variant=\"outline\">Video Ads</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {adsByType.propellerads.map(ad => (\n                  <div key={ad.id} className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Switch\n                          checked={ad.enabled}\n                          onCheckedChange={() => toggleAd(ad.id)}\n                        />\n                        <div>\n                          <h4 className=\"font-medium\">{ad.format.charAt(0).toUpperCase() + ad.format.slice(1)} Ad</h4>\n                          <p className=\"text-sm text-gray-600\">{ad.placement}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={ad.enabled ? \"default\" : \"secondary\"}>\n                          {ad.enabled ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setSelectedAd(selectedAd === ad.id ? null : ad.id)}\n                        >\n                          <Settings className=\"h-4 w-4 mr-1\" />\n                          {selectedAd === ad.id ? 'Close' : 'Edit Code'}\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    {selectedAd === ad.id && (\n                      <div className=\"ml-4 p-6 bg-orange-50 rounded-lg border-l-4 border-orange-500 space-y-4\">\n                        <h5 className=\"font-semibold text-orange-900\">🎬 PropellerAds Video Setup</h5>\n                        <div className=\"space-y-3\">\n                          <Label htmlFor={`vastTag-${ad.id}`} className=\"text-orange-800\">\n                            PropellerAds VAST Tag URL (Replace YOUR_PROPELLER_KEY)\n                          </Label>\n                          <Input\n                            id={`vastTag-${ad.id}`}\n                            value={ad.vastTag || ''}\n                            onChange={(e) => handleUpdateAd(ad.id, 'vastTag', e.target.value)}\n                            className=\"font-mono text-sm\"\n                            placeholder=\"https://nep.propellerads.com/ag/tags?key=YOUR_PROPELLER_KEY&w=640&h=360\"\n                          />\n                          <div className=\"text-sm text-orange-700 bg-orange-100 p-3 rounded\">\n                            🎬 <strong>PropellerAds Video Ads (Best for Educational Content!):</strong><br/>\n                            1. Sign up at propellerads.com<br/>\n                            2. Go to Websites → Add Website → Video Ads<br/>\n                            3. Copy the VAST tag URL<br/>\n                            4. High-quality video ads perfect for education<br/>\n                            5. Better rates than many other networks!\n                          </div>\n                          <Button \n                            onClick={() => setSelectedAd(null)} \n                            className=\"bg-orange-600 hover:bg-orange-700\"\n                          >\n                            Save PropellerAds Code\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Promotional */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\n                <span>Promotional Ads</span>\n                <Badge variant=\"outline\">Internal</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {adsByType.promotional.map(ad => (\n                  <div key={ad.id} className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Switch\n                          checked={ad.enabled}\n                          onCheckedChange={() => toggleAd(ad.id)}\n                        />\n                        <div>\n                          <h4 className=\"font-medium\">{ad.title}</h4>\n                          <p className=\"text-sm text-gray-600\">{ad.description}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={ad.enabled ? \"default\" : \"secondary\"}>\n                          {ad.enabled ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setSelectedAd(selectedAd === ad.id ? null : ad.id)}\n                        >\n                          <Settings className=\"h-4 w-4 mr-1\" />\n                          {selectedAd === ad.id ? 'Close' : 'Edit'}\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    {selectedAd === ad.id && (\n                      <div className=\"ml-4 p-6 bg-purple-50 rounded-lg border-l-4 border-purple-500 space-y-4\">\n                        <h5 className=\"font-semibold text-purple-900\">📢 Edit Your Promotional Ad</h5>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor={`title-${ad.id}`} className=\"text-purple-800\">Title</Label>\n                            <Input\n                              id={`title-${ad.id}`}\n                              value={ad.title || ''}\n                              onChange={(e) => handleUpdateAd(ad.id, 'title', e.target.value)}\n                              placeholder=\"Your Course Title\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor={`clickUrl-${ad.id}`} className=\"text-purple-800\">Click URL</Label>\n                            <Input\n                              id={`clickUrl-${ad.id}`}\n                              value={ad.clickUrl || ''}\n                              onChange={(e) => handleUpdateAd(ad.id, 'clickUrl', e.target.value)}\n                              placeholder=\"https://your-course-link.com\"\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label htmlFor={`description-${ad.id}`} className=\"text-purple-800\">Description</Label>\n                          <Textarea\n                            id={`description-${ad.id}`}\n                            value={ad.description || ''}\n                            onChange={(e) => handleUpdateAd(ad.id, 'description', e.target.value)}\n                            placeholder=\"Describe your course or product...\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor={`imageUrl-${ad.id}`} className=\"text-purple-800\">Image URL</Label>\n                          <Input\n                            id={`imageUrl-${ad.id}`}\n                            value={ad.imageUrl || ''}\n                            onChange={(e) => handleUpdateAd(ad.id, 'imageUrl', e.target.value)}\n                            placeholder=\"https://example.com/course-image.jpg\"\n                          />\n                        </div>\n                        <div className=\"text-sm text-purple-700 bg-purple-100 p-3 rounded\">\n                          💡 <strong>Use promotional ads to:</strong><br/>\n                          • Promote your premium courses<br/>\n                          • Drive traffic to other platforms<br/>\n                          • Showcase new content<br/>\n                          • No external approval needed!\n                        </div>\n                        <Button \n                          onClick={() => setSelectedAd(null)} \n                          className=\"bg-purple-600 hover:bg-purple-700\"\n                        >\n                          Save Promotional Ad\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"setup\">\n          <AdSetupGuide />\n        </TabsContent>\n\n        <TabsContent value=\"analytics\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Ad Performance Analytics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600\">Analytics dashboard coming soon...</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":22308},"client/src/components/video-seek-controls.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { SkipBack, SkipForward, Play, Pause, Volume2, VolumeX, Settings } from \"lucide-react\";\n\ninterface VideoSeekControlsProps {\n  isPlaying: boolean;\n  currentTime: number;\n  duration: number;\n  onSeek: (time: number) => void;\n  onPlayPause: () => void;\n  onSkipBackward: () => void;\n  onSkipForward: () => void;\n  onQualityChange?: (quality: string) => void;\n  className?: string;\n}\n\nexport default function VideoSeekControls({\n  isPlaying,\n  currentTime,\n  duration,\n  onSeek,\n  onPlayPause,\n  onSkipBackward,\n  onSkipForward,\n  onQualityChange,\n  className = \"\"\n}: VideoSeekControlsProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [localTime, setLocalTime] = useState(currentTime);\n  const [volume, setVolume] = useState(75);\n  const [isMuted, setIsMuted] = useState(false);\n  const [quality, setQuality] = useState(\"auto\");\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Update local time when not dragging\n  useEffect(() => {\n    if (!isDragging) {\n      setLocalTime(currentTime);\n    }\n  }, [currentTime, isDragging]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const handleSeekChange = (value: number[]) => {\n    const newTime = value[0];\n    setLocalTime(newTime);\n    setIsDragging(true);\n  };\n\n  const handleSeekCommit = (value: number[]) => {\n    const newTime = value[0];\n    onSeek(newTime);\n    setIsDragging(false);\n  };\n\n  const handleVolumeChange = (value: number[]) => {\n    const newVolume = value[0];\n    setVolume(newVolume);\n    setIsMuted(newVolume === 0);\n  };\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n    if (!isMuted) {\n      setVolume(0);\n    } else {\n      setVolume(75);\n    }\n  };\n\n  const handleQualityChange = (newQuality: string) => {\n    setQuality(newQuality);\n    onQualityChange?.(newQuality);\n  };\n\n  return (\n    <div className={`bg-black/90 backdrop-blur-sm text-white transition-all duration-300 ${className}`}>\n      {/* Main seek bar - thinner design */}\n      <div className=\"px-3 py-1\">\n        <div className=\"flex items-center space-x-2 text-xs\">\n          <span className=\"min-w-[35px] text-[10px]\">{formatTime(localTime)}</span>\n          <div className=\"flex-1\">\n            <Slider\n              value={[localTime]}\n              max={duration || 100}\n              step={1}\n              onValueChange={handleSeekChange}\n              onValueCommit={handleSeekCommit}\n              className=\"w-full h-1\"\n            />\n          </div>\n          <span className=\"min-w-[35px] text-[10px]\">{formatTime(duration)}</span>\n        </div>\n      </div>\n\n      {/* Control buttons - compact layout */}\n      <div className=\"flex items-center justify-between px-3 py-1\">\n        <div className=\"flex items-center space-x-1\">\n          {/* Skip backward 10s */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onSkipBackward}\n            className=\"text-white hover:bg-white/20 p-1 h-6 w-6\"\n            title=\"Skip backward 10 seconds\"\n          >\n            <SkipBack className=\"h-3 w-3\" />\n          </Button>\n\n          {/* Play/Pause */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onPlayPause}\n            className=\"text-white hover:bg-white/20 p-1 h-7 w-7\"\n            title={isPlaying ? \"Pause\" : \"Play\"}\n          >\n            {isPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n          </Button>\n\n          {/* Skip forward 10s */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onSkipForward}\n            className=\"text-white hover:bg-white/20 p-1 h-6 w-6\"\n            title=\"Skip forward 10 seconds\"\n          >\n            <SkipForward className=\"h-3 w-3\" />\n          </Button>\n        </div>\n\n        {/* Right side controls */}\n        <div className=\"flex items-center space-x-1\">\n          {/* Volume control - compact */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleMute}\n            className=\"text-white hover:bg-white/20 p-1 h-6 w-6\"\n            title={isMuted ? \"Unmute\" : \"Mute\"}\n          >\n            {isMuted ? <VolumeX className=\"h-3 w-3\" /> : <Volume2 className=\"h-3 w-3\" />}\n          </Button>\n          <div className=\"w-12\">\n            <Slider\n              value={[isMuted ? 0 : volume]}\n              max={100}\n              step={1}\n              onValueChange={handleVolumeChange}\n              className=\"w-full h-1\"\n            />\n          </div>\n\n          {/* Quality settings */}\n          <div className=\"relative\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowSettings(!showSettings)}\n              className=\"text-white hover:bg-white/20 p-1 h-6 w-6\"\n              title=\"Quality Settings\"\n            >\n              <Settings className=\"h-3 w-3\" />\n            </Button>\n            \n            {showSettings && (\n              <div className=\"absolute bottom-8 right-0 bg-black/95 rounded-md p-2 min-w-[120px] z-50\">\n                <div className=\"text-[10px] text-gray-400 mb-1\">Quality</div>\n                <Select value={quality} onValueChange={handleQualityChange}>\n                  <SelectTrigger className=\"h-6 text-xs bg-transparent border-gray-600\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-black/95 border-gray-600\">\n                    <SelectItem value=\"auto\" className=\"text-xs\">Auto</SelectItem>\n                    <SelectItem value=\"2160p\" className=\"text-xs\">2160p (4K)</SelectItem>\n                    <SelectItem value=\"1440p\" className=\"text-xs\">1440p (2K)</SelectItem>\n                    <SelectItem value=\"1080p\" className=\"text-xs\">1080p (HD)</SelectItem>\n                    <SelectItem value=\"720p\" className=\"text-xs\">720p</SelectItem>\n                    <SelectItem value=\"480p\" className=\"text-xs\">480p</SelectItem>\n                    <SelectItem value=\"360p\" className=\"text-xs\">360p</SelectItem>\n                    <SelectItem value=\"240p\" className=\"text-xs\">240p</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n\n          {/* Progress indicator - compact */}\n          <div className=\"text-[9px] text-gray-400 min-w-[30px] text-right\">\n            {duration > 0 && (\n              <span>{Math.round((localTime / duration) * 100)}%</span>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Hook for video seeking functionality\n * Provides state management and YouTube API integration\n */\nexport function useVideoSeekControls(iframeRef: React.RefObject<HTMLIFrameElement>) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n\n  const sendCommand = (command: string, args?: any[]) => {\n    if (iframeRef.current) {\n      const message = {\n        event: 'command',\n        func: command,\n        args: args || []\n      };\n      iframeRef.current.contentWindow?.postMessage(JSON.stringify(message), '*');\n    }\n  };\n\n  const handleSeek = (time: number) => {\n    sendCommand('seekTo', [time, true]);\n    setCurrentTime(time);\n  };\n\n  const handlePlayPause = () => {\n    if (isPlaying) {\n      sendCommand('pauseVideo');\n    } else {\n      sendCommand('playVideo');\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleSkipBackward = () => {\n    const newTime = Math.max(0, currentTime - 10);\n    handleSeek(newTime);\n  };\n\n  const handleSkipForward = () => {\n    const newTime = Math.min(duration, currentTime + 10);\n    handleSeek(newTime);\n  };\n\n  const handleQualityChange = (quality: string) => {\n    // YouTube API quality change\n    const qualityMap: { [key: string]: string } = {\n      'auto': 'default',\n      '2160p': 'hd2160',\n      '1440p': 'hd1440', \n      '1080p': 'hd1080',\n      '720p': 'hd720',\n      '480p': 'large',\n      '360p': 'medium',\n      '240p': 'small'\n    };\n    \n    const youtubeQuality = qualityMap[quality] || 'default';\n    sendCommand('setPlaybackQuality', [youtubeQuality]);\n  };\n\n  // Listen for YouTube player events\n  useEffect(() => {\n    const handleMessage = (event: MessageEvent) => {\n      if (event.origin !== \"https://www.youtube-nocookie.com\" && event.origin !== \"https://www.youtube.com\") return;\n      \n      try {\n        const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\n        \n        if (data.event === \"onStateChange\") {\n          setIsPlaying(data.info === 1); // 1 = playing\n        } else if (data.event === \"onDurationChange\") {\n          setDuration(data.info || 0);\n        } else if (data.event === \"onCurrentTimeUpdate\") {\n          setCurrentTime(data.info || 0);\n        }\n      } catch (e) {\n        // Ignore parsing errors\n      }\n    };\n\n    window.addEventListener(\"message\", handleMessage);\n    return () => window.removeEventListener(\"message\", handleMessage);\n  }, []);\n\n  return {\n    isPlaying,\n    currentTime,\n    duration,\n    handleSeek,\n    handlePlayPause,\n    handleSkipBackward,\n    handleSkipForward,\n    handleQualityChange\n  };\n}","size_bytes":9622},"client/src/components/multi-platform-video-embed.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport type VideoPlatform = 'youtube' | 'vimeo' | 'facebook' | 'dailymotion' | 'twitch' | 'peertube' | 'rumble' | 'telegram';\n\ninterface MultiPlatformVideoEmbedProps {\n  platform: VideoPlatform;\n  videoId?: string;\n  videoUrl: string;\n  title: string;\n  className?: string;\n}\n\nconst getEmbedUrl = (platform: VideoPlatform, videoId?: string, videoUrl?: string): string => {\n  switch (platform) {\n    case 'youtube':\n      return `https://www.youtube-nocookie.com/embed/${videoId}?rel=0&modestbranding=1&iv_load_policy=3`;\n    \n    case 'vimeo':\n      return `https://player.vimeo.com/video/${videoId}?badge=0&autopause=0&player_id=0&app_id=58479`;\n    \n    case 'facebook':\n      // Facebook videos need special handling - they don't have traditional embed URLs\n      return videoUrl || '';\n    \n    case 'dailymotion':\n      return `https://www.dailymotion.com/embed/video/${videoId}`;\n    \n    case 'twitch':\n      if (videoId) {\n        return `https://player.twitch.tv/?video=${videoId}&parent=${window.location.hostname}`;\n      }\n      return videoUrl || '';\n    \n    case 'peertube':\n      // PeerTube instances vary, so we use the full URL\n      return videoUrl?.replace('/watch/', '/embed/') || '';\n    \n    case 'rumble':\n      // Rumble embed URL pattern\n      return videoUrl?.replace('rumble.com/', 'rumble.com/embed/') || '';\n    \n    case 'telegram':\n      // Telegram videos cannot be embedded directly\n      return '';\n    \n    default:\n      return videoUrl || '';\n  }\n};\n\nconst getIframeProps = (platform: VideoPlatform) => {\n  const baseProps = {\n    frameBorder: \"0\",\n    allowFullScreen: true,\n    className: \"w-full h-full\"\n  };\n\n  switch (platform) {\n    case 'youtube':\n      return {\n        ...baseProps,\n        allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n      };\n    \n    case 'vimeo':\n      return {\n        ...baseProps,\n        allow: \"autoplay; fullscreen; picture-in-picture\"\n      };\n    \n    case 'facebook':\n      return {\n        ...baseProps,\n        allow: \"autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share\"\n      };\n    \n    case 'dailymotion':\n      return {\n        ...baseProps,\n        allow: \"autoplay; fullscreen\"\n      };\n    \n    case 'twitch':\n      return {\n        ...baseProps,\n        allow: \"autoplay; fullscreen\"\n      };\n    \n    default:\n      return baseProps;\n  }\n};\n\nconst renderFacebookVideo = (videoUrl: string, title: string) => {\n  return (\n    <div className=\"relative w-full\" style={{ paddingBottom: '56.25%' }}>\n      <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg\">\n        <div className=\"text-center space-y-4 p-8\">\n          <div className=\"text-4xl\">📘</div>\n          <h3 className=\"text-lg font-semibold\">{title}</h3>\n          <p className=\"text-gray-600 text-sm mb-4\">\n            Facebook videos cannot be embedded directly. Click below to watch on Facebook.\n          </p>\n          <a\n            href={videoUrl}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            <span className=\"mr-2\">📘</span>\n            Watch on Facebook\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst renderCustomPlatform = (platform: VideoPlatform, videoUrl: string, title: string) => {\n  const platformNames = {\n    peertube: 'PeerTube',\n    rumble: 'Rumble',\n    telegram: 'Telegram'\n  };\n\n  const platformIcons = {\n    peertube: '🔗',\n    rumble: '🏆',\n    telegram: '📱'\n  };\n\n  return (\n    <div className=\"relative w-full\" style={{ paddingBottom: '56.25%' }}>\n      <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg\">\n        <div className=\"text-center space-y-4 p-8\">\n          <div className=\"text-4xl\">{platformIcons[platform] || '📹'}</div>\n          <h3 className=\"text-lg font-semibold\">{title}</h3>\n          <p className=\"text-gray-600 text-sm mb-4\">\n            Watch this video on {platformNames[platform] || platform}\n          </p>\n          <a\n            href={videoUrl}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"inline-flex items-center px-4 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-900 transition-colors\"\n          >\n            <span className=\"mr-2\">{platformIcons[platform] || '📹'}</span>\n            Watch on {platformNames[platform] || platform}\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function MultiPlatformVideoEmbed({ \n  platform, \n  videoId, \n  videoUrl, \n  title, \n  className = \"\" \n}: MultiPlatformVideoEmbedProps) {\n  const embedUrl = getEmbedUrl(platform, videoId, videoUrl);\n  const iframeProps = getIframeProps(platform);\n\n  // Special handling for platforms that don't support direct embedding\n  if (platform === 'facebook') {\n    return (\n      <Card className={`overflow-hidden ${className}`}>\n        <CardContent className=\"p-0\">\n          {renderFacebookVideo(videoUrl, title)}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (platform === 'peertube' || platform === 'rumble' || platform === 'telegram') {\n    return (\n      <Card className={`overflow-hidden ${className}`}>\n        <CardContent className=\"p-0\">\n          {renderCustomPlatform(platform, videoUrl, title)}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // For platforms that support iframe embedding\n  if (!embedUrl) {\n    return (\n      <Card className={`overflow-hidden ${className}`}>\n        <CardContent className=\"p-0\">\n          <div className=\"relative w-full\" style={{ paddingBottom: '56.25%' }}>\n            <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-gray-600\">Unable to embed video</p>\n                <a\n                  href={videoUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-blue-600 hover:underline\"\n                >\n                  Open in new tab\n                </a>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`overflow-hidden ${className}`}>\n      <CardContent className=\"p-0\">\n        <div className=\"relative w-full\" style={{ paddingBottom: '56.25%' }}>\n          <iframe\n            {...iframeProps}\n            src={embedUrl}\n            title={title}\n            className=\"absolute inset-0 w-full h-full\"\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6828},"AD_PLACEMENT_GUIDE.md":{"content":"# 📍 **WHERE YOUR ADS APPEAR ON THE WEBSITE**\n\n## **🎯 Ad Placement Map - Visual Guide**\n\n### **1. Header Banner Ads** \n**Location:** Top of every page  \n**Size:** 728x90 pixels  \n**Best for:** AdSense or Adsterra banner ads  \n**Visibility:** High - Always visible  \n\n```\n┌─────────────────────────────────────────────────┐\n│               🎯 HEADER BANNER AD               │ ← YOUR AD HERE\n│                   728 x 90                      │\n├─────────────────────────────────────────────────┤\n│                   Website Content               │\n│                                                 │\n```\n\n### **2. Pre-roll Video Ads**\n**Location:** Before educational videos  \n**Duration:** 5-30 seconds (skippable after 5s)  \n**Best for:** Adsterra video VAST tags  \n**Visibility:** Very High - Users must watch/skip  \n\n```\n┌─────────────────────────────────────────────────┐\n│  ▶️ YOUR VIDEO AD PLAYS HERE (5-30 seconds)    │ ← YOUR AD HERE\n│     [Skip Ad] button appears after 5 seconds    │\n│                                                 │\n│  Then educational video starts automatically    │\n└─────────────────────────────────────────────────┘\n```\n\n### **3. Pause Overlay Ads**\n**Location:** Appears when user pauses any video  \n**Trigger:** 2 seconds after pausing  \n**Best for:** Small popup ads, promotional content  \n**Visibility:** High engagement - User is focused  \n\n```\n┌─────────────────────────────────────────────────┐\n│             📹 Video (Paused)                   │\n│                                                 │\n│      ┌───────────────────┐                     │\n│      │   🎯 YOUR AD      │ ← YOUR AD POPS UP   │\n│      │   400 x 300       │                     │\n│      │  [Close] [Click]  │                     │\n│      └───────────────────┘                     │\n└─────────────────────────────────────────────────┘\n```\n\n### **4. Sidebar Ads**\n**Location:** Right side of content pages  \n**Size:** 300x250 pixels  \n**Best for:** AdSense rectangle ads  \n**Visibility:** Medium - Visible while browsing  \n\n```\n┌─────────────────────────┬───────────────────┐\n│                         │  🎯 SIDEBAR AD    │ ← YOUR AD HERE\n│   Educational Content   │    300 x 250      │\n│                         │                   │\n│   Course videos and     │  More ads here    │\n│   learning materials    │  can be stacked   │\n│                         │                   │\n└─────────────────────────┴───────────────────┘\n```\n\n### **5. Between-Videos Ads**\n**Location:** After completing a video, before next one  \n**Format:** Native content style  \n**Best for:** AdSense native ads or promotional content  \n**Visibility:** Very High - Natural break point  \n\n```\n┌─────────────────────────────────────────────────┐\n│         ✅ Video 1 Complete!                    │\n│                                                 │\n│  ┌─────────────────────────────────────────────┐│\n│  │        🎯 NATIVE AD CONTENT                 ││ ← YOUR AD HERE\n│  │  [Image] \"Learn Advanced Python Course\"    ││\n│  │  \"Master programming with our premium...\"   ││\n│  │                              [Visit Now]    ││\n│  └─────────────────────────────────────────────┘│\n│                                                 │\n│            ▶️ Next Video: Lesson 2              │\n└─────────────────────────────────────────────────┘\n```\n\n### **6. Footer Banner Ads**\n**Location:** Bottom of every page  \n**Size:** 728x90 pixels  \n**Best for:** Adsterra banner ads  \n**Visibility:** Medium - Visible when scrolling down  \n\n```\n┌─────────────────────────────────────────────────┐\n│                                                 │\n│                Website Content                  │\n│                                                 │\n├─────────────────────────────────────────────────┤\n│               🎯 FOOTER BANNER AD               │ ← YOUR AD HERE\n│                   728 x 90                      │\n└─────────────────────────────────────────────────┘\n```\n\n---\n\n## **💰 Revenue Optimization by Placement**\n\n### **Highest Earning Ads:**\n1. **Pre-roll Video Ads** - $3-12 CPM (Educational content premium)\n2. **Pause Overlay Ads** - $2-8 CPM (High engagement)\n3. **Between-Videos Native** - $2-6 CPM (Natural placement)\n\n### **Steady Revenue Ads:**\n4. **Header Banner** - $1-4 CPM (Always visible)\n5. **Sidebar Rectangle** - $1-3 CPM (Content relevant)\n6. **Footer Banner** - $0.50-2 CPM (Less intrusive)\n\n---\n\n## **📝 EXACT STEPS TO PLACE YOUR ADS**\n\n### **For AdSense (After Approval):**\n1. **Login to AdSense Dashboard**\n2. **Go to Ads → By ad unit → Create new ad unit**  \n3. **Choose size:** 728x90 for banners, 300x250 for sidebar, Responsive for native\n4. **Copy the HTML code** (looks like `<ins class=\"adsbygoogle\"...>`)\n5. **In your admin panel:** Click \"Edit Code\" button next to each ad\n6. **Paste the code** and replace `ca-pub-XXXXXXXXXXXXXXXX` with your Publisher ID\n7. **Toggle the switch ON** to activate\n\n### **For Adsterra (Instant Approval):**\n1. **Sign up at adsterra.com** (approved in 2-10 minutes)\n2. **Go to Websites → Ad Units → Create Ad Unit**\n3. **For Video Ads:** Choose \"Video VAST\" → Copy VAST URL\n4. **For Banner Ads:** Choose \"Display Banner\" → Copy JavaScript code\n5. **For Popup Ads:** Choose \"Popunder\" → Copy ad code\n6. **In your admin panel:** Click \"Edit Code\" button\n7. **Paste the code** and replace `YOUR_KEY` with your actual key\n8. **Toggle the switch ON** to start earning immediately\n\n---\n\n## **🎯 Quick Revenue Calculation**\n\n**If you get 10,000 monthly video views:**\n- Pre-roll ads: $30-120/month\n- Pause overlay: $20-80/month  \n- Banner ads: $10-40/month\n- **Total: $60-240/month**\n\n**If you get 50,000 monthly video views:**\n- Pre-roll ads: $150-600/month\n- Pause overlay: $100-400/month\n- Banner ads: $50-200/month\n- **Total: $300-1,200/month**\n\n**Educational content gets 2-3x higher rates than regular content!**\n\n---\n\n## **✅ Testing Your Ads**\n\nAfter placing your codes:\n1. **Visit your website** in a private/incognito browser\n2. **Watch a video** - you should see pre-roll ads\n3. **Pause the video** - popup should appear after 2 seconds\n4. **Check different pages** - banners should show on header/sidebar/footer\n5. **Complete a video** - native ad should appear before next video\n\n**Note:** New ads can take 10-15 minutes to appear. Clear browser cache if needed.\n\n---\n\n**🚀 Your website is now ready to generate serious revenue from multiple ad networks!**","size_bytes":8231},"BETWEEN_VIDEO_ADS_GUIDE.md":{"content":"# 🎬 **BETWEEN-VIDEOS AD SYSTEM - COMPLETE GUIDE**\n\n## **✨ NEW FEATURES ADDED:**\n\n### **1. Between-Videos Ads (7-Second Skip)**\n- **Trigger:** जब user \"Next\" button पर click करता है\n- **Timing:** Video complete होने के बाद\n- **Skip Time:** 7 seconds (आपकी requirement के अनुसार)\n- **Placement:** Full-screen modal overlay\n\n### **2. Enhanced Skip Functionality**\n- **All video ads** अब 7 seconds के बाद skip होते हैं\n- **Pre-roll ads:** Video शुरू होने से पहले\n- **Between-videos ads:** Videos के बीच में\n- **Professional skip button** with countdown timer\n\n## **🎯 AD FLOW EXPLAINED:**\n\n### **Complete User Journey:**\n```\n1. User clicks on video\n   ↓\n2. Pre-roll ad shows (7s skip available)\n   ↓  \n3. Educational video plays\n   ↓\n4. User completes video & clicks \"Next\"\n   ↓\n5. Between-videos ad shows (7s skip available)\n   ↓\n6. Next video starts with pre-roll ad\n```\n\n## **💰 REVENUE BOOST:**\n\n### **Double Ad Revenue:**\n- **Before:** केवल pre-roll ads\n- **Now:** Pre-roll + Between-videos ads\n- **Revenue Increase:** 80-100% more earnings!\n\n### **Revenue Per User Session:**\n```\nOld System: 1 video = 1 ad\nNew System: 1 video = 2 ads (pre-roll + between)\n\nExample with 10K daily video views:\n- Old: $20-60/day\n- New: $40-120/day (DOUBLE!)\n```\n\n## **🎮 USER EXPERIENCE:**\n\n### **Smart Ad Timing:**\n- **Natural break points** - between videos\n- **7-second skip** - not too intrusive\n- **Professional interface** - looks premium\n- **Progress indication** - users know what to expect\n\n### **Skip Button Features:**\n- **Countdown timer** shows remaining time\n- **Clear skip option** after 7 seconds\n- **Close button** always available\n- **Next video preview** shown below ad\n\n## **⚙️ ADMIN CONFIGURATION:**\n\n### **In Your Admin Panel:**\n1. **Go to Ad Monetization tab**\n2. **You'll now see 4 video ad slots:**\n   - **Adsterra Pre-roll** (before videos)\n   - **Adsterra Between-videos** (between videos) ✨ NEW\n   - **PropellerAds Pre-roll** (before videos)\n   - **PropellerAds Between-videos** (between videos) ✨ NEW\n\n### **Setup Instructions:**\n```\n1. Sign up for Adsterra/PropellerAds\n2. Create 2 video ad units:\n   - Ad Unit 1: For pre-roll\n   - Ad Unit 2: For between-videos\n3. Get 2 different VAST URLs\n4. Paste in respective slots in admin\n5. Toggle ON both ads\n6. Double your revenue!\n```\n\n## **🎬 VIDEO AD FORMATS:**\n\n### **Adsterra VAST Tags:**\n```\nPre-roll: \nhttps://www.videosprofitnetwork.com/watch.xml?key=YOUR_KEY&w=640&h=360\n\nBetween-videos:\nhttps://www.videosprofitnetwork.com/watch.xml?key=YOUR_KEY_2&w=640&h=360\n```\n\n### **PropellerAds VAST Tags:**\n```\nPre-roll:\nhttps://nep.propellerads.com/ag/tags?key=YOUR_PROPELLER_KEY&w=640&h=360\n\nBetween-videos: \nhttps://nep.propellerads.com/ag/tags?key=YOUR_PROPELLER_KEY_2&w=640&h=360\n```\n\n## **📊 EXPECTED RESULTS:**\n\n### **Revenue Optimization:**\n- **Educational content CPM:** $3-12 (premium rates)\n- **Pre-roll completion rate:** 85-95%\n- **Between-videos completion rate:** 90-98% (higher engagement)\n- **Skip rate:** 20-30% (acceptable for revenue)\n\n### **Monthly Revenue Projection (50K video views):**\n```\nPre-roll ads: $150-400/month\nBetween-videos ads: $180-450/month (higher completion)\nBanner ads: $100-300/month\nTotal: $430-1,150/month\n\nRevenue increase: 80-100% from between-videos ads!\n```\n\n## **🚀 TESTING YOUR NEW SYSTEM:**\n\n### **How to Test:**\n1. **Watch any video** on your site\n2. **Complete the video** \n3. **Click \"Next\" button**\n4. **Between-videos ad should appear**\n5. **Wait 7 seconds** for skip button\n6. **Skip or watch** the ad\n7. **Next video starts** with pre-roll ad\n\n### **Demo Mode:**\n- **Without real codes:** Shows demo ads with automatic completion\n- **With real codes:** Shows actual video advertisements\n- **Both modes:** Respect the 7-second skip timing\n\n## **⭐ KEY ADVANTAGES:**\n\n### **For Content Creators:**\n- **Double revenue** from same traffic\n- **Professional ad experience**\n- **Natural ad placement**\n- **User-friendly skip options**\n\n### **For Users:**\n- **Clear expectations** (7-second skip)\n- **Quality ad content**\n- **Support educational content**\n- **Smooth video transitions**\n\n### **For Advertisers:**\n- **High completion rates**\n- **Engaged educational audience**\n- **Premium content placement**\n- **Quality traffic**\n\n---\n\n**🎉 Your platform now has the most advanced video ad system for educational content!**\n\n**Users get quality experience + You get maximum revenue + Advertisers get engaged audience = WIN-WIN-WIN!** 📈","size_bytes":4624},"SETUP_GUIDE.md":{"content":"# 🚀 Complete Ad Setup Guide - Step by Step\n\n## **Step 1: Access Your New Ad Management System**\n\n1. **Login to Admin Dashboard**\n   - Go to your website's admin section\n   - Click on **\"Ad Monetization\"** tab (not the old \"Advertisement Settings\")\n   - You'll see the new comprehensive ad management system\n\n## **Step 2: Quick Start - Get Revenue Immediately**\n\n### **Option A: Adsterra (Fastest - 2-10 minutes approval)**\n\n1. **Sign up at Adsterra**\n   - Go to https://adsterra.com\n   - Click \"Join Adsterra\"\n   - Fill in your website details\n   - **You'll get approved in 2-10 minutes!**\n\n2. **Get Your Ad Codes**\n   - After approval, login to Adsterra dashboard\n   - Go to \"Websites\" → \"Ad Units\"\n   - Create these ad types:\n\n   **For Video Ads (VAST Tags):**\n   ```\n   Type: Video VAST\n   Size: 640x360\n   Copy the VAST URL that looks like:\n   https://www.videosprofitnetwork.com/watch.xml?key=YOUR_KEY&w=640&h=360\n   ```\n\n   **For Banner Ads:**\n   ```\n   Type: Display Banner\n   Size: 728x90 (Header) or 300x250 (Sidebar)\n   Copy the JavaScript code that looks like:\n   <script type=\"text/javascript\">\n   atOptions = {\n     'key' : 'YOUR_ADSTERRA_KEY',\n     'format' : 'iframe',\n     'height' : 90,\n     'width' : 728\n   };\n   </script>\n   ```\n\n3. **Paste Codes in Your Admin Panel**\n   - Go to Admin → Ad Monetization → Ad Configurations\n   - Find **\"Adsterra Network\"** section\n   - Click the ⚙️ settings button next to each ad\n   - Replace the placeholder codes with your real codes:\n     - For video ads: Replace `YOUR_KEY` in the VAST tag\n     - For banner ads: Replace `YOUR_ADSTERRA_KEY` in the script\n   - Toggle the switch to **ON** for each ad\n\n### **Option B: Google AdSense (Best Revenue - 1-2 weeks approval)**\n\n1. **Apply for AdSense**\n   - Go to https://adsense.google.com\n   - Click \"Get Started\"\n   - Add your website\n   - Wait for approval (typically 1-2 weeks)\n\n2. **Get Your Ad Codes After Approval**\n   - Login to AdSense dashboard\n   - Go to \"Ads\" → \"By ad unit\"\n   - Create these ad units:\n\n   **Display Ads:**\n   ```\n   Ad unit name: Header Banner\n   Ad type: Display ads\n   Size: Responsive\n   Copy the HTML code that looks like:\n\n   <ins class=\"adsbygoogle\"\n        style=\"display:block\"\n        data-ad-client=\"ca-pub-YOUR_PUBLISHER_ID\"\n        data-ad-slot=\"YOUR_AD_SLOT\"\n        data-ad-format=\"auto\"\n        data-full-width-responsive=\"true\"></ins>\n   ```\n\n3. **Paste AdSense Codes**\n   - In your admin panel, find **\"Google AdSense\"** section\n   - Replace these placeholders:\n     - `ca-pub-XXXXXXXXXXXXXXXX` with your Publisher ID\n     - `XXXXXXXXXX` with your Ad Slot ID\n\n## **Step 3: Where Each Ad Type Shows Up**\n\n### **🎯 Current Ad Placements:**\n\n1. **Pre-roll Video Ads** (Before educational videos)\n   - Shows 5-second skippable video ad before each lesson\n   - Uses VAST tags from Adsterra or video networks\n\n2. **Pause Overlay Ads** (When users pause videos)\n   - Small popup appears 2 seconds after pausing\n   - Can show promotional offers or banner ads\n\n3. **Header Banner Ads** (Top of every page)\n   - 728x90 banner at the top\n   - Always visible, great for branding\n\n4. **Sidebar Ads** (Right side of pages)\n   - 300x250 rectangle ads\n   - Shows alongside content\n\n5. **Between-Videos Ads** (Between lessons)\n   - Native content-style ads\n   - Appears when switching between videos\n\n6. **Footer Banner Ads** (Bottom of pages)\n   - 728x90 banner at page bottom\n   - Less intrusive, steady revenue\n\n## **Step 4: Revenue Optimization Tips**\n\n### **💰 Expected Monthly Revenue:**\n- **10K monthly views:** $60-240/month\n- **50K monthly views:** $300-1,200/month  \n- **100K monthly views:** $600-2,400/month\n\n### **📈 Maximize Earnings:**\n1. **Use Multiple Networks:**\n   - Start with Adsterra (instant approval)\n   - Add AdSense when approved (higher rates)\n   - Keep promotional ads for your own courses\n\n2. **Educational Content Bonus:**\n   - Your educational content gets 2-3x higher CPM\n   - Students are valuable target audience\n   - Premium rates: $2-12 CPM vs $0.50-4 CPM for general content\n\n3. **Best Performing Locations:**\n   - Pause overlay ads: High engagement\n   - Between-videos: Natural break point\n   - Pre-roll: Highest CPM but skip-able\n\n## **Step 5: Managing Your Ads**\n\n### **⚙️ Admin Controls:**\n1. **Toggle Any Ad On/Off**\n   - Use the switch next to each ad type\n   - Changes take effect immediately\n\n2. **Edit Ad Content**\n   - Click ⚙️ settings button\n   - Modify ad codes, titles, descriptions\n   - Update URLs and targeting\n\n3. **Track Performance**\n   - View revenue dashboard\n   - Monitor click rates and impressions\n   - Optimize based on performance\n\n### **🎛️ Promotional Ads:**\n- Edit your own course promotions\n- Change titles, descriptions, images\n- Drive traffic to specific courses\n- No external approval needed\n\n## **Step 6: Common Issues & Solutions**\n\n### **❌ Ads Not Showing?**\n1. Check if ad is toggled ON\n2. Verify ad codes are correct (no placeholder text)\n3. Wait 10-15 minutes for changes to propagate\n4. Clear browser cache and refresh\n\n### **🔧 Code Placement Issues:**\n- **Don't edit files directly** - use the admin panel only\n- **Replace ALL placeholder text** (YOUR_KEY, YOUR_PUBLISHER_ID, etc.)\n- **Keep HTML structure intact** when copying codes\n\n### **💡 Revenue Not Coming?**\n- Adsterra: Revenue shows within 24-48 hours\n- AdSense: Can take 2-3 days for first payments to appear\n- Check your ad network dashboards for detailed analytics\n\n## **🎯 Quick Action Checklist**\n\n- [ ] Sign up for Adsterra (get instant approval)\n- [ ] Create video VAST ads and banner ads\n- [ ] Copy ad codes from Adsterra dashboard\n- [ ] Go to Admin → Ad Monetization\n- [ ] Paste codes in Adsterra Network section\n- [ ] Turn ON all Adsterra ads\n- [ ] Apply for Google AdSense\n- [ ] Test ads are showing on your website\n- [ ] Monitor revenue in both dashboards\n\n**🚀 You can start earning within hours with Adsterra, while waiting for AdSense approval for premium rates!**\n\n---\n\n## **Need Help?**\n- All ad management is done through the admin panel\n- No code editing required\n- Changes are instant\n- Revenue tracking built-in\n- Multi-network support for maximum earnings\n\n**Your educational platform is now ready to generate serious revenue! 💰**","size_bytes":6272},"VIDEO_PROTECTION_GUIDE.md":{"content":"# Universal Video Protection System Guide\n\n## MANDATORY FOR ALL FUTURE VIDEO EMBEDS\n\nThis document ensures that **ALL YouTube video embeds** in this platform have consistent blocking functionality with exact positions, sizes, features, and functionality.\n\n## Required Import\n\n```typescript\nimport VideoProtectionSystem from \"./video-protection-system\";\n```\n\n## Required Implementation\n\nFor ANY video embed component, you MUST include:\n\n```jsx\n{/* Universal Video Protection System - Applied to ALL embeds */}\n<VideoProtectionSystem />\n```\n\n## Standard Blocking Features\n\nEvery embed automatically gets:\n\n### 1. Top Full-Width YouTube Logo Blocker\n- **Position**: `top-0 left-0`\n- **Size**: `w-full h-12 sm:h-14 md:h-16` (Full width coverage)\n- **Style**: Transparent background, becomes black on hover\n- **Z-Index**: `z-[999]`\n- **Interactive**: Blocks clicks, prevents event propagation, hover visibility\n\n### 2. Bottom-Left YouTube Text Blocker\n- **Position**: `bottom-0 left-0`\n- **Size**: `w-44 h-16 sm:w-48 sm:h-18 md:w-52 md:h-20` (Extended 3cm wider coverage)\n- **Style**: Transparent background, becomes black on hover\n- **Z-Index**: `z-[999]`\n- **Interactive**: Blocks clicks and context menu, hover visibility\n\n### 3. Bottom-Right Corner Blocker  \n- **Position**: `bottom-0 right-0`\n- **Size**: `w-20 h-12`\n- **Style**: Transparent background, becomes black on hover\n- **Z-Index**: `z-[999]`\n- **Interactive**: Blocks clicks and context menu, hover visibility\n\n### 4. Bottom Center Video ID Blocker\n- **Position**: `bottom-0 left-1/2 transform -translate-x-1/2`\n- **Size**: `w-24 h-8 sm:w-32 sm:h-10 md:w-40 md:h-12`\n- **Style**: Black background with rounded corners (covers video ID numbers)\n- **Z-Index**: `z-20`\n- **Non-Interactive**: Visual patch only (pointer-events-none)\n\n## Implementation Examples\n\n### New Video Component Template\n```jsx\nimport VideoProtectionSystem from \"./video-protection-system\";\n\nexport default function MyVideoComponent({ videoId, title }) {\n  return (\n    <div className=\"relative video-container\">\n      <iframe\n        src={`https://www.youtube-nocookie.com/embed/${videoId}`}\n        title={title}\n        className=\"absolute top-0 left-0 w-full h-full\"\n        allowFullScreen\n      />\n      \n      {/* REQUIRED: Universal Video Protection System */}\n      <VideoProtectionSystem />\n    </div>\n  );\n}\n```\n\n### Hook Usage (Alternative)\n```jsx\nimport { useVideoProtection } from \"./video-protection-system\";\n\nexport default function MyVideoComponent() {\n  const { ProtectionOverlay } = useVideoProtection();\n  \n  return (\n    <div className=\"relative video-container\">\n      <iframe />\n      <ProtectionOverlay />\n    </div>\n  );\n}\n```\n\n## Consistency Rules\n\n1. **NEVER** manually create blocking divs - always use `VideoProtectionSystem`\n2. **ALWAYS** import and include the component in ANY video embed\n3. **MAINTAIN** exact positioning and styling across all video components\n4. **ENSURE** responsive behavior works on mobile, tablet, and desktop\n5. **TEST** that hover effects and event blocking work properly\n\n## Current Implementation Status\n\n- ✅ `SecureVideoEmbed` - Uses VideoProtectionSystem + additional patches\n- ✅ `VideoEmbed` - Uses VideoProtectionSystem\n- ✅ `video-player.tsx` - Uses SecureVideoEmbed (inherited protection)\n- ✅ `subject-videos.tsx` - Uses VideoEmbed (inherited protection)\n\n## Future Development Rule\n\n**BEFORE creating any new video component:**\n1. Import `VideoProtectionSystem`\n2. Add `<VideoProtectionSystem />` inside the video container\n3. Test all blocking functionality works\n4. Verify responsive positioning on all devices\n5. Update this guide if new video pages are added\n\nThis ensures **100% consistency** across ALL video embeds forever.\n\n## Future Guarantee\n\n✅ **All future video embeds will automatically inherit this protection system**\n✅ **Developers cannot accidentally create unprotected embeds**\n✅ **Consistent transparent + hover visibility across all components**\n✅ **Full-width mobile protection prevents \"Y\" alphabet visibility**\n✅ **Bottom-left YouTube text blocking with extended coverage**\n✅ **Automatic updates to protection apply universally**\n✅ **No visible blocking patches during normal viewing**\n✅ **Hover feedback shows protected areas when needed**\n✅ **Integrated video seeking controls with forward/backward functionality**\n✅ **Interactive timeline and volume controls appear on hover**","size_bytes":4426},"client/src/components/course-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { BookOpen, ArrowRight } from \"lucide-react\";\nimport type { Course } from \"@shared/schema\";\n\ninterface CourseCardProps {\n  course: Course;\n  batchId: string;\n}\n\nexport default function CourseCard({ course, batchId }: CourseCardProps) {\n  return (\n    <Link href={`/batch/${batchId}/course/${course.id}`}>\n      <Card className=\"shadow-sm hover:shadow-lg transition-all duration-200 overflow-hidden cursor-pointer border hover:border-primary hover:-translate-y-1\">\n        <CardContent className=\"p-6\">\n          <div className=\"h-12 w-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center mb-4\">\n            <BookOpen className=\"text-white text-xl\" size={24} />\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{course.name}</h3>\n          {course.description && (\n            <p className=\"text-gray-600 text-sm mb-4\">{course.description}</p>\n          )}\n          \n          <div className=\"flex justify-between items-center text-sm text-gray-500 mt-4\">\n            <span>Course</span>\n            <div className=\"flex items-center text-primary\">\n              <span>View</span>\n              <ArrowRight className=\"ml-1 h-4 w-4\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}","size_bytes":1395},"client/src/components/grid-view-toggle.tsx":{"content":"import React from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Grid3X3, List, Grid2X2, LayoutGrid } from \"lucide-react\";\n\nexport type ViewMode = 'grid-small' | 'grid-medium' | 'grid-large' | 'list';\n\ninterface GridViewToggleProps {\n  viewMode: ViewMode;\n  onViewModeChange: (mode: ViewMode) => void;\n  className?: string;\n}\n\nexport default function GridViewToggle({ viewMode, onViewModeChange, className = \"\" }: GridViewToggleProps) {\n  return (\n    <div className={`flex items-center space-x-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1 ${className}`}>\n      <Button\n        variant={viewMode === 'list' ? 'default' : 'ghost'}\n        size=\"sm\"\n        onClick={() => onViewModeChange('list')}\n        className=\"p-2 h-8 w-8\"\n        title=\"List View\"\n      >\n        <List className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        variant={viewMode === 'grid-large' ? 'default' : 'ghost'}\n        size=\"sm\"\n        onClick={() => onViewModeChange('grid-large')}\n        className=\"p-2 h-8 w-8\"\n        title=\"Large Grid (2 columns)\"\n      >\n        <Grid2X2 className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        variant={viewMode === 'grid-medium' ? 'default' : 'ghost'}\n        size=\"sm\"\n        onClick={() => onViewModeChange('grid-medium')}\n        className=\"p-2 h-8 w-8\"\n        title=\"Medium Grid (3 columns)\"\n      >\n        <Grid3X3 className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        variant={viewMode === 'grid-small' ? 'default' : 'ghost'}\n        size=\"sm\"\n        onClick={() => onViewModeChange('grid-small')}\n        className=\"p-2 h-8 w-8\"\n        title=\"Small Grid (4+ columns)\"\n      >\n        <LayoutGrid className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n}\n\nexport function getGridClassName(viewMode: ViewMode): string {\n  switch (viewMode) {\n    case 'list':\n      return 'grid grid-cols-1 gap-4';\n    case 'grid-large':\n      return 'grid grid-cols-1 md:grid-cols-2 gap-6';\n    case 'grid-medium':\n      return 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6';\n    case 'grid-small':\n      return 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4';\n    default:\n      return 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6';\n  }\n}","size_bytes":2269},"client/src/components/platform-video-tabs.tsx":{"content":"import React, { useState } from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Clock, ExternalLink } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport MultiPlatformVideoEmbed from \"@/components/multi-platform-video-embed\";\nimport SecureVideoEmbed from \"@/components/secure-video-embed\";\nimport type { Video, MultiPlatformVideo } from \"@shared/schema\";\n\ninterface PlatformVideoTabsProps {\n  youtubeVideos: Video[];\n  multiPlatformVideos: MultiPlatformVideo[];\n  className?: string;\n}\n\nconst formatDuration = (seconds: number | null) => {\n  if (!seconds) return \"N/A\";\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n};\n\nconst getPlatformColor = (platform: string) => {\n  const colors = {\n    youtube: 'bg-red-500',\n    vimeo: 'bg-blue-500',\n    facebook: 'bg-blue-600',\n    dailymotion: 'bg-orange-500',\n    twitch: 'bg-purple-500',\n    peertube: 'bg-orange-600',\n    rumble: 'bg-green-600'\n  };\n  return colors[platform as keyof typeof colors] || 'bg-gray-500';\n};\n\nconst getPlatformIcon = (platform: string) => {\n  const icons = {\n    youtube: '▶️',\n    vimeo: '🎬',\n    facebook: '📘',\n    dailymotion: '🎥',\n    twitch: '🎮',\n    peertube: '🔗',\n    rumble: '🏆'\n  };\n  return icons[platform as keyof typeof icons] || '📹';\n};\n\n// Group multi-platform videos by platform\nconst groupVideosByPlatform = (videos: MultiPlatformVideo[]) => {\n  return videos.reduce((acc, video) => {\n    if (!acc[video.platform]) {\n      acc[video.platform] = [];\n    }\n    acc[video.platform].push(video);\n    return acc;\n  }, {} as Record<string, MultiPlatformVideo[]>);\n};\n\nexport default function PlatformVideoTabs({ youtubeVideos, multiPlatformVideos, className = \"\" }: PlatformVideoTabsProps) {\n  const [selectedTab, setSelectedTab] = useState(\"youtube\");\n  \n  const platformGroups = groupVideosByPlatform(multiPlatformVideos);\n  const platforms = Object.keys(platformGroups);\n  \n  // Count total videos per platform\n  const getVideoCounts = () => {\n    const counts = { youtube: youtubeVideos.length };\n    platforms.forEach(platform => {\n      counts[platform] = platformGroups[platform].length;\n    });\n    return counts;\n  };\n\n  const videoCounts = getVideoCounts();\n\n  return (\n    <div className={`w-full ${className}`}>\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-auto gap-1 bg-gray-100 dark:bg-gray-800 p-1\">\n          {/* YouTube Tab */}\n          <TabsTrigger \n            value=\"youtube\" \n            className=\"flex items-center space-x-2 data-[state=active]:bg-red-500 data-[state=active]:text-white\"\n          >\n            <span>▶️</span>\n            <span>YouTube</span>\n            <Badge variant=\"secondary\" className=\"ml-1\">\n              {videoCounts.youtube}\n            </Badge>\n          </TabsTrigger>\n\n          {/* Dynamic Platform Tabs */}\n          {platforms.map(platform => (\n            <TabsTrigger \n              key={platform}\n              value={platform}\n              className={`flex items-center space-x-2 data-[state=active]:${getPlatformColor(platform)} data-[state=active]:text-white`}\n            >\n              <span>{getPlatformIcon(platform)}</span>\n              <span className=\"capitalize\">{platform}</span>\n              <Badge variant=\"secondary\" className=\"ml-1\">\n                {videoCounts[platform]}\n              </Badge>\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        {/* YouTube Videos Content */}\n        <TabsContent value=\"youtube\" className=\"mt-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold flex items-center space-x-2\">\n                <span>▶️</span>\n                <span>YouTube Videos</span>\n                <Badge>{youtubeVideos.length}</Badge>\n              </h3>\n            </div>\n            \n            {youtubeVideos.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {youtubeVideos.map((video, index) => (\n                  <Card key={video.id} className=\"shadow-sm hover:shadow-md transition-shadow duration-200 overflow-hidden\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start space-x-3 mb-4\">\n                        <div className=\"h-8 w-8 bg-red-500 bg-opacity-10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                          <span className=\"text-red-500 font-semibold text-sm\">{index + 1}</span>\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"text-lg font-semibold text-gray-900 mb-2\">{video.title}</h4>\n                          {video.description && (\n                            <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">{video.description}</p>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center mb-4\">\n                        <div className=\"flex items-center text-sm text-gray-500\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          <span>{formatDuration(video.duration)}</span>\n                        </div>\n                        <Badge className=\"bg-red-100 text-red-700\">YouTube</Badge>\n                      </div>\n                      \n                      <Link href={`/video/${video.id}`}>\n                        <Button className=\"w-full flex items-center justify-center bg-red-600 hover:bg-red-700\">\n                          <Play className=\"h-4 w-4 mr-2\" />\n                          Watch Video\n                        </Button>\n                      </Link>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card className=\"text-center py-12\">\n                <CardContent>\n                  <span className=\"text-4xl mb-4 block\">▶️</span>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No YouTube videos</h3>\n                  <p className=\"text-gray-600\">No YouTube videos are available for this subject yet.</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        {/* Multi-Platform Videos Content */}\n        {platforms.map(platform => (\n          <TabsContent key={platform} value={platform} className=\"mt-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold flex items-center space-x-2\">\n                  <span>{getPlatformIcon(platform)}</span>\n                  <span className=\"capitalize\">{platform} Videos</span>\n                  <Badge>{platformGroups[platform].length}</Badge>\n                </h3>\n              </div>\n              \n              {platformGroups[platform].length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {platformGroups[platform].map((video, index) => (\n                    <Card key={video.id} className=\"shadow-sm hover:shadow-md transition-shadow duration-200 overflow-hidden\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start space-x-3 mb-4\">\n                          <div className={`h-8 w-8 ${getPlatformColor(platform)} bg-opacity-10 rounded-lg flex items-center justify-center flex-shrink-0`}>\n                            <span className={`text-${platform === 'youtube' ? 'red' : platform === 'vimeo' ? 'blue' : 'gray'}-500 font-semibold text-sm`}>\n                              {index + 1}\n                            </span>\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h4 className=\"text-lg font-semibold text-gray-900 mb-2\">{video.title}</h4>\n                            {video.description && (\n                              <p className=\"text-gray-600 text-sm mb-4 line-clamp-2\">{video.description}</p>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-between items-center mb-4\">\n                          <div className=\"flex items-center text-sm text-gray-500\">\n                            <Clock className=\"h-4 w-4 mr-1\" />\n                            <span>{formatDuration(video.durationSeconds)}</span>\n                          </div>\n                          <Badge className={`${getPlatformColor(platform)} text-white`}>\n                            <span className=\"capitalize\">{platform}</span>\n                          </Badge>\n                        </div>\n\n                        <div className=\"flex space-x-2\">\n                          <Link href={`/multi-video/${video.id}`} className=\"flex-1\">\n                            <Button className=\"w-full flex items-center justify-center\">\n                              <Play className=\"h-4 w-4 mr-2\" />\n                              Watch Video\n                            </Button>\n                          </Link>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"px-3\"\n                            onClick={() => window.open(video.videoUrl, '_blank')}\n                          >\n                            <ExternalLink className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <Card className=\"text-center py-12\">\n                  <CardContent>\n                    <span className=\"text-4xl mb-4 block\">{getPlatformIcon(platform)}</span>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No {platform} videos</h3>\n                    <p className=\"text-gray-600\">No {platform} videos are available for this subject yet.</p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n        ))}\n      </Tabs>\n    </div>\n  );\n}","size_bytes":10724},"client/src/components/video-protection-system.tsx":{"content":"import React from 'react';\n\n/**\n * Universal Video Protection System\n * This component ensures ALL YouTube embeds have consistent blocking functionality\n * Applied automatically to any video embed component\n */\ninterface VideoProtectionSystemProps {\n  className?: string;\n}\n\nexport default function VideoProtectionSystem({ className = \"\" }: VideoProtectionSystemProps) {\n  return (\n    <>\n      {/* Interactive blocking area for top-left YouTube logo - transparent with hover visibility */}\n      <div \n        className={`youtube-logo-blocker absolute top-0 left-0 w-full h-12 sm:h-14 md:h-16 bg-transparent hover:bg-black hover:bg-opacity-80 z-[999] pointer-events-auto transition-all duration-300 cursor-pointer ${className}`}\n        onClick={(e) => { \n          e.preventDefault(); \n          e.stopPropagation(); \n        }}\n        onMouseDown={(e) => { \n          e.preventDefault(); \n          e.stopPropagation(); \n        }}\n        onMouseUp={(e) => { \n          e.preventDefault(); \n          e.stopPropagation(); \n        }}\n        onContextMenu={(e) => { \n          e.preventDefault(); \n          e.stopPropagation(); \n        }}\n        title=\"Protected YouTube branding area\"\n      />\n      \n      {/* Hide bottom video ID area - black patch over video ID numbers */}\n      <div className={`absolute bottom-0 left-1/2 transform -translate-x-1/2 w-24 h-8 sm:w-32 sm:h-10 md:w-40 md:h-12 bg-black rounded z-20 pointer-events-none ${className}`} />\n      \n      {/* Bottom-left YouTube text blocker - transparent with hover visibility - extended 3cm wider */}\n      <div \n        className={`absolute bottom-0 left-0 w-44 h-16 sm:w-48 sm:h-18 md:w-52 md:h-20 bg-transparent hover:bg-black hover:bg-opacity-80 z-[999] pointer-events-auto cursor-pointer transition-all duration-300 ${className}`}\n        onClick={(e) => { \n          e.preventDefault(); \n          e.stopPropagation(); \n        }}\n        onContextMenu={(e) => { \n          e.preventDefault(); \n          e.stopPropagation(); \n        }}\n        title=\"YouTube branding blocked\"\n      />\n\n      {/* Bottom-right corner YouTube logo blocker - transparent with hover visibility */}\n      <div \n        className={`absolute bottom-0 right-0 w-20 h-12 bg-transparent hover:bg-black hover:bg-opacity-80 z-[999] pointer-events-auto cursor-pointer transition-all duration-300 ${className}`}\n        onClick={(e) => { \n          e.preventDefault(); \n          e.stopPropagation(); \n        }}\n        onContextMenu={(e) => { \n          e.preventDefault(); \n          e.stopPropagation(); \n        }}\n        title=\"YouTube branding blocked\"\n      />\n    </>\n  );\n}\n\n/**\n * Hook to automatically apply video protection\n * Use this in any component that embeds YouTube videos\n */\nexport function useVideoProtection() {\n  return {\n    ProtectionOverlay: VideoProtectionSystem,\n    protectionProps: {\n      className: \"video-protection-system\"\n    }\n  };\n}","size_bytes":2924},"client/src/hooks/use-view-mode.ts":{"content":"import { useState, useEffect } from 'react';\nimport type { ViewMode } from '@/components/grid-view-toggle';\n\nexport function useViewMode(storageKey: string, defaultMode: ViewMode = 'grid-medium') {\n  const [viewMode, setViewMode] = useState<ViewMode>(() => {\n    // Get from localStorage if available\n    if (typeof window !== 'undefined') {\n      const saved = localStorage.getItem(storageKey);\n      if (saved && ['grid-small', 'grid-medium', 'grid-large', 'list'].includes(saved)) {\n        return saved as ViewMode;\n      }\n    }\n    return defaultMode;\n  });\n\n  // Save to localStorage when view mode changes\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(storageKey, viewMode);\n    }\n  }, [viewMode, storageKey]);\n\n  return [viewMode, setViewMode] as const;\n}","size_bytes":806},"client/src/pages/multi-video-viewer.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, GraduationCap } from \"lucide-react\";\nimport MultiPlatformVideoEmbed from \"@/components/multi-platform-video-embed\";\nimport { AppLayout } from \"@/components/layout/app-layout\";\n\nimport type { MultiPlatformVideo, Subject } from \"@shared/schema\";\n\nexport default function MultiVideoViewer() {\n  const { videoId } = useParams<{ videoId: string }>();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: video, isLoading, error } = useQuery<MultiPlatformVideo>({\n    queryKey: [`/api/multi-platform-videos/${videoId}`],\n    retry: false,\n  });\n\n  const { data: subject } = useQuery<Subject>({\n    queryKey: [`/api/subjects/${video?.subjectId}`],\n    enabled: !!video?.subjectId,\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (error && isUnauthorizedError(error as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading video...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !video) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"text-center py-12 max-w-md\">\n          <CardContent>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Video not found</h3>\n            <p className=\"text-gray-600 mb-4\">The video you're looking for doesn't exist or you don't have access to it.</p>\n            <Link href=\"/\">\n              <Button>Go to Home</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <AppLayout pageType=\"multi-video\" showBannerAds={true} className=\"bg-gray-50\">\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              {subject && (\n                <Link href={`/batch/${subject.batchId}/subject/${subject.id}`}>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                    <ArrowLeft className=\"h-4 w-4\" />\n                  </Button>\n                </Link>\n              )}\n              <div className=\"h-8 w-8 bg-primary rounded-lg flex items-center justify-center mr-3\">\n                <GraduationCap className=\"text-white text-sm\" size={16} />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">{video.title}</h1>\n                <p className=\"text-sm text-gray-500 capitalize\">{video.platform} Video</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {(user as any)?.profileImageUrl && (\n                <img \n                  src={(user as any).profileImageUrl} \n                  alt=\"User Profile\" \n                  className=\"w-8 h-8 rounded-full object-cover\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Video Player */}\n          <div className=\"lg:col-span-2\">\n            <MultiPlatformVideoEmbed\n              platform={video.platform as any}\n              videoId={video.videoId!}\n              videoUrl={video.videoUrl}\n              title={video.title}\n              className=\"w-full\"\n            />\n            \n            {/* Video Description */}\n            {video.description && (\n              <Card className=\"mt-6\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-3\">About this video</h3>\n                  <p className=\"text-gray-700 whitespace-pre-wrap\">{video.description}</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Video Details</h3>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <span className=\"text-sm font-medium text-gray-500\">Platform</span>\n                    <p className=\"text-gray-900 capitalize flex items-center mt-1\">\n                      <span className=\"mr-2\">\n                        {video.platform === 'youtube' && '▶️'}\n                        {video.platform === 'vimeo' && '🎬'}\n                        {video.platform === 'facebook' && '📘'}\n                        {video.platform === 'dailymotion' && '🎥'}\n                        {video.platform === 'twitch' && '🎮'}\n                        {video.platform === 'peertube' && '🔗'}\n                      </span>\n                      {video.platform}\n                    </p>\n                  </div>\n\n                  {video.durationSeconds && (\n                    <div>\n                      <span className=\"text-sm font-medium text-gray-500\">Duration</span>\n                      <p className=\"text-gray-900 mt-1\">\n                        {Math.floor(video.durationSeconds / 60)}:{(video.durationSeconds % 60).toString().padStart(2, '0')}\n                      </p>\n                    </div>\n                  )}\n\n                  <div>\n                    <span className=\"text-sm font-medium text-gray-500\">Order</span>\n                    <p className=\"text-gray-900 mt-1\">Video #{video.orderIndex + 1}</p>\n                  </div>\n\n                  <div className=\"pt-4 border-t\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full\"\n                      onClick={() => window.open(video.videoUrl, '_blank')}\n                    >\n                      Open on {video.platform}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Subject Info */}\n            {subject && (\n              <Card className=\"mt-6\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-3\">Subject</h3>\n                  <p className=\"text-gray-900 font-medium\">{subject.name}</p>\n                  {subject.description && (\n                    <p className=\"text-gray-600 mt-2 text-sm\">{subject.description}</p>\n                  )}\n                  \n                  <Link href={`/batch/${subject.batchId}/subject/${subject.id}`} className=\"block mt-4\">\n                    <Button variant=\"outline\" className=\"w-full\">\n                      Back to Subject\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </main>\n    </AppLayout>\n  );\n}","size_bytes":7730},"client/src/components/ads/ad-placements.tsx":{"content":"import React from 'react';\nimport AdManager, { AdConfig } from './ad-manager';\n\ninterface AdPlacementsProps {\n  placement: 'header' | 'sidebar' | 'footer' | 'between-videos' | 'native';\n  adConfigs: AdConfig[];\n  className?: string;\n}\n\nexport default function AdPlacements({ placement, adConfigs, className = \"\" }: AdPlacementsProps) {\n  const relevantAds = adConfigs.filter(ad => \n    ad.placement === placement && ad.enabled\n  );\n\n  if (relevantAds.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`ad-placement ad-placement-${placement} ${className}`}>\n      {relevantAds.map((ad, index) => (\n        <AdManager \n          key={`${ad.id}-${index}`}\n          config={ad}\n          className={getPlacementStyles(placement, ad.format)}\n        />\n      ))}\n    </div>\n  );\n}\n\nfunction getPlacementStyles(placement: string, format: string): string {\n  const baseStyles = \"ad-unit\";\n  \n  switch (placement) {\n    case 'header':\n      return `${baseStyles} mb-4`;\n    \n    case 'sidebar':\n      return `${baseStyles} sticky top-4`;\n    \n    case 'footer':\n      return `${baseStyles} mt-4 border-t pt-4`;\n    \n    case 'between-videos':\n      return `${baseStyles} my-6 border border-gray-200 dark:border-gray-700 rounded-lg`;\n    \n    case 'native':\n      return `${baseStyles} mb-4`;\n    \n    default:\n      return baseStyles;\n  }\n}\n\n// Specific placement components for better organization\nexport function HeaderAds({ adConfigs }: { adConfigs: AdConfig[] }) {\n  return (\n    <AdPlacements \n      placement=\"header\" \n      adConfigs={adConfigs}\n      className=\"header-ads-container\"\n    />\n  );\n}\n\nexport function SidebarAds({ adConfigs }: { adConfigs: AdConfig[] }) {\n  return (\n    <div className=\"sidebar-ads-container space-y-4\">\n      <AdPlacements \n        placement=\"sidebar\" \n        adConfigs={adConfigs}\n      />\n    </div>\n  );\n}\n\nexport function FooterAds({ adConfigs }: { adConfigs: AdConfig[] }) {\n  return (\n    <AdPlacements \n      placement=\"footer\" \n      adConfigs={adConfigs}\n      className=\"footer-ads-container\"\n    />\n  );\n}\n\nexport function BetweenVideosAds({ adConfigs }: { adConfigs: AdConfig[] }) {\n  return (\n    <AdPlacements \n      placement=\"between-videos\" \n      adConfigs={adConfigs}\n      className=\"between-videos-ads-container\"\n    />\n  );\n}\n\nexport function NativeAds({ adConfigs }: { adConfigs: AdConfig[] }) {\n  return (\n    <AdPlacements \n      placement=\"native\" \n      adConfigs={adConfigs}\n      className=\"native-ads-container\"\n    />\n  );\n}","size_bytes":2508},"client/src/components/ads/ad-setup-guide.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExternalLink, CheckCircle, AlertCircle, DollarSign } from \"lucide-react\";\n\nexport default function AdSetupGuide() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-bold mb-2\">Ad Monetization Setup Guide</h1>\n        <p className=\"text-gray-600\">Complete guide to implementing AdSense, Adsterra, and promotional ads</p>\n      </div>\n\n      {/* Quick Start */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"h-5 w-5 text-green-500\" />\n            <span>✅ Quick Start - Instant Revenue</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-semibold text-green-600\">1. Adsterra (2-10 min approval)</h3>\n              <p className=\"text-sm text-gray-600 mb-2\">Start earning immediately</p>\n              <Badge variant=\"secondary\">$1-4 CPM</Badge>\n              <Button size=\"sm\" className=\"w-full mt-2\" asChild>\n                <a href=\"https://adsterra.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  Sign Up <ExternalLink className=\"ml-1 h-3 w-3\" />\n                </a>\n              </Button>\n            </div>\n            \n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-semibold text-blue-600\">2. Media.net (2-3 days)</h3>\n              <p className=\"text-sm text-gray-600 mb-2\">Yahoo/Bing network</p>\n              <Badge variant=\"secondary\">$2-8 CPM</Badge>\n              <Button size=\"sm\" className=\"w-full mt-2\" asChild>\n                <a href=\"https://media.net\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  Apply <ExternalLink className=\"ml-1 h-3 w-3\" />\n                </a>\n              </Button>\n            </div>\n\n            <div className=\"p-4 border rounded-lg\">\n              <h3 className=\"font-semibold text-purple-600\">3. AdSense (1-2 weeks)</h3>\n              <p className=\"text-sm text-gray-600 mb-2\">Premium earnings</p>\n              <Badge variant=\"secondary\">$3-12 CPM</Badge>\n              <Button size=\"sm\" className=\"w-full mt-2\" asChild>\n                <a href=\"https://adsense.google.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  Apply <ExternalLink className=\"ml-1 h-3 w-3\" />\n                </a>\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Implementation Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle>🎯 Current Implementation Status</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                <span className=\"font-medium\">Video Pause Overlay Ads</span>\n              </div>\n              <Badge variant=\"outline\" className=\"text-green-600\">Active</Badge>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                <span className=\"font-medium\">Pre-roll Video Ads</span>\n              </div>\n              <Badge variant=\"outline\" className=\"text-green-600\">Active</Badge>\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                <span className=\"font-medium\">Banner & Native Ads</span>\n              </div>\n              <Badge variant=\"outline\" className=\"text-green-600\">Active</Badge>\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                <span className=\"font-medium\">Between-Videos Ads</span>\n              </div>\n              <Badge variant=\"outline\" className=\"text-green-600\">Active</Badge>\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <AlertCircle className=\"h-5 w-5 text-blue-500\" />\n                <span className=\"font-medium\">Ad Network Integration</span>\n              </div>\n              <Badge variant=\"outline\" className=\"text-blue-600\">Ready for Setup</Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Revenue Projections */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <DollarSign className=\"h-5 w-5 text-green-500\" />\n            <span>Revenue Projections (Educational Content)</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center p-4 bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg border\">\n              <h3 className=\"font-semibold text-lg mb-2\">10K Monthly Views</h3>\n              <div className=\"space-y-1 text-sm\">\n                <div>Adsterra: $10-40/month</div>\n                <div>Media.net: $20-80/month</div>\n                <div>AdSense: $30-120/month</div>\n              </div>\n              <div className=\"font-bold text-green-600 mt-2\">Total: $60-240/month</div>\n            </div>\n\n            <div className=\"text-center p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg border\">\n              <h3 className=\"font-semibold text-lg mb-2\">50K Monthly Views</h3>\n              <div className=\"space-y-1 text-sm\">\n                <div>Adsterra: $50-200/month</div>\n                <div>Media.net: $100-400/month</div>\n                <div>AdSense: $150-600/month</div>\n              </div>\n              <div className=\"font-bold text-blue-600 mt-2\">Total: $300-1,200/month</div>\n            </div>\n\n            <div className=\"text-center p-4 bg-gradient-to-br from-purple-50 to-violet-50 rounded-lg border\">\n              <h3 className=\"font-semibold text-lg mb-2\">100K Monthly Views</h3>\n              <div className=\"space-y-1 text-sm\">\n                <div>Adsterra: $100-400/month</div>\n                <div>Media.net: $200-800/month</div>\n                <div>AdSense: $300-1,200/month</div>\n              </div>\n              <div className=\"font-bold text-purple-600 mt-2\">Total: $600-2,400/month</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Setup Instructions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>🚀 AdSense Setup</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n              <li>Create AdSense account at adsense.google.com</li>\n              <li>Add your website domain</li>\n              <li>Wait for approval (1-2 weeks)</li>\n              <li>Get ad unit codes from dashboard</li>\n              <li>Replace placeholder codes in ad system</li>\n            </ol>\n            \n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Educational content gets 2-3x higher CPM rates!</strong>\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>⚡ Adsterra Setup</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n              <li>Sign up at adsterra.com</li>\n              <li>Get instant approval (2-10 minutes)</li>\n              <li>Create ad units in dashboard</li>\n              <li>Copy VAST tags and banner codes</li>\n              <li>Update ad configurations</li>\n            </ol>\n            \n            <Alert>\n              <CheckCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Start earning within hours!</strong> Instant approval process.\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Code Examples */}\n      <Card>\n        <CardHeader>\n          <CardTitle>💻 Code Integration Examples</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <h3 className=\"font-semibold mb-2\">AdSense Banner Code:</h3>\n            <pre className=\"bg-gray-100 p-3 rounded text-sm overflow-x-auto\">\n{`<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-YOUR_PUBLISHER_ID\"\n     data-ad-slot=\"YOUR_AD_SLOT\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>`}\n            </pre>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-2\">Adsterra VAST Video Tag:</h3>\n            <pre className=\"bg-gray-100 p-3 rounded text-sm overflow-x-auto\">\n{`https://www.videosprofitnetwork.com/watch.xml?key=YOUR_KEY&w=640&h=360&cb=[CACHE_BUSTER]&url=[PAGE_URL]`}\n            </pre>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Important Notes */}\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <strong>Important:</strong> Replace all placeholder codes (YOUR_KEY, YOUR_PUBLISHER_ID, etc.) with actual values from your ad network accounts. The system is fully configured and ready - you just need to add your credentials!\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n}","size_bytes":10476},"client/src/components/ads/between-videos-ad.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { X, Play, SkipForward } from 'lucide-react';\nimport { useAdSystem } from '@/hooks/use-ad-system';\n\ninterface BetweenVideosAdProps {\n  onAdComplete: () => void;\n  onSkip: () => void;\n  nextVideoTitle?: string;\n}\n\nexport default function BetweenVideosAd({ onAdComplete, onSkip, nextVideoTitle }: BetweenVideosAdProps) {\n  const { configs } = useAdSystem();\n  const [currentAd, setCurrentAd] = useState<any>(null);\n  const [timeLeft, setTimeLeft] = useState(7);\n  const [canSkip, setCanSkip] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Get enabled between-videos ads\n  const betweenAds = configs.filter(ad => \n    ad.enabled && \n    ad.format === 'video' && \n    ad.placement === 'between-videos'\n  );\n\n  useEffect(() => {\n    if (betweenAds.length > 0) {\n      // Select random ad from available ones\n      const randomAd = betweenAds[Math.floor(Math.random() * betweenAds.length)];\n      setCurrentAd(randomAd);\n      setTimeLeft(randomAd.skipAfter || 7);\n    } else {\n      // No ads available, proceed to next video\n      onAdComplete();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (timeLeft > 0 && isPlaying) {\n      const timer = setTimeout(() => {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else if (timeLeft === 0) {\n      setCanSkip(true);\n    }\n  }, [timeLeft, isPlaying]);\n\n  const handleSkip = () => {\n    onSkip();\n    onAdComplete();\n  };\n\n  const handlePlayAd = () => {\n    setIsPlaying(true);\n  };\n\n  const handleAdComplete = () => {\n    onAdComplete();\n  };\n\n  if (!currentAd) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50\">\n      <Card className=\"w-full max-w-4xl mx-4\">\n        <CardContent className=\"p-0\">\n          {/* Ad Header */}\n          <div className=\"bg-gray-900 text-white p-4 flex justify-between items-center\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm font-medium\">Advertisement</span>\n              <span className=\"text-xs text-gray-400\">\n                ({currentAd.type === 'adsterra' ? 'Adsterra' : 'PropellerAds'})\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {canSkip ? (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={handleSkip}\n                  className=\"bg-white text-black hover:bg-gray-100\"\n                >\n                  <SkipForward className=\"h-4 w-4 mr-1\" />\n                  Skip Ad\n                </Button>\n              ) : (\n                <span className=\"text-sm text-gray-300\">\n                  Skip available in {timeLeft}s\n                </span>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleSkip}\n                className=\"text-white hover:bg-gray-800\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Video Ad Container */}\n          <div className=\"relative bg-black\" style={{ aspectRatio: '16/9' }}>\n            {!isPlaying ? (\n              // Ad Preview/Play Button\n              <div className=\"absolute inset-0 flex items-center justify-center bg-gradient-to-br from-blue-900 to-purple-900\">\n                <div className=\"text-center text-white\">\n                  <Button\n                    onClick={handlePlayAd}\n                    size=\"lg\"\n                    className=\"bg-red-600 hover:bg-red-700 text-white rounded-full w-20 h-20\"\n                  >\n                    <Play className=\"h-8 w-8 ml-1\" />\n                  </Button>\n                  <p className=\"mt-4 text-lg font-semibold\">Watch advertisement</p>\n                  <p className=\"text-sm text-gray-300\">Support our educational content</p>\n                  {currentAd.vastTag && currentAd.vastTag.includes('YOUR_KEY') && (\n                    <p className=\"text-xs text-yellow-400 mt-2\">\n                      Demo mode - Real ads will show after setup\n                    </p>\n                  )}\n                </div>\n              </div>\n            ) : (\n              // Actual Video Ad\n              <div className=\"absolute inset-0\">\n                {currentAd.vastTag && !currentAd.vastTag.includes('YOUR_KEY') ? (\n                  // Real VAST ad\n                  <video\n                    className=\"w-full h-full object-cover\"\n                    autoPlay\n                    onEnded={handleAdComplete}\n                    controls={false}\n                  >\n                    <source src={currentAd.vastTag} type=\"video/mp4\" />\n                  </video>\n                ) : (\n                  // Demo ad when no real code is configured\n                  <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-r from-green-600 to-blue-600 text-white\">\n                    <div className=\"text-center\">\n                      <div className=\"animate-spin w-12 h-12 border-4 border-white border-t-transparent rounded-full mx-auto mb-4\"></div>\n                      <h3 className=\"text-xl font-bold mb-2\">Sample Video Ad</h3>\n                      <p className=\"text-sm opacity-90\">Configure your {currentAd.type} VAST tag in admin panel</p>\n                      <p className=\"text-xs mt-2\">Ad will complete automatically</p>\n                    </div>\n                  </div>\n                )}\n                \n                {/* Skip button overlay */}\n                {canSkip && (\n                  <div className=\"absolute top-4 right-4\">\n                    <Button\n                      onClick={handleSkip}\n                      size=\"sm\"\n                      className=\"bg-black bg-opacity-70 text-white hover:bg-opacity-90\"\n                    >\n                      <SkipForward className=\"h-4 w-4 mr-1\" />\n                      Skip\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Next Video Preview */}\n          {nextVideoTitle && (\n            <div className=\"bg-gray-50 p-4 border-t\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Next video:</p>\n                  <p className=\"font-medium text-gray-900\">{nextVideoTitle}</p>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  onClick={handleSkip}\n                  className=\"text-blue-600 border-blue-600 hover:bg-blue-50\"\n                >\n                  Continue Learning\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Auto-complete timer for demo mode */}\n      {isPlaying && currentAd.vastTag && currentAd.vastTag.includes('YOUR_KEY') && (\n        <div className=\"fixed bottom-4 left-1/2 transform -translate-x-1/2\">\n          <div className=\"bg-black bg-opacity-70 text-white px-4 py-2 rounded-full text-sm\">\n            Demo ad will complete automatically in 3 seconds...\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Auto-complete demo ad after 3 seconds when playing\nsetTimeout(() => {\n  if (typeof window !== 'undefined') {\n    const demoComplete = new CustomEvent('demoAdComplete');\n    window.dispatchEvent(demoComplete);\n  }\n}, 3000);","size_bytes":7745},"client/src/components/ads/brand-video-ad.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, ExternalLink, Play, Pause, Volume2, VolumeX } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { BrandPromotion } from \"@shared/schema\";\n\ninterface BrandVideoAdProps {\n  placementType: \"pre-roll\" | \"mid-roll\" | \"post-roll\" | \"between-videos\";\n  videoId?: string;\n  subjectId?: string;\n  batchId?: string;\n  onSkip?: () => void;\n  onComplete?: () => void;\n  className?: string;\n}\n\nexport function BrandVideoAd({ \n  placementType, \n  videoId, \n  subjectId, \n  batchId, \n  onSkip, \n  onComplete,\n  className = \"\"\n}: BrandVideoAdProps) {\n  const [promotion, setPromotion] = useState<BrandPromotion | null>(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const [countdown, setCountdown] = useState(7);\n  const [canSkip, setCanSkip] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [videoRef, setVideoRef] = useState<HTMLVideoElement | null>(null);\n\n  // Fetch active brand promotion\n  useEffect(() => {\n    const fetchPromotion = async () => {\n      try {\n        const params = new URLSearchParams();\n        params.append(\"placementType\", placementType);\n        if (videoId) params.append(\"videoId\", videoId);\n        if (subjectId) params.append(\"subjectId\", subjectId);\n        if (batchId) params.append(\"batchId\", batchId);\n\n        const response = await fetch(`/api/brand-promotions/active?${params.toString()}`, {\n          headers: { \"Content-Type\": \"application/json\" }\n        });\n        const promotions = await response.json();\n        if (promotions && promotions.length > 0) {\n          // Get the highest priority promotion\n          const selectedPromotion = promotions.sort((a: BrandPromotion, b: BrandPromotion) => \n            (b.priority || 1) - (a.priority || 1)\n          )[0];\n          \n          setPromotion(selectedPromotion);\n          setIsVisible(true);\n          \n          // Track impression\n          await trackAnalytics(selectedPromotion.id, \"view\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching brand promotion:\", error);\n      }\n    };\n\n    fetchPromotion();\n  }, [placementType, videoId, subjectId, batchId]);\n\n  // Countdown timer\n  useEffect(() => {\n    if (!isVisible || !promotion) return;\n\n    const timer = setInterval(() => {\n      setCountdown((prev) => {\n        if (prev <= 1) {\n          setCanSkip(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isVisible, promotion]);\n\n  // Auto-close after 30 seconds\n  useEffect(() => {\n    if (!isVisible) return;\n\n    const autoCloseTimer = setTimeout(() => {\n      handleClose();\n    }, 30000);\n\n    return () => clearTimeout(autoCloseTimer);\n  }, [isVisible]);\n\n  const trackAnalytics = async (promotionId: string, actionType: string) => {\n    try {\n      await fetch(\"/api/brand-promotions/analytics\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          promotionId,\n          videoId,\n          actionType,\n          deviceType: window.innerWidth <= 768 ? \"mobile\" : window.innerWidth <= 1024 ? \"tablet\" : \"desktop\",\n          userAgent: navigator.userAgent,\n        }),\n      });\n    } catch (error) {\n      console.error(\"Error tracking analytics:\", error);\n    }\n  };\n\n  const handleSkip = () => {\n    if (promotion) {\n      trackAnalytics(promotion.id, \"skip\");\n    }\n    setIsVisible(false);\n    onSkip?.();\n  };\n\n  const handleClose = () => {\n    if (promotion) {\n      trackAnalytics(promotion.id, \"complete\");\n    }\n    setIsVisible(false);\n    onComplete?.();\n  };\n\n  const handleCTAClick = () => {\n    if (!promotion) return;\n    \n    trackAnalytics(promotion.id, \"click\");\n    \n    if (promotion.websiteUrl) {\n      window.open(promotion.websiteUrl, \"_blank\", \"noopener,noreferrer\");\n    }\n  };\n\n  const getYouTubeVideoId = (url: string) => {\n    const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\n    const match = url.match(regex);\n    return match ? match[1] : null;\n  };\n\n  const togglePlay = () => {\n    if (!videoRef) return;\n    \n    if (isPlaying) {\n      videoRef.pause();\n    } else {\n      videoRef.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const toggleMute = () => {\n    if (!videoRef) return;\n    \n    videoRef.muted = !isMuted;\n    setIsMuted(!isMuted);\n  };\n\n  if (!isVisible || !promotion) {\n    return null;\n  }\n\n  const youtubeVideoId = promotion.videoUrl ? getYouTubeVideoId(promotion.videoUrl) : null;\n\n  return (\n    <div className={`fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4 ${className}`}>\n      <Card className=\"w-full max-w-4xl mx-auto overflow-hidden\">\n        <CardContent className=\"p-0\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              {promotion.brandLogo && (\n                <img \n                  src={promotion.brandLogo} \n                  alt={promotion.brandName}\n                  className=\"w-10 h-10 object-contain rounded-full bg-white p-1\"\n                />\n              )}\n              <div>\n                <h3 className=\"font-semibold text-lg\">{promotion.brandName}</h3>\n                <p className=\"text-blue-100 text-sm\">{promotion.productName}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"bg-white/20 text-white\">\n                Sponsored\n              </Badge>\n              {canSkip ? (\n                <Button variant=\"outline\" size=\"sm\" onClick={handleSkip} className=\"text-white border-white/50 hover:bg-white/10\">\n                  Skip Ad\n                  <X className=\"w-4 h-4 ml-1\" />\n                </Button>\n              ) : (\n                <div className=\"text-sm bg-white/20 px-3 py-1 rounded\">\n                  Skip in {countdown}s\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Video Content */}\n          <div className=\"relative aspect-video bg-black\">\n            {youtubeVideoId ? (\n              <iframe\n                src={`https://www.youtube-nocookie.com/embed/${youtubeVideoId}?autoplay=1&mute=1&controls=1&rel=0&modestbranding=1`}\n                className=\"w-full h-full\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n                onLoad={() => trackAnalytics(promotion.id, \"view\")}\n              />\n            ) : (\n              <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-50\">\n                <div className=\"text-center p-8\">\n                  {promotion.brandLogo && (\n                    <img \n                      src={promotion.brandLogo} \n                      alt={promotion.brandName}\n                      className=\"w-24 h-24 object-contain mx-auto mb-4 rounded-lg shadow-lg\"\n                    />\n                  )}\n                  <h3 className=\"text-2xl font-bold text-gray-800 mb-2\">{promotion.productName}</h3>\n                  {promotion.productDescription && (\n                    <p className=\"text-gray-600 max-w-md mx-auto leading-relaxed\">\n                      {promotion.productDescription}\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Action Section */}\n          <div className=\"p-4 bg-gray-50 flex items-center justify-between\">\n            <div className=\"flex-1\">\n              <h4 className=\"font-semibold text-gray-800\">{promotion.productName}</h4>\n              {promotion.productDescription && (\n                <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">\n                  {promotion.productDescription}\n                </p>\n              )}\n            </div>\n            <div className=\"flex items-center gap-3 ml-4\">\n              {promotion.websiteUrl && (\n                <Button onClick={handleCTAClick} className=\"bg-blue-600 hover:bg-blue-700\">\n                  {promotion.callToAction}\n                  <ExternalLink className=\"w-4 h-4 ml-2\" />\n                </Button>\n              )}\n              <Button variant=\"outline\" onClick={handleClose}>\n                Close\n              </Button>\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"h-1 bg-gray-200\">\n            <div \n              className=\"h-full bg-blue-600 transition-all duration-1000\"\n              style={{ width: `${((7 - countdown) / 7) * 100}%` }}\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Hook for easy integration\nexport function useBrandVideoAd(\n  placementType: \"pre-roll\" | \"mid-roll\" | \"post-roll\" | \"between-videos\",\n  context: { videoId?: string; subjectId?: string; batchId?: string }\n) {\n  const [showAd, setShowAd] = useState(false);\n\n  const triggerAd = () => {\n    setShowAd(true);\n  };\n\n  const hideAd = () => {\n    setShowAd(false);\n  };\n\n  const AdComponent = showAd ? (\n    <BrandVideoAd\n      placementType={placementType}\n      videoId={context.videoId}\n      subjectId={context.subjectId}\n      batchId={context.batchId}\n      onSkip={hideAd}\n      onComplete={hideAd}\n    />\n  ) : null;\n\n  return {\n    AdComponent,\n    triggerAd,\n    hideAd,\n    isShowing: showAd,\n  };\n}","size_bytes":9820},"client/src/components/ads/pause-overlay-ad.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { X, ExternalLink, Play } from \"lucide-react\";\nimport AdManager, { AdConfig } from './ad-manager';\n\ninterface PauseOverlayAdProps {\n  isVisible: boolean;\n  onClose: () => void;\n  onResume: () => void;\n  adConfigs: AdConfig[];\n}\n\nexport default function PauseOverlayAd({ \n  isVisible, \n  onClose, \n  onResume, \n  adConfigs \n}: PauseOverlayAdProps) {\n  const [currentAdIndex, setCurrentAdIndex] = useState(0);\n  const [showAd, setShowAd] = useState(false);\n\n  const pauseAds = adConfigs.filter(ad => \n    ad.placement === 'pause-overlay' && ad.enabled\n  );\n\n  useEffect(() => {\n    if (isVisible && pauseAds.length > 0) {\n      // Show ad after a brief delay when video is paused\n      const timer = setTimeout(() => {\n        setShowAd(true);\n      }, 2000); // 2 second delay\n\n      return () => clearTimeout(timer);\n    } else {\n      setShowAd(false);\n    }\n  }, [isVisible, pauseAds.length]);\n\n  const handleAdClose = () => {\n    setShowAd(false);\n    onClose();\n  };\n\n  const handleResumeVideo = () => {\n    setShowAd(false);\n    onResume();\n  };\n\n  const handleNextAd = () => {\n    if (currentAdIndex < pauseAds.length - 1) {\n      setCurrentAdIndex(currentAdIndex + 1);\n    } else {\n      setCurrentAdIndex(0);\n    }\n  };\n\n  if (!isVisible || !showAd || pauseAds.length === 0) {\n    return null;\n  }\n\n  const currentAd = pauseAds[currentAdIndex];\n\n  return (\n    <div className=\"absolute inset-0 bg-black/70 flex items-center justify-center z-[1500]\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-2xl max-w-md mx-4 overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-300\">\n              Video Paused\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleResumeVideo}\n              className=\"p-2\"\n              title=\"Resume Video\"\n            >\n              <Play className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleAdClose}\n              className=\"p-2\"\n              title=\"Close\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Ad Content */}\n        <div className=\"p-6\">\n          {currentAd.type === 'promotional' ? (\n            <PromotionalPauseAd \n              ad={currentAd} \n              onAction={handleAdClose}\n            />\n          ) : currentAd.type === 'adsense' ? (\n            <AdSensePauseAd \n              ad={currentAd} \n              onLoad={() => {}}\n            />\n          ) : currentAd.type === 'adsterra' ? (\n            <AdsterraPauseAd \n              ad={currentAd} \n              onLoad={() => {}}\n            />\n          ) : null}\n        </div>\n\n        {/* Footer */}\n        <div className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 border-t border-gray-200 dark:border-gray-600\">\n          <div className=\"flex items-center justify-between\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleResumeVideo}\n              className=\"flex items-center space-x-2\"\n            >\n              <Play className=\"h-4 w-4\" />\n              <span>Resume Video</span>\n            </Button>\n            \n            {pauseAds.length > 1 && (\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-xs text-gray-500\">\n                  {currentAdIndex + 1} of {pauseAds.length}\n                </span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleNextAd}\n                  className=\"text-xs\"\n                >\n                  Next\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Promotional Ad Component\ninterface PromotionalPauseAdProps {\n  ad: AdConfig;\n  onAction: () => void;\n}\n\nfunction PromotionalPauseAd({ ad, onAction }: PromotionalPauseAdProps) {\n  const handleClick = () => {\n    if (ad.clickUrl) {\n      window.open(ad.clickUrl, '_blank');\n    }\n    onAction();\n  };\n\n  return (\n    <div className=\"text-center\">\n      {ad.imageUrl && (\n        <img \n          src={ad.imageUrl} \n          alt={ad.title}\n          className=\"w-full h-32 object-cover rounded-lg mb-4\"\n        />\n      )}\n      \n      <h3 className=\"text-lg font-semibold mb-2 text-gray-900 dark:text-white\">\n        {ad.title}\n      </h3>\n      \n      <p className=\"text-gray-600 dark:text-gray-300 mb-4 text-sm\">\n        {ad.description}\n      </p>\n      \n      <Button \n        onClick={handleClick}\n        className=\"w-full bg-blue-600 hover:bg-blue-700\"\n      >\n        <ExternalLink className=\"h-4 w-4 mr-2\" />\n        Learn More\n      </Button>\n      \n      <p className=\"text-xs text-gray-400 mt-2\">Sponsored Content</p>\n    </div>\n  );\n}\n\n// AdSense Pause Ad Component\ninterface AdSensePauseAdProps {\n  ad: AdConfig;\n  onLoad: () => void;\n}\n\nfunction AdSensePauseAd({ ad, onLoad }: AdSensePauseAdProps) {\n  useEffect(() => {\n    // Load AdSense script if not already loaded\n    if (!document.querySelector('script[src*=\"adsbygoogle\"]')) {\n      const script = document.createElement('script');\n      script.async = true;\n      script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js';\n      script.crossOrigin = 'anonymous';\n      script.onload = onLoad;\n      document.head.appendChild(script);\n    } else {\n      onLoad();\n    }\n  }, [onLoad]);\n\n  return (\n    <div className=\"text-center\">\n      <p className=\"text-xs text-gray-400 mb-2\">Advertisement</p>\n      <div \n        dangerouslySetInnerHTML={{ __html: ad.code || '' }}\n        className=\"adsense-container\"\n      />\n      <p className=\"text-xs text-gray-400 mt-2\">Powered by Google</p>\n    </div>\n  );\n}\n\n// Adsterra Pause Ad Component\ninterface AdsterraPauseAdProps {\n  ad: AdConfig;\n  onLoad: () => void;\n}\n\nfunction AdsterraPauseAd({ ad, onLoad }: AdsterraPauseAdProps) {\n  useEffect(() => {\n    // Load Adsterra script\n    if (ad.code) {\n      const script = document.createElement('script');\n      script.async = true;\n      script.src = ad.code;\n      script.onload = onLoad;\n      document.head.appendChild(script);\n    }\n  }, [ad.code, onLoad]);\n\n  return (\n    <div className=\"text-center\">\n      <p className=\"text-xs text-gray-400 mb-2\">Advertisement</p>\n      <div className=\"adsterra-container min-h-[120px] bg-gray-100 dark:bg-gray-700 rounded flex items-center justify-center\">\n        <span className=\"text-gray-500\">Loading ad...</span>\n      </div>\n      <p className=\"text-xs text-gray-400 mt-2\">Powered by Adsterra</p>\n    </div>\n  );\n}","size_bytes":7168},"client/src/components/ads/promotional-video-ad.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { X, Play, Pause, Volume2, VolumeX, SkipForward } from \"lucide-react\";\nimport type { BrandPromotion } from \"@shared/schema\";\n\ninterface PromotionalVideoAdProps {\n  videoId?: string;\n  subjectId?: string;\n  batchId?: string;\n  onAdComplete?: () => void;\n  placement: \"pre-roll\" | \"mid-roll\" | \"between-videos\";\n}\n\nexport default function PromotionalVideoAd({\n  videoId,\n  subjectId,\n  batchId,\n  onAdComplete,\n  placement\n}: PromotionalVideoAdProps) {\n  const [promotion, setPromotion] = useState<BrandPromotion | null>(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [canSkip, setCanSkip] = useState(false);\n  const [skipTimer, setSkipTimer] = useState(5);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const skipIntervalRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    loadPromotion();\n    \n    // Cleanup function\n    return () => {\n      if (videoRef.current) {\n        videoRef.current.pause();\n        videoRef.current.src = \"\";\n      }\n      if (skipIntervalRef.current) {\n        clearInterval(skipIntervalRef.current);\n      }\n    };\n  }, [videoId, subjectId, batchId, placement]);\n\n  useEffect(() => {\n    if (isVisible && !canSkip) {\n      skipIntervalRef.current = setInterval(() => {\n        setSkipTimer(prev => {\n          if (prev <= 1) {\n            setCanSkip(true);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (skipIntervalRef.current) {\n        clearInterval(skipIntervalRef.current);\n      }\n    };\n  }, [isVisible, canSkip]);\n\n  const loadPromotion = async () => {\n    try {\n      const params = new URLSearchParams();\n      params.append(\"placement\", placement);\n      if (videoId) params.append(\"videoId\", videoId);\n      if (subjectId) params.append(\"subjectId\", subjectId);\n      if (batchId) params.append(\"batchId\", batchId);\n\n      const response = await fetch(`/api/brand-promotions/active?${params.toString()}`, {\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n      const promotions = await response.json();\n      \n      if (promotions && promotions.length > 0) {\n        // Get video promotion (filter by video URL presence)\n        const videoPromotions = promotions.filter((p: BrandPromotion) => \n          p.videoUrl && p.videoUrl.trim() !== \"\"\n        );\n        \n        if (videoPromotions.length > 0) {\n          const selectedPromotion = videoPromotions.sort((a: BrandPromotion, b: BrandPromotion) => \n            (b.priority || 1) - (a.priority || 1)\n          )[0];\n          \n          setPromotion(selectedPromotion);\n          setIsVisible(true);\n          trackAnalytics(selectedPromotion.id, \"impression\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error loading promotional video ad:\", error);\n    }\n  };\n\n  const trackAnalytics = async (promotionId: string, actionType: string) => {\n    try {\n      await fetch(\"/api/brand-promotions/analytics\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          promotionId,\n          videoId,\n          actionType,\n          deviceType: window.innerWidth <= 768 ? \"mobile\" : window.innerWidth <= 1024 ? \"tablet\" : \"desktop\",\n          userAgent: navigator.userAgent,\n        }),\n      });\n    } catch (error) {\n      console.error(\"Error tracking analytics:\", error);\n    }\n  };\n\n  const handlePlay = () => {\n    if (videoRef.current) {\n      videoRef.current.play();\n      setIsPlaying(true);\n      if (promotion) {\n        trackAnalytics(promotion.id, \"play\");\n      }\n    }\n  };\n\n  const handlePause = () => {\n    if (videoRef.current) {\n      videoRef.current.pause();\n      setIsPlaying(false);\n    }\n  };\n\n  const handleMute = () => {\n    if (videoRef.current) {\n      videoRef.current.muted = !videoRef.current.muted;\n      setIsMuted(!isMuted);\n    }\n  };\n\n  const handleSkip = () => {\n    if (promotion) {\n      trackAnalytics(promotion.id, \"skip\");\n    }\n    closeAd();\n  };\n\n  const handleAdClick = () => {\n    if (promotion) {\n      trackAnalytics(promotion.id, \"click\");\n      if (promotion.websiteUrl) {\n        window.open(promotion.websiteUrl, \"_blank\");\n      }\n    }\n  };\n\n  const closeAd = () => {\n    if (videoRef.current) {\n      videoRef.current.pause();\n      videoRef.current.src = \"\";\n    }\n    setIsVisible(false);\n    onAdComplete?.();\n  };\n\n  const handleVideoEnd = () => {\n    if (promotion) {\n      trackAnalytics(promotion.id, \"complete\");\n    }\n    closeAd();\n  };\n\n  const handleTimeUpdate = () => {\n    if (videoRef.current) {\n      setCurrentTime(videoRef.current.currentTime);\n    }\n  };\n\n  const handleLoadedMetadata = () => {\n    if (videoRef.current) {\n      setDuration(videoRef.current.duration);\n      // Auto-play if allowed\n      const playPromise = videoRef.current.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(() => {\n          // Auto-play prevented, show play button\n          setIsPlaying(false);\n        });\n      }\n    }\n  };\n\n  if (!isVisible || !promotion || !promotion.videoUrl) {\n    return null;\n  }\n\n  // Additional safety check to prevent React DOM errors\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  const progressPercentage = duration > 0 ? (currentTime / duration) * 100 : 0;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center p-4\">\n      <Card className=\"relative w-full max-w-4xl bg-black border-gray-700\">\n        {/* Skip Button */}\n        <div className=\"absolute top-4 right-4 z-10\">\n          {canSkip ? (\n            <Button\n              onClick={handleSkip}\n              variant=\"secondary\"\n              size=\"sm\"\n              className=\"bg-gray-800 text-white hover:bg-gray-700\"\n            >\n              <SkipForward className=\"h-4 w-4 mr-1\" />\n              Skip Ad\n            </Button>\n          ) : (\n            <div className=\"bg-gray-800 text-white px-3 py-2 rounded text-sm\">\n              Ad will be skippable in {skipTimer}s\n            </div>\n          )}\n        </div>\n\n        {/* Video Container */}\n        <div className=\"relative aspect-video bg-black rounded-lg overflow-hidden\">\n          <video\n            ref={videoRef}\n            src={promotion.videoUrl}\n            className=\"w-full h-full object-cover cursor-pointer\"\n            onTimeUpdate={handleTimeUpdate}\n            onLoadedMetadata={handleLoadedMetadata}\n            onEnded={handleVideoEnd}\n            onClick={handleAdClick}\n            onError={(e) => {\n              console.error(\"Video load error:\", e);\n              // Skip the ad if video fails to load\n              handleSkip();\n            }}\n            muted={isMuted}\n            playsInline\n            preload=\"metadata\"\n            crossOrigin=\"anonymous\"\n          />\n\n          {/* Video Controls Overlay */}\n          <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4\">\n            {/* Progress Bar */}\n            <div className=\"w-full bg-gray-600 h-1 rounded-full mb-3\">\n              <div \n                className=\"bg-red-600 h-1 rounded-full transition-all duration-300\"\n                style={{ width: `${progressPercentage}%` }}\n              />\n            </div>\n\n            {/* Controls */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  onClick={isPlaying ? handlePause : handlePlay}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Play className=\"h-5 w-5\" />}\n                </Button>\n                \n                <Button\n                  onClick={handleMute}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  {isMuted ? <VolumeX className=\"h-5 w-5\" /> : <Volume2 className=\"h-5 w-5\" />}\n                </Button>\n\n                <div className=\"text-white text-sm\">\n                  {Math.floor(currentTime)}s / {Math.floor(duration)}s\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                {/* Ad Info */}\n                <div className=\"text-white text-xs bg-yellow-600 px-2 py-1 rounded\">\n                  AD\n                </div>\n                \n                {/* Brand Info */}\n                <div className=\"text-white text-sm\">\n                  {promotion.brandName}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Click Overlay */}\n          {promotion.websiteUrl && (\n            <div \n              className=\"absolute inset-0 cursor-pointer\"\n              onClick={handleAdClick}\n            />\n          )}\n        </div>\n\n        {/* Ad Description */}\n        {promotion.productDescription && (\n          <div className=\"p-4 bg-gray-900 text-white\">\n            <h3 className=\"font-semibold text-lg mb-2\">{promotion.productName}</h3>\n            <p className=\"text-gray-300 text-sm\">{promotion.productDescription}</p>\n            {promotion.websiteUrl && (\n              <Button\n                onClick={handleAdClick}\n                className=\"mt-3 bg-blue-600 hover:bg-blue-700\"\n                size=\"sm\"\n              >\n                {promotion.callToAction || \"Learn More\"}\n              </Button>\n            )}\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n}","size_bytes":9981},"client/src/components/ads/video-ads.tsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Play, X, SkipForward, Volume2, VolumeX } from \"lucide-react\";\nimport type { AdConfig } from './ad-manager';\n\ninterface VideoAdsProps {\n  type: 'pre-roll' | 'mid-roll' | 'post-roll' | 'between-videos';\n  adConfigs: AdConfig[];\n  onComplete: () => void;\n  onSkip?: () => void;\n  skipAfter?: number; // seconds\n}\n\nexport default function VideoAds({ \n  type, \n  adConfigs, \n  onComplete, \n  onSkip, \n  skipAfter = 5 \n}: VideoAdsProps) {\n  const [currentAdIndex, setCurrentAdIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [canSkip, setCanSkip] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [showControls, setShowControls] = useState(true);\n  const [isLoading, setIsLoading] = useState(true);\n  \n  const videoRef = useRef<HTMLVideoElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const relevantAds = adConfigs.filter(ad => \n    ad.format === 'video' && ad.enabled && \n    ad.placement === 'between-videos'\n  );\n\n  useEffect(() => {\n    if (relevantAds.length === 0) {\n      onComplete();\n      return;\n    }\n\n    loadCurrentAd();\n  }, [currentAdIndex, relevantAds.length]);\n\n  useEffect(() => {\n    // Enable skip button after specified time\n    if (isPlaying && currentTime >= skipAfter) {\n      setCanSkip(true);\n    }\n  }, [currentTime, skipAfter, isPlaying]);\n\n  const loadCurrentAd = async () => {\n    const currentAd = relevantAds[currentAdIndex];\n    if (!currentAd) return;\n\n    setIsLoading(true);\n\n    if (currentAd.type === 'adsterra' && currentAd.vastTag) {\n      await loadVastAd(currentAd.vastTag);\n    } else if (currentAd.type === 'promotional' && currentAd.clickUrl) {\n      // Handle promotional video ads\n      setIsLoading(false);\n    }\n  };\n\n  const loadVastAd = async (vastTag: string) => {\n    try {\n      const response = await fetch(vastTag);\n      const vastXml = await response.text();\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(vastXml, 'text/xml');\n      \n      // Extract video URL from VAST XML\n      const mediaFiles = xmlDoc.getElementsByTagName('MediaFile');\n      if (mediaFiles.length > 0 && videoRef.current) {\n        const videoUrl = mediaFiles[0].textContent?.trim();\n        if (videoUrl) {\n          videoRef.current.src = videoUrl;\n          setIsLoading(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading VAST ad:', error);\n      handleNextAd();\n    }\n  };\n\n  const handlePlay = () => {\n    if (videoRef.current) {\n      videoRef.current.play();\n      setIsPlaying(true);\n    }\n  };\n\n  const handlePause = () => {\n    if (videoRef.current) {\n      videoRef.current.pause();\n      setIsPlaying(false);\n    }\n  };\n\n  const handleSkip = () => {\n    if (canSkip || onSkip) {\n      onSkip?.();\n      handleNextAd();\n    }\n  };\n\n  const handleNextAd = () => {\n    if (currentAdIndex < relevantAds.length - 1) {\n      setCurrentAdIndex(currentAdIndex + 1);\n      setCurrentTime(0);\n      setCanSkip(false);\n      setIsPlaying(false);\n    } else {\n      onComplete();\n    }\n  };\n\n  const handleVideoEnd = () => {\n    setIsPlaying(false);\n    handleNextAd();\n  };\n\n  const handleTimeUpdate = () => {\n    if (videoRef.current) {\n      setCurrentTime(videoRef.current.currentTime);\n      setDuration(videoRef.current.duration || 0);\n    }\n  };\n\n  const handleAdClick = () => {\n    const currentAd = relevantAds[currentAdIndex];\n    if (currentAd?.clickUrl) {\n      window.open(currentAd.clickUrl, '_blank');\n    }\n  };\n\n  const toggleMute = () => {\n    if (videoRef.current) {\n      videoRef.current.muted = !isMuted;\n      setIsMuted(!isMuted);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (relevantAds.length === 0) {\n    return null;\n  }\n\n  const currentAd = relevantAds[currentAdIndex];\n\n  return (\n    <div \n      ref={containerRef}\n      className=\"fixed inset-0 bg-black z-[2000] flex items-center justify-center\"\n      onMouseEnter={() => setShowControls(true)}\n      onMouseLeave={() => setShowControls(false)}\n    >\n      {/* Video Container */}\n      <div className=\"relative w-full h-full max-w-4xl mx-auto\">\n        {isLoading ? (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-white text-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\n              <p>Loading advertisement...</p>\n            </div>\n          </div>\n        ) : (\n          <>\n            {/* Video Element */}\n            <video\n              ref={videoRef}\n              className=\"w-full h-full object-contain cursor-pointer\"\n              onTimeUpdate={handleTimeUpdate}\n              onEnded={handleVideoEnd}\n              onLoadedMetadata={() => setDuration(videoRef.current?.duration || 0)}\n              onClick={handleAdClick}\n              muted={isMuted}\n            />\n\n            {/* Ad Overlay Information */}\n            <div className=\"absolute top-4 left-4 bg-black/50 text-white px-3 py-1 rounded text-sm\">\n              Advertisement {currentAdIndex + 1} of {relevantAds.length}\n            </div>\n\n            {/* Skip Button */}\n            {(canSkip || onSkip) && (\n              <div className=\"absolute top-4 right-4\">\n                <Button\n                  onClick={handleSkip}\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  className=\"bg-black/50 text-white hover:bg-black/70\"\n                >\n                  <SkipForward className=\"h-4 w-4 mr-1\" />\n                  Skip Ad\n                </Button>\n              </div>\n            )}\n\n            {/* Skip Countdown */}\n            {!canSkip && skipAfter > 0 && currentTime < skipAfter && (\n              <div className=\"absolute top-4 right-4 bg-black/50 text-white px-3 py-1 rounded text-sm\">\n                Skip in {Math.ceil(skipAfter - currentTime)}s\n              </div>\n            )}\n\n            {/* Control Overlay */}\n            {showControls && (\n              <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6\">\n                {/* Progress Bar */}\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center text-white text-sm mb-2\">\n                    <span>{formatTime(currentTime)}</span>\n                    <div className=\"flex-1 mx-3\">\n                      <div className=\"w-full bg-white/20 rounded-full h-1\">\n                        <div \n                          className=\"bg-white h-1 rounded-full transition-all duration-200\" \n                          style={{ width: `${duration > 0 ? (currentTime / duration) * 100 : 0}%` }}\n                        />\n                      </div>\n                    </div>\n                    <span>{formatTime(duration)}</span>\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      onClick={isPlaying ? handlePause : handlePlay}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-white hover:bg-white/20\"\n                    >\n                      <Play className={`h-5 w-5 ${isPlaying ? 'hidden' : 'block'}`} />\n                      <div className={`w-5 h-5 ${isPlaying ? 'block' : 'hidden'}`}>\n                        <div className=\"flex space-x-1\">\n                          <div className=\"w-1.5 h-5 bg-white\"></div>\n                          <div className=\"w-1.5 h-5 bg-white\"></div>\n                        </div>\n                      </div>\n                    </Button>\n\n                    <Button\n                      onClick={toggleMute}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-white hover:bg-white/20\"\n                    >\n                      {isMuted ? (\n                        <VolumeX className=\"h-5 w-5\" />\n                      ) : (\n                        <Volume2 className=\"h-5 w-5\" />\n                      )}\n                    </Button>\n                  </div>\n\n                  {/* Ad Info */}\n                  <div className=\"text-white text-sm\">\n                    {currentAd.type === 'promotional' ? (\n                      <span>Sponsored Content</span>\n                    ) : currentAd.type === 'adsterra' ? (\n                      <span>Powered by Adsterra</span>\n                    ) : (\n                      <span>Advertisement</span>\n                    )}\n                  </div>\n\n                  {/* Close Button */}\n                  <Button\n                    onClick={onComplete}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-white hover:bg-white/20\"\n                  >\n                    <X className=\"h-5 w-5\" />\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {/* Click-to-play overlay when paused */}\n            {!isPlaying && !isLoading && (\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <Button\n                  onClick={handlePlay}\n                  size=\"lg\"\n                  className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                >\n                  <Play className=\"h-8 w-8 mr-2\" />\n                  Play Ad\n                </Button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9998},"client/src/components/layout/app-layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { ResponsiveBannerAd } from \"@/components/responsive-banner-ad\";\nimport { MobileResponsiveAd } from \"@/components/mobile-responsive-ad\";\n\ninterface AppLayoutProps {\n  children: ReactNode;\n  pageType?: string;\n  showBannerAds?: boolean;\n  className?: string;\n}\n\nexport function AppLayout({ \n  children, \n  pageType = \"default\", \n  showBannerAds = true,\n  className = \"\" \n}: AppLayoutProps) {\n  return (\n    <div className={`min-h-screen pb-20 ${className}`}> {/* Extra padding for multiple ads */}\n      {/* Main Content */}\n      <main className=\"relative\">\n        {children}\n      </main>\n      \n      {/* Page-specific banner ads */}\n      {showBannerAds && (\n        <>\n          {/* Primary bottom banner ad */}\n          <ResponsiveBannerAd \n            placement={`${pageType}-bottom-primary`}\n            pageType={pageType}\n            className=\"z-50\"\n          />\n          \n          {/* Secondary banner ad (for high-traffic pages) */}\n          {(pageType === 'home' || pageType === 'video' || pageType === 'subject') && (\n            <div className=\"fixed bottom-16 left-0 right-0 z-40\">\n              <ResponsiveBannerAd \n                placement={`${pageType}-bottom-secondary`}\n                pageType={pageType}\n                className=\"bg-gray-100 dark:bg-gray-800\"\n                dismissible={true}\n              />\n            </div>\n          )}\n          \n          {/* Mobile-optimized ad */}\n          <MobileResponsiveAd \n            placement={`${pageType}-mobile`}\n            pageType={pageType}\n            position=\"bottom\"\n            minimizable={true}\n          />\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":1685},"client/src/pages/admin/brand-promotions.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Edit, Trash2, Eye, DollarSign, Users, BarChart3 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { BrandPromotion, InsertBrandPromotion } from \"@shared/schema\";\n\nconst brandPromotionSchema = z.object({\n  brandName: z.string().min(1, \"Brand name is required\"),\n  brandLogo: z.string().url().optional().or(z.literal(\"\")),\n  contactEmail: z.string().email(\"Valid email is required\"),\n  contactPhone: z.string().optional(),\n  productName: z.string().min(1, \"Product name is required\"),\n  productDescription: z.string().optional(),\n  targetAudience: z.string().optional(),\n  campaignBudget: z.number().min(0).optional(),\n  campaignDuration: z.number().min(1).default(30),\n  videoUrl: z.string().url().optional().or(z.literal(\"\")),\n  websiteUrl: z.string().url().optional().or(z.literal(\"\")),\n  callToAction: z.string().default(\"Learn More\"),\n  priority: z.number().min(1).max(5).default(1),\n  isActive: z.boolean().default(true),\n  isApproved: z.boolean().default(false),\n});\n\ntype BrandPromotionFormData = z.infer<typeof brandPromotionSchema>;\n\nexport default function BrandPromotions() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingPromotion, setEditingPromotion] = useState<BrandPromotion | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: promotions = [], isLoading } = useQuery<BrandPromotion[]>({\n    queryKey: [\"/api/admin/brand-promotions\"],\n  });\n\n  const form = useForm<BrandPromotionFormData>({\n    resolver: zodResolver(brandPromotionSchema),\n    defaultValues: {\n      brandName: \"\",\n      brandLogo: \"\",\n      contactEmail: \"\",\n      contactPhone: \"\",\n      productName: \"\",\n      productDescription: \"\",\n      targetAudience: \"Students\",\n      campaignBudget: 10000,\n      campaignDuration: 30,\n      videoUrl: \"\",\n      websiteUrl: \"\",\n      callToAction: \"Learn More\",\n      priority: 1,\n      isActive: true,\n      isApproved: false,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: BrandPromotionFormData) => {\n      return await apiRequest(\"/api/admin/brand-promotions\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/brand-promotions\"] });\n      setDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Brand promotion created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create brand promotion\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<BrandPromotionFormData> }) => {\n      return await apiRequest(`/api/admin/brand-promotions/${id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/brand-promotions\"] });\n      setDialogOpen(false);\n      setEditingPromotion(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Brand promotion updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update brand promotion\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/admin/brand-promotions/${id}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/brand-promotions\"] });\n      toast({\n        title: \"Success\",\n        description: \"Brand promotion deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete brand promotion\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: BrandPromotionFormData) => {\n    if (editingPromotion) {\n      updateMutation.mutate({ id: editingPromotion.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const openEditDialog = (promotion: BrandPromotion) => {\n    setEditingPromotion(promotion);\n    form.reset({\n      brandName: promotion.brandName,\n      brandLogo: promotion.brandLogo || \"\",\n      contactEmail: promotion.contactEmail,\n      contactPhone: promotion.contactPhone || \"\",\n      productName: promotion.productName,\n      productDescription: promotion.productDescription || \"\",\n      targetAudience: promotion.targetAudience || \"Students\",\n      campaignBudget: promotion.campaignBudget || 10000,\n      campaignDuration: promotion.campaignDuration || 30,\n      videoUrl: promotion.videoUrl || \"\",\n      websiteUrl: promotion.websiteUrl || \"\",\n      callToAction: promotion.callToAction || \"Learn More\",\n      priority: promotion.priority || 1,\n      isActive: promotion.isActive ?? true,\n      isApproved: promotion.isApproved ?? false,\n    });\n    setDialogOpen(true);\n  };\n\n  const formatCurrency = (amount: number | null) => {\n    if (!amount) return \"Not specified\";\n    return new Intl.NumberFormat(\"en-IN\", {\n      style: \"currency\",\n      currency: \"INR\",\n    }).format(amount);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-lg\">Loading brand promotions...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Brand Promotions</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage custom brand video advertisements and partnerships\n          </p>\n        </div>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => {\n              setEditingPromotion(null);\n              form.reset();\n            }}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Brand Promotion\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingPromotion ? \"Edit Brand Promotion\" : \"Create New Brand Promotion\"}\n              </DialogTitle>\n              <DialogDescription>\n                Add brand promotion details to create custom video advertisements\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"brandName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Brand Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Samsung, Coca Cola\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"productName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Galaxy S24, Diet Coke\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"contactEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Contact Email *</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"brand@company.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"contactPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Contact Phone</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"+91 9876543210\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"productDescription\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Product Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe the product or service being promoted...\"\n                          rows={3}\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"brandLogo\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Brand Logo URL</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"https://example.com/logo.png\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"videoUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Promotional Video URL</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"https://youtube.com/watch?v=...\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"targetAudience\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Target Audience</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select audience\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Students\">Students</SelectItem>\n                            <SelectItem value=\"Professionals\">Professionals</SelectItem>\n                            <SelectItem value=\"Teachers\">Teachers</SelectItem>\n                            <SelectItem value=\"All\">All Users</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"campaignBudget\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Campaign Budget (₹)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"10000\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"campaignDuration\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Duration (Days)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            placeholder=\"30\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"websiteUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Website URL</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"https://brand-website.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"callToAction\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Call to Action</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Learn More\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"priority\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Priority (1-5)</FormLabel>\n                        <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={field.value?.toString()}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select priority\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"1\">1 - Low</SelectItem>\n                            <SelectItem value=\"2\">2 - Normal</SelectItem>\n                            <SelectItem value=\"3\">3 - Medium</SelectItem>\n                            <SelectItem value=\"4\">4 - High</SelectItem>\n                            <SelectItem value=\"5\">5 - Critical</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"isActive\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel className=\"text-base\">Active</FormLabel>\n                          <FormDescription>\n                            Enable this promotion to show in campaigns\n                          </FormDescription>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"isApproved\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel className=\"text-base\">Approved</FormLabel>\n                          <FormDescription>\n                            Approve this promotion for public display\n                          </FormDescription>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                    {editingPromotion ? \"Update\" : \"Create\"} Promotion\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {promotions.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <DollarSign className=\"w-16 h-16 text-muted-foreground mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No Brand Promotions</h3>\n            <p className=\"text-muted-foreground text-center mb-4\">\n              Start earning from brand partnerships by adding your first promotion.\n            </p>\n            <Button onClick={() => setDialogOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add First Promotion\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6\">\n          {promotions.map((promotion) => (\n            <Card key={promotion.id} className=\"overflow-hidden\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    {promotion.brandLogo && (\n                      <img \n                        src={promotion.brandLogo} \n                        alt={promotion.brandName}\n                        className=\"w-12 h-12 object-contain rounded border\"\n                      />\n                    )}\n                    <div>\n                      <CardTitle className=\"text-xl\">{promotion.brandName}</CardTitle>\n                      <CardDescription>{promotion.productName}</CardDescription>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant={promotion.isApproved ? \"default\" : \"secondary\"}>\n                      {promotion.isApproved ? \"Approved\" : \"Pending\"}\n                    </Badge>\n                    <Badge variant={promotion.isActive ? \"default\" : \"outline\"}>\n                      {promotion.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                    <Badge variant=\"outline\">Priority {promotion.priority}</Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-muted-foreground\">Budget:</span>\n                    <p className=\"font-medium\">{formatCurrency(promotion.campaignBudget)}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Duration:</span>\n                    <p className=\"font-medium\">{promotion.campaignDuration} days</p>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Target:</span>\n                    <p className=\"font-medium\">{promotion.targetAudience}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Contact:</span>\n                    <p className=\"font-medium\">{promotion.contactEmail}</p>\n                  </div>\n                </div>\n\n                {promotion.productDescription && (\n                  <div>\n                    <span className=\"text-muted-foreground text-sm\">Description:</span>\n                    <p className=\"text-sm mt-1\">{promotion.productDescription}</p>\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <Eye className=\"w-4 h-4 text-muted-foreground\" />\n                    <span>{(promotion.impressions || 0).toLocaleString()} views</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"w-4 h-4 text-muted-foreground\" />\n                    <span>{(promotion.clicks || 0).toLocaleString()} clicks</span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">CTR:</span>\n                    <span className=\"ml-1\">\n                      {(promotion.impressions || 0) > 0 \n                        ? (((promotion.clicks || 0) / (promotion.impressions || 1)) * 100).toFixed(2) + '%'\n                        : '0%'\n                      }\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">CTA:</span>\n                    <span className=\"ml-1\">{promotion.callToAction}</span>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => openEditDialog(promotion)}>\n                    <Edit className=\"w-4 h-4 mr-1\" />\n                    Edit\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => deleteMutation.mutate(promotion.id)}\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-1\" />\n                    Delete\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":24741},"client/src/components/mobile-responsive-ad.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { X, ChevronUp } from \"lucide-react\";\nimport { useBannerSettings } from \"@/hooks/use-banner-settings\";\n\ninterface MobileResponsiveAdProps {\n  placement?: string;\n  position?: 'bottom' | 'top';\n  minimizable?: boolean;\n  pageType?: string;\n}\n\nexport function MobileResponsiveAd({ \n  placement = \"mobile-banner\", \n  position = \"bottom\",\n  minimizable = true,\n  pageType = \"global\"\n}: MobileResponsiveAdProps) {\n  const [isVisible, setIsVisible] = useState(true);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [adContent, setAdContent] = useState<any>(null);\n  const [isMobile, setIsMobile] = useState(false);\n  const { shouldShowMobileAds, shouldShowOnPage, settings } = useBannerSettings();\n\n  useEffect(() => {\n    // Check if device is mobile\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    \n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    \n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  useEffect(() => {\n    loadMobileAdContent();\n  }, [placement]);\n\n  const loadMobileAdContent = async () => {\n    try {\n      const response = await fetch(`/api/brand-promotions/active?placementType=mobile-banner&placement=${placement}`);\n      const brandAds = await response.json();\n      \n      if (brandAds && brandAds.length > 0) {\n        const selectedAd = brandAds[Math.floor(Math.random() * brandAds.length)];\n        setAdContent({\n          type: 'brand',\n          data: selectedAd\n        });\n        \n        // Track mobile impression\n        trackMobileAdImpression(selectedAd.id);\n      } else {\n        setAdContent({\n          type: 'mobile-optimized',\n          data: {\n            title: \"Get Premium Access\",\n            description: \"Unlock all features\",\n            ctaText: \"Upgrade\",\n            mobileOptimized: true\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load mobile ad:', error);\n    }\n  };\n\n  const trackMobileAdImpression = async (promotionId: string) => {\n    try {\n      await fetch('/api/brand-promotions/analytics', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          promotionId,\n          actionType: 'view',\n          deviceType: 'mobile',\n          userAgent: navigator.userAgent\n        })\n      });\n    } catch (error) {\n      console.error('Failed to track mobile ad impression:', error);\n    }\n  };\n\n  const handleAdClick = () => {\n    if (adContent?.type === 'brand') {\n      trackMobileAdClick(adContent.data.id);\n      if (adContent.data.websiteUrl) {\n        window.open(adContent.data.websiteUrl, '_blank', 'noopener,noreferrer');\n      }\n    }\n  };\n\n  const trackMobileAdClick = async (promotionId: string) => {\n    try {\n      await fetch('/api/brand-promotions/analytics', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          promotionId,\n          actionType: 'click',\n          deviceType: 'mobile',\n          userAgent: navigator.userAgent\n        })\n      });\n    } catch (error) {\n      console.error('Failed to track mobile ad click:', error);\n    }\n  };\n\n  // Only show on mobile devices if banner settings allow\n  if (!isMobile || !shouldShowMobileAds() || !shouldShowOnPage(pageType) || !isVisible || !adContent) {\n    return null;\n  }\n\n  const positionClasses = position === 'bottom' \n    ? 'bottom-0' \n    : 'top-0';\n\n  return (\n    <div className={`fixed left-0 right-0 z-50 bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 shadow-lg ${positionClasses} transition-transform duration-300 ${isMinimized ? 'transform translate-y-[calc(100%-2rem)]' : ''}`}>\n      <div className=\"relative\">\n        {/* Minimize/Maximize button */}\n        {(minimizable && !!settings.minimizable) && (\n          <button\n            onClick={() => setIsMinimized(!isMinimized)}\n            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-t-lg px-3 py-1 shadow-sm\"\n          >\n            <ChevronUp className={`w-4 h-4 text-gray-600 dark:text-gray-300 transition-transform ${isMinimized ? 'rotate-180' : ''}`} />\n          </button>\n        )}\n\n        {/* Ad Content */}\n        <div \n          className={`px-3 py-2 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors ${isMinimized ? 'hidden' : 'block'}`}\n          onClick={handleAdClick}\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n              {adContent.data.brandLogo && (\n                <img \n                  src={adContent.data.brandLogo} \n                  alt={adContent.data.brandName}\n                  className=\"w-8 h-8 rounded object-cover flex-shrink-0\"\n                />\n              )}\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"text-sm font-semibold text-gray-900 dark:text-white truncate\">\n                  {adContent.data.productName || adContent.data.title}\n                </div>\n                <div className=\"text-xs text-gray-600 dark:text-gray-300 truncate\">\n                  {adContent.data.productDescription || adContent.data.description}\n                </div>\n              </div>\n              <button className=\"flex-shrink-0 px-2 py-1 text-xs font-medium bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">\n                {adContent.data.callToAction || adContent.data.ctaText}\n              </button>\n            </div>\n            \n            {/* Close button */}\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                setIsVisible(false);\n              }}\n              className=\"ml-2 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Minimized state */}\n        {isMinimized && (\n          <div className=\"px-3 py-1 text-center\">\n            <div className=\"text-xs text-gray-500 dark:text-gray-400\">Ad</div>\n          </div>\n        )}\n        \n        {/* Ad label */}\n        <div className=\"absolute top-1 left-2 text-xs text-gray-400 uppercase tracking-wide\">\n          Ad\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6510},"client/src/components/responsive-banner-ad.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { X } from \"lucide-react\";\nimport { useBannerSettings } from \"@/hooks/use-banner-settings\";\n\ninterface ResponsiveBannerAdProps {\n  placement?: string;\n  className?: string;\n  dismissible?: boolean;\n  pageType?: string;\n}\n\nexport function ResponsiveBannerAd({ \n  placement = \"bottom-banner\", \n  className = \"\",\n  dismissible = true,\n  pageType = \"global\"\n}: ResponsiveBannerAdProps) {\n  const [isVisible, setIsVisible] = useState(true);\n  const [adContent, setAdContent] = useState<any>(null);\n  const { shouldShowAds, shouldShowOnPage, settings } = useBannerSettings();\n\n  useEffect(() => {\n    // Load ad content based on placement\n    loadAdContent();\n  }, [placement]);\n\n  const loadAdContent = async () => {\n    try {\n      // Try to load brand promotions first\n      const response = await fetch(`/api/brand-promotions/active?placementType=banner&placement=${placement}`);\n      const brandAds = await response.json();\n      \n      if (brandAds && brandAds.length > 0) {\n        // Use brand promotion ad\n        const selectedAd = brandAds[Math.floor(Math.random() * brandAds.length)];\n        setAdContent({\n          type: 'brand',\n          data: selectedAd\n        });\n        \n        // Track impression\n        trackAdImpression(selectedAd.id);\n      } else {\n        // Fallback to programmatic ads\n        setAdContent({\n          type: 'programmatic',\n          data: {\n            title: \"Premium Educational Content\",\n            description: \"Unlock advanced features with our premium subscription\",\n            ctaText: \"Upgrade Now\",\n            image: \"https://via.placeholder.com/320x100/4F46E5/FFFFFF?text=Premium+Features\"\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load ad content:', error);\n      // Show fallback ad\n      setAdContent({\n        type: 'fallback',\n        data: {\n          title: \"Support Our Platform\",\n          description: \"Help us keep providing quality education content\",\n          ctaText: \"Learn More\",\n          image: \"https://via.placeholder.com/320x100/10B981/FFFFFF?text=Support+Education\"\n        }\n      });\n    }\n  };\n\n  const trackAdImpression = async (promotionId: string) => {\n    try {\n      await fetch('/api/brand-promotions/analytics', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          promotionId,\n          actionType: 'view',\n          deviceType: window.innerWidth < 768 ? 'mobile' : window.innerWidth < 1024 ? 'tablet' : 'desktop',\n          userAgent: navigator.userAgent\n        })\n      });\n    } catch (error) {\n      console.error('Failed to track ad impression:', error);\n    }\n  };\n\n  const trackAdClick = async (promotionId?: string) => {\n    if (promotionId) {\n      try {\n        await fetch('/api/brand-promotions/analytics', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            promotionId,\n            actionType: 'click',\n            deviceType: window.innerWidth < 768 ? 'mobile' : window.innerWidth < 1024 ? 'tablet' : 'desktop',\n            userAgent: navigator.userAgent\n          })\n        });\n      } catch (error) {\n        console.error('Failed to track ad click:', error);\n      }\n    }\n  };\n\n  const handleAdClick = () => {\n    if (adContent?.type === 'brand') {\n      trackAdClick(adContent.data.id);\n      if (adContent.data.websiteUrl) {\n        window.open(adContent.data.websiteUrl, '_blank', 'noopener,noreferrer');\n      }\n    }\n  };\n\n  const handleDismiss = () => {\n    setIsVisible(false);\n  };\n\n  // Check banner settings before rendering\n  if (!shouldShowAds() || !shouldShowOnPage(pageType) || !isVisible || !adContent) {\n    return null;\n  }\n\n  const renderBrandAd = (brandData: any) => (\n    <div \n      className=\"flex items-center justify-between p-3 sm:p-4 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n      onClick={handleAdClick}\n    >\n      <div className=\"flex items-center space-x-3 sm:space-x-4 flex-1 min-w-0\">\n        {brandData.brandLogo && (\n          <img \n            src={brandData.brandLogo} \n            alt={brandData.brandName}\n            className=\"w-8 h-8 sm:w-12 sm:h-12 rounded-lg object-cover flex-shrink-0\"\n          />\n        )}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-sm sm:text-base font-semibold text-gray-900 dark:text-white truncate\">\n            {brandData.productName}\n          </div>\n          <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300 line-clamp-2\">\n            {brandData.productDescription || `Discover ${brandData.brandName}'s latest offerings`}\n          </div>\n        </div>\n        <div className=\"flex-shrink-0\">\n          <span className=\"inline-flex items-center px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded-full\">\n            {brandData.callToAction || \"Learn More\"}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderProgrammaticAd = (adData: any) => (\n    <div className=\"flex items-center justify-between p-3 sm:p-4\">\n      <div className=\"flex items-center space-x-3 sm:space-x-4 flex-1 min-w-0\">\n        <img \n          src={adData.image} \n          alt={adData.title}\n          className=\"w-12 h-8 sm:w-16 sm:h-10 rounded object-cover flex-shrink-0\"\n        />\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-sm sm:text-base font-semibold text-gray-900 dark:text-white truncate\">\n            {adData.title}\n          </div>\n          <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300 truncate\">\n            {adData.description}\n          </div>\n        </div>\n        <button className=\"flex-shrink-0 px-3 py-1 text-xs font-medium bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors\">\n          {adData.ctaText}\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className={`fixed bottom-0 left-0 right-0 z-50 bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 shadow-lg ${className}`}>\n      <div className=\"max-w-7xl mx-auto relative\">\n        {/* Ad Content */}\n        {adContent.type === 'brand' && renderBrandAd(adContent.data)}\n        {(adContent.type === 'programmatic' || adContent.type === 'fallback') && renderProgrammaticAd(adContent.data)}\n        \n        {/* Dismiss Button */}\n        {(dismissible && !!settings.dismissible && !!settings.showCloseButton) && (\n          <button\n            onClick={handleDismiss}\n            className=\"absolute top-2 right-2 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\n            aria-label=\"Close ad\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        )}\n        \n        {/* Ad Label */}\n        <div className=\"absolute top-1 left-2 text-xs text-gray-400 uppercase tracking-wide\">\n          Ad\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7043}}}